<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1-Spring基础</title>
    <url>/2021/03/02/1-Spring%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Spring是分层的Java SE/EE应用全栈(full-stack)轻量级开发框架，以IoC(Inverse of Control:反转控制)和AOP(Aspect Oriented Programing:面向切面编程)为内核</p>
<p>提供了展现层（Spring MVC）和持久层Spring JDBCTemplate以及业务层事务管理等众多企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE企业应用开发框架</p>
<h3 id="Spring优势"><a href="#Spring优势" class="headerlink" title="Spring优势"></a>Spring优势</h3><ol>
<li>方便解耦，简化开发：通过Spring提供的IoC容器，可以将对象间的依赖关系交由Spring进行控制，避免硬编码所造成的过度耦合。用户也不必再为单例模式类、属性文件解析等这些很底层的需求编写代码，可以更专注于上层的应用。</li>
<li>支持AOP编程：通过Spring的AOP功能，方便进行面向切面编程，许多不容易用传统OOP实现的功能可以通过AOP轻松实现。</li>
<li>声明式事务的支持：可以将我们从单调烦闷的事务管理代码中解脱出来，通过声明式方式灵活的进行事务管理，提高开发效率和质量。</li>
<li>方便程序测试</li>
<li>方便集成各种优秀框架</li>
<li>降低了Java EE API的使用难度</li>
<li>是Java源码的学习典范</li>
</ol>
<h3 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/spring%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg"></p>
<h3 id="Spring程序开发步骤"><a href="#Spring程序开发步骤" class="headerlink" title="Spring程序开发步骤"></a>Spring程序开发步骤</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/Spring%E5%BC%80%E5%8F%91%E6%AD%A5%E9%AA%A4.jpg"></p>
<p>在我们之前的开发步骤中，Dao层的对象需要我们自行创建，这就导致程序耦合较高，通关Spring我们可以将Dao层路径定义在XML配置文件中，再利用Spring通关反射创建该对象，以实现程序的解耦</p>
<ol>
<li>导入Spring开发的基本包坐标</li>
<li>编写Dao接口和实现类</li>
<li>创建Spring核心配置文件</li>
<li>在Spring配置文件中配置Dao层的路径</li>
<li>使用Spring的API获取Bean实例</li>
</ol>
<h4 id="1-利用Maven导入Spring开发的基本包坐标"><a href="#1-利用Maven导入Spring开发的基本包坐标" class="headerlink" title="1. 利用Maven导入Spring开发的基本包坐标"></a>1. 利用Maven导入Spring开发的基本包坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-编写Dao接口和实现类"><a href="#2-编写Dao接口和实现类" class="headerlink" title="2. 编写Dao接口和实现类"></a>2. 编写Dao接口和实现类</h4><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Save Running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建Spring核心配置文件"><a href="#3-创建Spring核心配置文件" class="headerlink" title="3. 创建Spring核心配置文件"></a>3. 创建Spring核心配置文件</h4><p>一般命名为applicationContext.xml，保存在resources文件夹内（创建时直接利用Spring Config模板创建即可）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-在Spring配置文件中配置Dao层的路径"><a href="#4-在Spring配置文件中配置Dao层的路径" class="headerlink" title="4. 在Spring配置文件中配置Dao层的路径"></a>4. 在Spring配置文件中配置Dao层的路径</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5-使用Spring的API获取Bean实例"><a href="#5-使用Spring的API获取Bean实例" class="headerlink" title="5. 使用Spring的API获取Bean实例"></a>5. 使用Spring的API获取Bean实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>1-计算机网络和因特网</title>
    <url>/2021/03/07/1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用基本概念"><a href="#常用基本概念" class="headerlink" title="常用基本概念"></a>常用基本概念</h1><ul>
<li>计算机网络：使用单一技术相互连接（连接介质可以是光纤，铜线，微波…）的自主（单台计算机具有独立自主性）计算机的互联集合</li>
<li>互联网络（Internet）：是计算机网络的连接，是网络的网络</li>
<li>拓扑：信道（信号的通道）的分布方式，常见有一下几种形式，最常见的两种基础拓扑是总线拓扑和星型拓扑</li>
</ul>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(9).jpg" alt="未命名文件 (9)"></p>
<ul>
<li>总线拓扑<ul>
<li>从主机上发出的信号在总线上双向同时传输</li>
<li>所有主机都可以接收这个信号</li>
</ul>
</li>
</ul>
<ul>
<li><p>星型拓扑</p>
<ul>
<li>主机都挂接在一个中心节点上</li>
<li>早期中心节点由集线器充当，现在的中心节点主要由交换机充当</li>
<li>相较于总线拓扑有单点故障这一缺点（是指系统中一点失效，就会让整个系统无法运作的部件，换句话说，单点故障即会整体故障。）</li>
</ul>
</li>
<li><p>ISP: Internet Service Provider,互联网服务提供商,指的是面向公众提供下列信息服务的经营者：一是接入服务，即帮助用户接入Internet；二是导航服务，即帮助用户在Internet上找到所需要的信息；三是信息服务，即建立数据服务系统，收集、加工、存储信息，定期维护更新，并通过网络向用户提供信息内容服务。</p>
</li>
<li><p>协议：一系列规则和约定的规范性描述，控制网络中的设备之间++如何进行信息交换++</p>
</li>
<li><p>易混淆的常见单位</p>
<ul>
<li>bit意为“位”或“比特”，是计算机运算的基础；</li>
<li>byte意为“字节”，是计算机文件大小的基本计算单位；</li>
<li>二者转换关系为：一字节（1byte）=八个单位元（8bit）</li>
</ul>
</li>
<li><p>数字带宽：指在单位时间内流经的信息总量，带宽越大意味着里边信息越多</p>
<ul>
<li>基本单位：比特每秒，即bps(k,M,G…)或者写作bits/s</li>
</ul>
</li>
<li><p>吞吐量(Throughput)：实际的，可测的带宽</p>
<ul>
<li>受制因素<ul>
<li>网络设备性能</li>
<li>用户数量</li>
<li>用网的时间</li>
<li>用户计算机性能</li>
<li>网络拓朴</li>
<li>服务器</li>
</ul>
</li>
<li>瞬间吞吐量：在一个时间点的速率</li>
<li>平均吞吐量：在很长一段时间内平均的吞吐率</li>
<li>瓶颈链路：限制端到端吞吐量的链路</li>
</ul>
</li>
</ul>
<ul>
<li>信息量(S/bit)，带宽(BW/bps)和传输时间(T/s)之间的关系</li>
<li>理想情况：</li>
</ul>
<p>$$T=\frac{S}{BW}$$</p>
<ul>
<li>实际情况(P表示吞吐量/bps)：</li>
</ul>
<p>$$T=\frac{S}{P}$$</p>
<h4 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h4><p>如果ISDN的带宽为 128kbps，OC-48的带宽为 2.488 Gbps，如果用ISDN传输一张装满数据的1.44M软盘，用OC-48传输装满10G的硬盘数据，问哪一种传输所用的时间更少？</p>
<h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><p>按照理想的传输状况来计算，即根据：T=S/BW,<br>$$T_{fd}=\frac{1.44M}{128kbps}=\frac{1.44<em>10^6</em>8}{128*10^3}=90(s)$$</p>
<p>$$T_{hd}=\frac{10G}{2.488Gbps}=\frac{10G*8}{2.a88Gbps}=32.152(s)$$</p>
<p>易知，OC-48更快，题目中承8的原因是1.44M表示文件大小，单位是字节，这里要计算标准时间秒，就要转换为标准的比特bit</p>
<ul>
<li><p>点到点<br>信源机和信宿机之间的通信由一段一段==直接相连的机器==间的通信组成，机器间的直接连接叫做点到点的连接<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(11).jpg" alt="未命名文件 (11)"></p>
</li>
<li><p>端到端<br>信源机与信宿机之间直接==通信==，好像拥有一条直接的线路<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(12).jpg" alt="未命名文件 (12)"></p>
</li>
</ul>
<ul>
<li>计算机网络分类<ul>
<li>按传输介质：<ul>
<li>有线网络</li>
<li>无线网络</li>
</ul>
</li>
<li>按大小和规模划分<ul>
<li>最小的计算机网络：PAN(Personal Area Networks)覆盖的范围1米左右</li>
<li>局域网：LAN(Local Area Networks)覆盖范围一公里左右</li>
<li>城域网：MAN(Metroplitan Area Networks)覆盖范围十公里左右</li>
<li>广域网：WAN(Wide Area Networks)覆盖范围约100/1000公里</li>
<li>互联网：Internet覆盖范围为全球</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这里提到的距离不是绝对的，判断网络类型的绝对因素是其是否具有对应网络类型的特征以及是否采用对应技术</p>
<h1 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h1><p>上文提到，计算机网络是使用单一技术相互连接的自主计算机的互联集合，而Internet则是计算机网络的连接。处在因特网的边缘部分即因特网上的所有主机（host），又称为端系统（end system）</p>
<p>端系统通过通信链路（光纤，铜线，微波…）和分组交换机（路由器，链路交换机…）相互连接。</p>
<h2 id="协议的准确定义"><a href="#协议的准确定义" class="headerlink" title="协议的准确定义"></a>协议的准确定义</h2><p>定义了在两个或多个通信实体间交换的报文格式和顺序，以及报文发送/接收及其他事件发生时所采取的动作</p>
<h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><h2 id="网络边缘（edge）"><a href="#网络边缘（edge）" class="headerlink" title="网络边缘（edge）"></a>网络边缘（edge）</h2><p>网络边缘指的就是位于因特网边缘的主机（端系统）以及运行于其上的应用程序（例如web浏览器/web服务器，email程序等…）根据具体功能又可以被细分为C/S，即客户端Client与服务器Server</p>
<h3 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h3><p>接入网指的就是将端系统物理连接到其边缘路由器（端系统到任何其他远程端系统路径上的第一台路由器）的网络</p>
<h2 id="网络核心（core）"><a href="#网络核心（core）" class="headerlink" title="网络核心（core）"></a>网络核心（core）</h2><p>由分组交换机（路由器等…）和链路构成的网状网络</p>
<h3 id="数据通过网络进行传输的方式"><a href="#数据通过网络进行传输的方式" class="headerlink" title="数据通过网络进行传输的方式"></a>数据通过网络进行传输的方式</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>为每个呼叫（CALL）预留一条专属线路，即在端系统通信会话期间，会为该会话预留端系统沿路通信所需的所有资源（缓存，链路传输速率）</p>
<p>电路交换这种数据传输方式具有如下特性</p>
<ul>
<li>资源独享，同时保证了呼叫的性能</li>
<li>如果呼叫没有数据传输，被分配的资源就会被浪费</li>
<li>通常被电话网络采用</li>
</ul>
<p>为了使一条真实线路能够同时传输多条对话，电路交换网络采用了片的概念，指将带宽等网络资源按照一定的复用方式进行切分，然后为某个呼叫分配指定的片进行数据传输</p>
<p>电路交换网络中的复用</p>
<ul>
<li>频分(Frequency-division multiplexing)</li>
<li>时分(Time-division multiplexing)</li>
<li>波分(Wave-division multiplexing)</li>
</ul>
<p>电路交换网络并不适合作为计算机间通信的方式：</p>
<ul>
<li>连接建立时间长</li>
<li>计算机之间的通信有突发性，如果使用线路交换，则浪费的片较多<ul>
<li>即使这个呼叫没有数据传递，其所占据的片也不能够被别的呼叫使用</li>
</ul>
</li>
<li>可靠性不高</li>
</ul>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组交换不再采用片的概念，当数据传输时会占据整个网络资源</p>
<p>在进行数据传输时，源会将长报文进行切割，切为一个个的分组后，以分组为单位进行交换。</p>
<p>多数的分组转换机采用存储转发传输的方式，即在数据的输入端规定进行转发前，节点必须确保已经接收到了完整的一个分组（只有当完整的一个分组到达数据交换机时才会执行转发操作），也因此分组交换的延迟时间要大于电路交换（电路交换可以每比特直接进行传输，因为此时整条线路都是自己独占的）</p>
<p>分组交换可能出现排队延迟和丢失</p>
<ul>
<li>当到达速率&gt;链路的传输速率时会出现交换机处接收到完整的数据包，但发出链路方向还有数个未发出或正在发出的数据包，此时该数据包就需要进行排队，等待传输完成</li>
<li>如果路由器的缓存用完了，分组将会被抛</li>
</ul>
<h3 id="网络核心的关键功能"><a href="#网络核心的关键功能" class="headerlink" title="网络核心的关键功能"></a>网络核心的关键功能</h3><ul>
<li>路由：利用路由表决定数据包从源到目的地的路径（通过路由算法）</li>
<li>转发：将分组从路由器的输入链路转移到输出链</li>
</ul>
<h3 id="ISP互联"><a href="#ISP互联" class="headerlink" title="ISP互联"></a>ISP互联</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ISP%E4%BA%92%E8%81%94%E3%80%81.png"></p>
<ul>
<li>POP: 高层ISP面向客户网络的接入点，涉及费用结算<ul>
<li>如一个低层ISP接入多个高层ISP，多宿（multi home）</li>
</ul>
</li>
<li>对等接入：2个ISP对等互接，不涉及费用结算</li>
<li>IXP：多个对等ISP互联互通之处，通常不涉及费用结算<ul>
<li>对等接入</li>
</ul>
</li>
<li>ICP自己部署专用网络，同时和各级ISP连接</li>
</ul>
<h2 id="分组交换网中的时延，丢包和吞吐量"><a href="#分组交换网中的时延，丢包和吞吐量" class="headerlink" title="分组交换网中的时延，丢包和吞吐量"></a>分组交换网中的时延，丢包和吞吐量</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E5%88%86%E7%BB%84%E4%B8%A2%E5%A4%B1%E6%97%B6%E5%BB%B6%E5%8E%9F%E5%9B%A0.png"></p>
<h3 id="四种主要的分组延时"><a href="#四种主要的分组延时" class="headerlink" title="四种主要的分组延时"></a>四种主要的分组延时</h3><h4 id="处理延时（节点处理延时）"><a href="#处理延时（节点处理延时）" class="headerlink" title="处理延时（节点处理延时）"></a>处理延时（节点处理延时）</h4><p>出现原因是检查bit级差错，检查分组首部和决定将分组导向何处</p>
<h4 id="排队延时"><a href="#排队延时" class="headerlink" title="排队延时"></a>排队延时</h4><p>出现原因是在输出链路上等待传输的时间，取决于路由器的拥塞程度</p>
<ul>
<li>流量强度<ul>
<li>R=链路宽度（bps）</li>
<li>L=分组长度（bits）</li>
<li>a=分组到达队列的平均速率</li>
<li>流量强度=La/R</li>
<li>流量强度趋于0时，排队延时很小</li>
<li>流量强度趋于1时，排队延时快速增加直至无穷大</li>
<li>流量强度等于或大于1时，排队延时无穷大，几乎所有分组都会处于排队状态</li>
<li>设计系统时需要保证流量强度小于1</li>
</ul>
</li>
</ul>
<h4 id="传输延时"><a href="#传输延时" class="headerlink" title="传输延时"></a>传输延时</h4><p>出现原因是将分组发送到链路上所消耗的时间，也被称为存储转发延时</p>
<p>计算方式：</p>
<ul>
<li>R=链路带宽(bps)</li>
<li>L=分组长度(bits)</li>
<li>将分组发送到链路上的时间= L/R</li>
</ul>
<h4 id="传播延时"><a href="#传播延时" class="headerlink" title="传播延时"></a>传播延时</h4><p>传播延时出现的原因是由于比特流在物理线路上传播时，产生的传播时间。</p>
<p>计算方式：</p>
<ul>
<li>d=物理链路的长度</li>
<li>s=比特流在传播媒介上的速率</li>
<li>传播延时=d/s</li>
</ul>
<h3 id="节点延时"><a href="#节点延时" class="headerlink" title="节点延时"></a>节点延时</h3><p>$$d_{nodal}=d_{proc}+d_{queue}+d_{trans}+d_{prop}$$</p>
<ul>
<li>$d_{proc}$表示处理延时，通常是微秒级或更少</li>
<li>$d_{queue}$表示排队延时，时长取决于拥塞程度</li>
<li>$d_{trans}=L/R$ 表示传输延时，对低速率的链路其传输延时较为明显（如拨号），通常为微秒级到毫秒级</li>
<li>$d_{prop}$传播延时，一般为几微妙到几百毫秒</li>
</ul>
<h1 id="参考模型"><a href="#参考模型" class="headerlink" title="参考模型"></a>参考模型</h1><h2 id="为什么计算机网络需要进行分层"><a href="#为什么计算机网络需要进行分层" class="headerlink" title="为什么计算机网络需要进行分层"></a>为什么计算机网络需要进行分层</h2><ol>
<li>各层独立工作，层之间通过接口联系，降低协议工作的复杂程度</li>
<li>提高灵活性，任何一层的改变不影响其他层</li>
<li>每层的实现技术可以不同，减少了实现的复杂度</li>
<li>易于维护，每层可以单独进行调试</li>
<li>还便于标准化</li>
</ol>
<h2 id="分层原则："><a href="#分层原则：" class="headerlink" title="分层原则："></a>分层原则：</h2><p>信宿机第n层收到的对象应该与信源机第n层发出的对象完全一致</p>
<h2 id="典型分层模型"><a href="#典型分层模型" class="headerlink" title="典型分层模型"></a>典型分层模型</h2><ul>
<li>OSI七层模型</li>
<li>TCP/IP四层模型</li>
</ul>
<h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><table>
<thead>
<tr>
<th>层次</th>
<th>名称</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>应用层(Application)</td>
<td>主要为各种各样的网络应用提供网络服务，应用报文之间的交互(Email，FTP，微信)</td>
</tr>
<tr>
<td>6</td>
<td>表示层(Presentation)</td>
<td>将信息表示为一定形式的数据流(将信息转换为比特)完成的任务有压缩与解压缩，加密解密等</td>
</tr>
<tr>
<td>5</td>
<td>会话层(Session)</td>
<td>它负责通信主机间的会话的建立，管理和拆除(协调通信双方会话)</td>
</tr>
<tr>
<td>4</td>
<td>传输层(Transport)</td>
<td>是参考模型的核心层之一，负责通信主机间的进程到进程的区分，并负责提供可靠的传输(对于TCP来说，其还负责提供可靠的传输，差错恢复，拥塞控制等额外功能)</td>
</tr>
<tr>
<td>3</td>
<td>网络层(Network)</td>
<td>是另一个核心层，功能是通过IP地址以及最优路径，将每一个每一个分组从信源机一路送至目的机（以分组为单位，端到端的传输）</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层(Data Link)</td>
<td>在相邻的两点间传输以帧为单位的数据（提供介质访问服务(通过物理地址识别通信主机，提供可靠的帧传递，并作差错控制，流控等)）</td>
</tr>
<tr>
<td>1</td>
<td>物理层(Physical)</td>
<td>发送端将上层的帧转换为物理信号，通过介质传送到相邻的接收方，接收方将物理信号转换为还原为比特流数据（提供<strong>透明的比特流</strong>(光信号，电信号，无线信号…)传递，物理流只关心比特流传输，不关心比特流包含内容）</td>
</tr>
</tbody></table>
<p>每一层都利用它下层的服务，为它的上层提供服务</p>
<h3 id="TCP-IP参考模型"><a href="#TCP-IP参考模型" class="headerlink" title="TCP/IP参考模型"></a>TCP/IP参考模型</h3><table>
<thead>
<tr>
<th>TCP/IP协议</th>
<th>OSI参考模型</th>
</tr>
</thead>
<tbody><tr>
<td>应用层(Telent,FTP,SNTP协议)</td>
<td>会话层，表示层和应用层</td>
</tr>
<tr>
<td>传输层(TCP,UDP协议)</td>
<td>传输层</td>
</tr>
<tr>
<td>网络层(ICMP,IP,ARP协议)</td>
<td>网络层</td>
</tr>
<tr>
<td>数据链路层</td>
<td>物理层和数据链路层</td>
</tr>
</tbody></table>
<h2 id="数据如何传输？"><a href="#数据如何传输？" class="headerlink" title="数据如何传输？"></a>数据如何传输？</h2><p>涉及到：发送方，接收方和中间的信号通道(用于传输比特流)</p>
<p>发送方：进行<strong>封装/打包</strong>：将信息打包，从最高层逐渐下行到最底层</p>
<ul>
<li>在每一层上，数据都被加上头部信息，用于传递信息<ol>
<li>在OSI模型上三层，信息表示为<strong>报文（message）或数据流（DataStream）</strong></li>
<li>传输层，切割为<strong>报文段或数据段（segment）</strong>，加上段头(包含端口号等)</li>
<li>网络层，添加分组头部(包含寻址主机的IP地址等)，形成<strong>分组(包)</strong></li>
<li>数据链路层，添加帧头(包含寻址主机所需的物理地址(MAC)，校验等信息)形成<strong>帧</strong></li>
<li>物理层，帧转为<strong>比特流</strong></li>
</ol>
</li>
</ul>
<p>上述加粗标注为数据在各层存在形式，称为数据协议单元PDU</p>
<h3 id="数据单元（DU）"><a href="#数据单元（DU）" class="headerlink" title="数据单元（DU）"></a>数据单元（DU）</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%95%B0%E6%8D%AE%E5%8D%95%E5%85%83DU.png"></p>
<ul>
<li>SDU：服务数据单元，是上层传送给下层的数据单元</li>
<li>PDU：协议数据单元，是相同层级间交换的数据单元</li>
</ul>
<p>从上图可以看出，数据单元的基本传输形式就是上层的SDU与上层的ICI（接口控制信息，包含了对应层的一些基本信息）组成了完整的数据单元利用原语通过服务接入点SAP进入下层，下层会根据本次的ICI与上层数据单元结合并继续向下层传递</p>
<p>接收方：进行<strong>解封装/解包</strong>，从最底层逐渐上行到最高层提取出信息（解封装的过程就是封装的逆向过程，在每层<em>去掉头部信息</em>，最终还原出应用层的输出：信息）</p>
<h3 id="实体-Entity-："><a href="#实体-Entity-：" class="headerlink" title="实体(Entity)："></a>实体(Entity)：</h3><p>每层中活动的元素，可能是硬件也可能是软件，负责完成对应层的封装或解封装任务。</p>
<h3 id="对等实体："><a href="#对等实体：" class="headerlink" title="对等实体："></a>对等实体：</h3><p>收发双方对应层上的实体互称对等实体</p>
<h3 id="虚拟通信-对等通信"><a href="#虚拟通信-对等通信" class="headerlink" title="虚拟通信(对等通信)"></a>虚拟通信(对等通信)</h3><p>只看收发双方的对应层，发现收发双方对应层(即对等实体之间)之间好像有一根直接的通道(虚拟通道)，沿虚拟通道，PDU从发放到达收方。</p>
<h3 id="服务-Service-："><a href="#服务-Service-：" class="headerlink" title="服务(Service)："></a>服务(Service)：</h3><p>低层实体向上层实体提供它们之间的通信的能力</p>
<ul>
<li>服务用户(serviceuser)</li>
<li>服务提供者(serviceprovider)<h4 id="原语-primitive-："><a href="#原语-primitive-：" class="headerlink" title="原语(primitive)："></a>原语(primitive)：</h4>上层使用下层服务的形式，高层使用低层提供的服务，以及低层向高层提供服务都是通过<br>服务访问原语来进行交互的—形式<h4 id="服务访问点SAP-ServicesAccessPoint-："><a href="#服务访问点SAP-ServicesAccessPoint-：" class="headerlink" title="服务访问点SAP(ServicesAccessPoint)："></a>服务访问点SAP(ServicesAccessPoint)：</h4>上层使用下层提供的服务通过层间的接口—地点；</li>
</ul>
<h3 id="服务，协议和接口之间的关系"><a href="#服务，协议和接口之间的关系" class="headerlink" title="服务，协议和接口之间的关系"></a>服务，协议和接口之间的关系</h3><p>参考模型上每一层都为上一层提供<strong>服务</strong>，以<strong>接口</strong>的形式供上层调用。<strong>协议</strong>作用于对应层之间</p>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>1-JavaScipt基础概念</title>
    <url>/2021/03/03/1-JavaScipt%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>一门客户端脚本语言（客户端指运行在客户端浏览器中，每一个浏览器都有JavaScript解析引擎。脚本语言指不需要通过编译，直接就可以被浏览器解析执行）</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用来增强用户和HTML页面交互过程，可以控制HTML元素，让页面有一些动态的效果（与动态资源无关），增强用户体验</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="与HTML结合方式"><a href="#与HTML结合方式" class="headerlink" title="与HTML结合方式"></a>与HTML结合方式</h3><h4 id="1-内部JS"><a href="#1-内部JS" class="headerlink" title="1. 内部JS"></a>1. 内部JS</h4><p>通过定义<script></script>标签实现，标签内容就是js代码。</p>
<h4 id="2-外部JS"><a href="#2-外部JS" class="headerlink" title="2. 外部JS"></a>2. 外部JS</h4><p>同样通过定义<script></script>实现，通过src属性引入外部文件</p>
<h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;script&gt;标签可以放在HTML文件的任意位置，执行顺序由所放置的位置决定</span></span><br><span class="line"><span class="comment">            可以定义多个</span></span><br><span class="line"><span class="comment">        内部JS：通过定义&lt;script&gt;实现，标签内容就是js代码。</span></span><br><span class="line"><span class="comment">        外部JS：同样通过定义&lt;script&gt;实现，通过src属性引入外部文件</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;Hello World!&quot;</span>);　<span class="comment">// 内部JS，弹出确认框</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test.js&quot;</span>&gt;</span><span class="javascript"><span class="comment">//外部JS文件</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">外部JS文件内容：</span></span><br><span class="line"><span class="comment">alert(&quot;外部JS文件&quot;);</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释方式与Java完全一样</p>
<ul>
<li>单行注释：<code>//注释内容</code></li>
<li>多行注释：<code>/*注释内容*/</code></li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="原始数据类型（基本数据类型）"><a href="#原始数据类型（基本数据类型）" class="headerlink" title="原始数据类型（基本数据类型）"></a>原始数据类型（基本数据类型）</h4><ul>
<li>number：包括整型/小数/NaN(Not a Number 一个不是数字的数字)</li>
<li>string：更类似于Python中的定义，可以用单引号或双引号表示</li>
<li>boolean：true或false</li>
<li>null：一个空对象的占位符</li>
<li>undefined：未定义。如果一个变量没有赋给初值，默认值为undefined</li>
</ul>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>即对象</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>一小块存储数据的内存空间</p>
<p>Java语言是强数据类型语言，在定义变量时必须指定变量的数据类型，并且之后也不能在该内存空间存放其他类型的值。</p>
<p>JavaScript是弱类型数据语言，在定义变量时不需要指定变量的数据类型，之后也可以根据情况，任意修改该内存空间上的数据类型</p>
<h4 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>

<p>可以通过typeof()函数查看变量数据类型</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符与Java基本一致</p>
<p>在JS中，如果运算数不是运算符要求的数据类型，那么JS引擎会自动进行数据转换</p>
<ul>
<li>String转number:如果string是数字，则按照字面值转换，如果不少，则转为NaN</li>
<li>boolean转number:true转1，false转0</li>
<li>number转boolean：除了0和NaN都是true</li>
<li>String转boolean：除了空字符串””都是true</li>
<li>null和undefined转boolean：都是false</li>
<li>对象转Boolean：都是true</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">“==”和“===”的区别</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">等于“==”在比较前会先查看左右两边变量的数据类型，如果数据类型不一致，会先进行数据转换，再进行比较，即&quot;123&quot;==123的返回值是true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">全等于“===”在比较前同样查看左右数据类型，假如数据类型不一致，直接返回false，即&quot;123&quot;===&quot;123&quot;返回值是false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<p><strong>JS同样支持 ? : 这种三元运算符</strong></p>
<h4 id="几点注意"><a href="#几点注意" class="headerlink" title="几点注意"></a>几点注意</h4><ul>
<li>每行末尾以分号;作结，但在一行只有一条语句的情况下分号;可以省略（不建议省略）</li>
<li>定义变量时前面的var可加可不加<ul>
<li>加：变量为局部变量</li>
<li>不加：变量是全局变量（同样不建议使用，代码可读性差）</li>
</ul>
</li>
</ul>
<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>基本与Java完全一致</p>
<ul>
<li>if/else</li>
<li>switch/case</li>
<li>while</li>
<li>for</li>
<li>do while</li>
</ul>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="Function对象"><a href="#Function对象" class="headerlink" title="Function对象"></a>Function对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Function函数(方法)对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var func=new Function(形参列表,方法体);  基本不用，不符合正常逻辑</span></span><br><span class="line"><span class="comment">    2. function 方法名(形参列表)&#123;</span></span><br><span class="line"><span class="comment">            方法体</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    3. var 方法名=function(形参列表)&#123;</span></span><br><span class="line"><span class="comment">            方法体</span></span><br><span class="line"><span class="comment">       &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    length属性获取形参个数</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    1. 方法定义时，形参的类型var不用写，返回值类型也可省略</span></span><br><span class="line"><span class="comment">    2. 方法是一个对象，如果定义名称相同，则新的方法对象会覆盖旧的方法对象</span></span><br><span class="line"><span class="comment">    3. 在JS中，方法的调用只与方法名有关，与参数列表无关，例如一个函数参数列表接收两个参数</span></span><br><span class="line"><span class="comment">       但是实际可以传入0，1，2，3...个参数，如果实参少于形参列表，未匹配上的参数就是undefined</span></span><br><span class="line"><span class="comment">       如果实参多于形参列表，多余参数不作考虑或操作</span></span><br><span class="line"><span class="comment">    4. 在方法声明中有一个隐藏的内置对象(数组),arguments 封装所有实参列表</span></span><br><span class="line"><span class="comment">5. 调用</span></span><br><span class="line"><span class="comment">    方法名称(实参列表)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Function对象方式1</span></span><br><span class="line"><span class="keyword">var</span> func=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;alert(a+b)&quot;</span>);</span><br><span class="line"><span class="comment">//创建Function对象方式2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a-b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Function对象方式3</span></span><br><span class="line"><span class="keyword">var</span> func3=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(a*b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="comment">//func(3,4);</span></span><br><span class="line"><span class="comment">//func2(8,2);</span></span><br><span class="line"><span class="comment">//func3(2,2);</span></span><br><span class="line"><span class="comment">//在JS中，方法的调用只与方法名有关，与参数列表无关</span></span><br><span class="line"><span class="comment">//func2();</span></span><br><span class="line"><span class="comment">//func2(1);</span></span><br><span class="line"><span class="comment">//func2(1,2);</span></span><br><span class="line"><span class="comment">//func2(1,2,3);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用arguments定义可计算任意数和的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func4</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>;a&lt;<span class="built_in">arguments</span>.length;a++)&#123;</span><br><span class="line">        sum+=<span class="built_in">arguments</span>[a];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum=func4(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">alert(sum);</span><br></pre></td></tr></table></figure>


<h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array数组对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var arr=new Array(元素列表);</span></span><br><span class="line"><span class="comment">    2. var arr=new Array(数组长度);</span></span><br><span class="line"><span class="comment">    3. var arr=[元素列表];</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    join(参数)：将数组中的元素按照指定的分隔符合并为一个字符串</span></span><br><span class="line"><span class="comment">    push()：向数组的尾部添加一个或多个元素，并返回数组长度</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    length数组的长度</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    数组元素的类型可变</span></span><br><span class="line"><span class="comment">    数组元素的长度可变</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组对象的创建</span></span><br><span class="line"><span class="keyword">var</span> arr1=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>];</span><br><span class="line"><span class="comment">//显示数组</span></span><br><span class="line"><span class="built_in">document</span>.write(arr1+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr2+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arr3+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Date日期对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建 var date=new Date();</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    toLocaleString()返回当前date对象对应的时间的本地字符串格式</span></span><br><span class="line"><span class="comment">    getTime()获取指定日期对象对应的毫秒值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(date.toLocaleString()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(date.getTime());</span><br></pre></td></tr></table></figure>

<h3 id="Math数学对象"><a href="#Math数学对象" class="headerlink" title="Math数学对象"></a>Math数学对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Math数学对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建 Math对象不用创建，可以直接使用Math.方法名()调用方法</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    random()</span></span><br><span class="line"><span class="comment">    ceil</span></span><br><span class="line"><span class="comment">    floor</span></span><br><span class="line"><span class="comment">    round</span></span><br><span class="line"><span class="comment">    等等....</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    PI等等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.PI+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.random()+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="number">4.5</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.round(<span class="number">4.9</span>)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>


<h3 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h3><h4 id="简单的正则表达式"><a href="#简单的正则表达式" class="headerlink" title="简单的正则表达式"></a>简单的正则表达式</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%AE%80%E5%8D%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.jpg" alt="简单正则表达式"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RegExp正则表达式对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment">    1. var reg=new RegExp(&quot;正则表达式&quot;);</span></span><br><span class="line"><span class="comment">    2. var reg=/正则表达式/</span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    1. test(参数)：验证指定字符串是否符合正则表达式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^[abc]+$/</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;aaccbbb&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> flag=reg.test(str);</span><br><span class="line"><span class="keyword">var</span> str2=<span class="string">&quot;abcd123&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> flag2=reg.test(str2);</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str+<span class="string">&quot;符合正则表达式：&quot;</span>+reg+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag2)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str2+<span class="string">&quot;符合正则表达式：&quot;</span>+reg+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Global全局对象"><a href="#Global全局对象" class="headerlink" title="Global全局对象"></a>Global全局对象</h3><p>全局对象，这个对象中封装的方法不需要对象可以直接调用</p>
<ul>
<li>encodeURI()：url编码</li>
<li>decodeURI()：url解码</li>
<li>encodeURIComponent()：url编码</li>
<li>decodeURIComponent()：url解码</li>
<li>parseInt()：将字符串转为数字（比直接强转功能更强大，该方法会逐一判断每一个字符是否是数字，直到不是数字为止，将前边的字符转为number）</li>
<li>isNaN()：判断一个变量是否为NaN</li>
<li>eval()：将JavaScript字符串转为JS脚本来执行</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>1-Junit单元测试</title>
    <url>/2021/03/03/1-Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><ul>
<li>黑盒测试：<blockquote>
<p>在测试中，把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。</p>
</blockquote>
</li>
<li>白盒测试：<blockquote>
<p>白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，白盒指的是盒子是可视的，即清楚盒子内部的东西以及里面是如何运作的。”白盒”法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。</p>
</blockquote>
</li>
</ul>
<h2 id="Junit步骤（白盒测试）"><a href="#Junit步骤（白盒测试）" class="headerlink" title="Junit步骤（白盒测试）"></a>Junit步骤（白盒测试）</h2><h3 id="1-定义一个测试类（也叫测试用例）"><a href="#1-定义一个测试类（也叫测试用例）" class="headerlink" title="1. 定义一个测试类（也叫测试用例）"></a>1. 定义一个测试类（也叫测试用例）</h3><p>测试类名一般采用：被测试类名+Test的格式。例如，Calculator的测试类叫做CalculatorTest</p>
<p>测试包名一般叫做test，例如：cn.ywrby.test</p>
<h3 id="2-定义测试方法（可以独立运行）"><a href="#2-定义测试方法（可以独立运行）" class="headerlink" title="2. 定义测试方法（可以独立运行）"></a>2. 定义测试方法（可以独立运行）</h3><p>方法名一般采用：test+测试的方法名的格式，例如add方法的测试方法是testAdd方法</p>
<p>返回值一般为void，参数列表一般为空</p>
<h3 id="3-导入Junit依赖环境"><a href="#3-导入Junit依赖环境" class="headerlink" title="3.导入Junit依赖环境"></a>3.导入Junit依赖环境</h3><h3 id="4-给方法加-Test"><a href="#4-给方法加-Test" class="headerlink" title="4. 给方法加@Test"></a>4. 给方法加@Test</h3><h3 id="5-结果判定"><a href="#5-结果判定" class="headerlink" title="5. 结果判定"></a>5. 结果判定</h3><p>显示红色，测试失败，显示绿色，测试成功。一般使用断言操作来测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.calculate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加法结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 减法结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//调用要测试的方法</span></span><br><span class="line">        <span class="keyword">int</span> result=calculator.add(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//利用断言检测结果准确性，第一个参数是期待值，第二个参数是真实值</span></span><br><span class="line">        Assert.assertEquals(<span class="number">6</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator calculator=<span class="keyword">new</span> Calculator();</span><br><span class="line">        <span class="comment">//调用要测试的方法</span></span><br><span class="line">        <span class="keyword">int</span> result=calculator.sub(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//利用断言检测结果准确性，第一个参数是期待值，第二个参数是真实值</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">4</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有测试用例执行前都会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在所有测试用例执行后都会调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;close...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>1-异常</title>
    <url>/2021/03/03/1-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h1><p><strong>异常是程序在“编译”或者“执行”的过程中可能出现的问题</strong></p>
<p>异常应该尽量提前避免，但是无法做到绝对避免，异常的可能情况太多，开发中只能提前干预。</p>
<p>异常一旦出现，如果没有提前避免，程序就会退出JVM虚拟机而终止，开发中异常是需要提前处理的。研究异常，并且避免异常，然后提前处理异常，体现的是程序的安全性，健壮性</p>
<h3 id="Java会为常见的代码异常都设计一个类来代表"><a href="#Java会为常见的代码异常都设计一个类来代表" class="headerlink" title="Java会为常见的代码异常都设计一个类来代表"></a>Java会为常见的代码异常都设计一个类来代表</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%97%A0%E6%A0%87%E9%A2%98%E8%84%91%E5%9B%BE.mindmap.jpg" alt="无标题脑图.mindmap"></p>
<h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><p>错误的意思，严重错误Error，无法通过处理的错误，一旦出现，程序员难以进行修改，一般只能重启系统，优化项目。例如：内存崩溃，JVM本身崩溃</p>
<h4 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h4><p>异常类，是开发中代码在编译或者执行过程中可能出现的错误，它是需要提前处理的，以便程序更加健壮</p>
<ol>
<li>编译时异常：继承自Exception的异常或者其子类，编译阶段就会报错，必须程序员进行处理，否则代码编译无法通过</li>
<li>运行时异常，继承自RuntimeException的异常或其子类，编译阶段不报错，运行阶段出现，运行时异常可处理也可不处理</li>
</ol>
<h2 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h2><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><ul>
<li>数组索引越界异常：ArrayIndexOutOfBoundsException</li>
<li>空指针异常：NullPointerException（直接输出没有问题，但是调用空指针变量的功能就会报错）</li>
<li>类型转换异常：ClassCastException</li>
<li>迭代器遍历没有此元素异常：NoSuchElementException</li>
<li>数学操作异常：ArithmeticException</li>
<li>数字转换异常：NumberFormatException</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数组索引越界异常：ArrayIndexOutOfBoundsException</span></span><br><span class="line">        <span class="keyword">int</span>[] array=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>&#125;;</span><br><span class="line">        System.out.println(array[<span class="number">3</span>]);</span><br><span class="line">        <span class="comment">//空指针异常：NullPointerException</span></span><br><span class="line">        String str1=<span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str1); <span class="comment">//直接输出没有问题</span></span><br><span class="line">        System.out.println(str1.length());  <span class="comment">//但是调用空指针变量的功能就会报错</span></span><br><span class="line">        <span class="comment">//类型转换异常：ClassCastException</span></span><br><span class="line">        Object name=<span class="string">&quot;Leslie&quot;</span>;</span><br><span class="line">        Integer s=(Integer) name;</span><br><span class="line">        <span class="comment">//迭代器遍历没有此元素异常：NoSuchElementException</span></span><br><span class="line">        <span class="comment">//数学操作异常：ArithmeticException</span></span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//数字转换异常：NumberFormatException</span></span><br><span class="line">        String num=<span class="string">&quot;23a&quot;</span>;</span><br><span class="line">        Integer n=Integer.valueOf(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h2><h4 id="代码编译阶段就会报错"><a href="#代码编译阶段就会报错" class="headerlink" title="代码编译阶段就会报错"></a>代码编译阶段就会报错</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里如果不设置throws ParseException，就会抛出编译异常</span></span><br><span class="line">    <span class="comment">//原因就在于parse操作很容易不规范</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String date=<span class="string">&quot;2015-01-12 10:23:21&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d =sdf.parse(date);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常的默认处理机制"><a href="#异常的默认处理机制" class="headerlink" title="异常的默认处理机制"></a>异常的默认处理机制</h2><h3 id="异常产生后的默认处理过程是自动处理过程"><a href="#异常产生后的默认处理过程是自动处理过程" class="headerlink" title="异常产生后的默认处理过程是自动处理过程"></a>异常产生后的默认处理过程是自动处理过程</h3><ol>
<li>默认会在出现异常的代码处自动创建一个异常对象：ArithmeticException等</li>
<li>异常会从方法中出现的点这里先抛出给调用者，各层调用者不断抛出最终抛出给JVM虚拟机</li>
<li>虚拟机接收到异常对象后，现在控制台输出/打印异常栈信息数据</li>
<li>直接从当前执行的异常点终止当前程序</li>
</ol>
<h4 id="这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡"><a href="#这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡" class="headerlink" title="这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡"></a>这种默认异常处理机制并不好（对于项目开发），一旦出现真的异常，会立即导致程序的死亡</h4><h2 id="编译时异常处理方式"><a href="#编译时异常处理方式" class="headerlink" title="编译时异常处理方式"></a>编译时异常处理方式</h2><h3 id="方式一：直接抛出错误"><a href="#方式一：直接抛出错误" class="headerlink" title="方式一：直接抛出错误"></a>方式一：直接抛出错误</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法 <span class="keyword">throws</span> 异常<span class="number">1</span>,异常<span class="number">2</span>,...&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上述方式，需要对异常逐个抛出，当异常很多时并不方便</span></span><br><span class="line"><span class="comment">//一般建议采用throws Exception这种方式，直接抛出根类异常</span></span><br><span class="line"></span><br><span class="line">方法 <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//如果程序正确可以输出结果</span></span><br><span class="line">        parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//如果程序错误依旧会报错并直接终止程序</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d=sdf.parse(time);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种异常处理方式并不好，整个过程中只是逐层把异常向上层抛出，本质与默认处理方式相同，只是避免了编译阶段的报错，让程序能够正常编译。但一旦出现错误，仍然会导致JVM虚拟机终止程序。这种方法适用于程序较小，报错原因较易排查的项目</p>
<h3 id="方式二：在出现异常的地方自己处理，谁出现谁处理"><a href="#方式二：在出现异常的地方自己处理，谁出现谁处理" class="headerlink" title="方式二：在出现异常的地方自己处理，谁出现谁处理"></a>方式二：在出现异常的地方自己处理，谁出现谁处理</h3><h4 id="采用监视捕获异常的方式，即try-catch"><a href="#采用监视捕获异常的方式，即try-catch" class="headerlink" title="采用监视捕获异常的方式，即try catch"></a>采用监视捕获异常的方式，即try catch</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//程序正确</span></span><br><span class="line">        parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//程序错误</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            Date d=sdf.parse(time);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ParseException e)&#123;  <span class="comment">//可以并列多个异常，或是直接用Exception监视所有可能异常</span></span><br><span class="line">            e.printStackTrace();  <span class="comment">//打印异常栈信息，不会引起程序死亡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（在企业开发中，一般直接采用监视Exception根类的方式，这样可以监视并打印所有可能的异常）</p>
<p>第二种处理异常的方式可以处理异常，并且出现异常后代码也不会死亡而是正常执行，但这种方式也存在不足之处，在没有返回值的情况下，下层独自监视处理异常，导致上层不了解下层的处理结果而是盲目的运行程序</p>
<h3 id="方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）"><a href="#方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）" class="headerlink" title="方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）"></a>方式三：在出现异常的地方把异常逐层抛出给最外层调用者，最外层调用者几种捕获处理（规范做法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            parseDate(<span class="string">&quot;2020-05-15 08:54:05&quot;</span>);  <span class="comment">//程序正确</span></span><br><span class="line">            parseDate(<span class="string">&quot;2020/05/15/08/54/05&quot;</span>);  <span class="comment">//程序错误</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序结束----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseDate</span><span class="params">(String time)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf =<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date d=sdf.parse(time);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这种方案最外层调用者可以知道底层执行的情况，同时程序在出现异常后也不会立即死亡，这是理论上最好的方案</strong></p>
<h2 id="运行时异常的处理机制"><a href="#运行时异常的处理机制" class="headerlink" title="运行时异常的处理机制"></a>运行时异常的处理机制</h2><p>运行时异常的处理规范：直接在最外层捕获处理即可，底层会自动抛出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MyDivision</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(a/b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----程序开始----&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            MyDivision(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">            System.err.println(<span class="string">&quot;运行成功！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.err.println(<span class="string">&quot;运行失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>异常捕获的本质就是直接将上层传输的异常捕获，然后输出它的异常栈信息，避免异常传输到JVM虚拟机，终止程序。从而保证了程序能够顺利执行完毕</p>
<hr>
<h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><h4 id="用在捕获处理的异常格式中的，放在捕获异常的最后面"><a href="#用在捕获处理的异常格式中的，放在捕获异常的最后面" class="headerlink" title="用在捕获处理的异常格式中的，放在捕获异常的最后面"></a>用在捕获处理的异常格式中的，放在捕获异常的最后面</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论代码是否出现异常还是正常执行</span></span><br><span class="line">    <span class="comment">//最终一定要执行这里的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在捕获异常中，try固定出现一次，catch出现0~N次（当存在finally时，可以省略catch，其他情况下不可以），finally可以出现至多一次</p>
<h3 id="finally作用"><a href="#finally作用" class="headerlink" title="finally作用"></a>finally作用</h3><p><strong>可以在代码执行完毕之后进行资源（资源都实现了Close able接口，自带close()方法）的释放操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">MyDivision</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a/b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;====finally被执行====&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(MyDivision(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">/* 这里就可以看出finally的强制执行效果</span></span><br><span class="line"><span class="comment">           程序正常执行，原本应该进入try,在try中会执行return语句</span></span><br><span class="line"><span class="comment">           return语句理应终止程序运行，但程序还是被强制执行了finally中的内容</span></span><br><span class="line"><span class="comment">           也就是在这里实际执行流程是在执行到return语句后被强制跳转到finally语句，先执行其中内容</span></span><br><span class="line"><span class="comment">           </span></span><br><span class="line"><span class="comment">           因此，在finally语句中加入return语句是十分危险的</span></span><br><span class="line"><span class="comment">           因为无论任何情况，只要finally中包含return语句，最后都只会执行finally中的return语句</span></span><br><span class="line"><span class="comment">           </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        <span class="comment">//return 233; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><h3 id="自定义编译时异常"><a href="#自定义编译时异常" class="headerlink" title="自定义编译时异常"></a>自定义编译时异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 自定义编译时异常：</span></span><br><span class="line"><span class="comment">* 1. 继承Exception</span></span><br><span class="line"><span class="comment">* 2. 重写构造器</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);  <span class="comment">//调用父类构造器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message, Throwable cause, <span class="keyword">boolean</span> enableSuppression, <span class="keyword">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用自定义异常"><a href="#调用自定义异常" class="headerlink" title="调用自定义异常"></a>调用自定义异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ExceptionTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ageControl(<span class="number">12</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ageControl</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> MyException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age&gt;<span class="number">60</span> || age&lt;<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">&quot;/ age is illegal&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;age is &quot;</span>+age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的编译时异常，在调用时会直接报错，所以直接用throws抛出给上层即可</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><strong>throws用在方法上，用于抛出方法中的异常给调用方</strong></p>
<p><strong>throw用在出现异常的地方，用于创建异常对象且立即从此处抛出</strong></p>
<p>自定义运行时异常的方式跟自定义编译时异常基本一致，只是运行时异常需要继承的是RuntimeException，并且在编译阶段并不会报错</p>
<hr>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>10-方法引用</title>
    <url>/2021/03/03/10-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="方法引用概述"><a href="#方法引用概述" class="headerlink" title="方法引用概述"></a>方法引用概述</h1><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>方法引用是为了进一步简化Lambda表达式的写法</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类型或对象::引用的方法  <span class="comment">//关键语法  “::”</span></span><br></pre></td></tr></table></figure>


<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;third&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历列表，通过Lambda表达式的方法</span></span><br><span class="line">        lists.forEach(s -&gt; System.out.println(s));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法引用(前提：必须形如上式前后的参数一致)</span></span><br><span class="line">        lists.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="静态方法的引用"><a href="#静态方法的引用" class="headerlink" title="静态方法的引用"></a>静态方法的引用</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名::静态方法</span><br></pre></td></tr></table></figure>


<h3 id="简化步骤"><a href="#简化步骤" class="headerlink" title="简化步骤"></a>简化步骤</h3><p>定义一个静态方法，将需要简化的代码放到一个静态方法中去</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li><strong>被引用的方法的参数列表和函数式接口中的抽象方法的参数列表必须完全一致</strong></li>
<li>如果函数式接口中的抽象方法有返回值，则被应用的方法也必须有相同返回值</li>
<li>如果函数式接口中的抽象方法没有返回值，则被应用的方法也可以有返回值，也可以没有</li>
</ul>
<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><p>首先在Student类中重写一个静态方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先定义静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareByAge</span><span class="params">(Student s1,Student s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1.getAge()-s2.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后利用静态方法的引用简化代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, (t1,t2)-&gt;Student.compareByAge(t1,t2));</span><br><span class="line">        <span class="comment">//使用静态方法进行简化,前后参数必须相同</span></span><br><span class="line">        Collections.sort(lists,Student::compareByAge);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="实例方法引用"><a href="#实例方法引用" class="headerlink" title="实例方法引用"></a>实例方法引用</h2><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">对象::实例方法</span><br></pre></td></tr></table></figure>


<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>定义一个实力方法，把需要的代码放到实例中去</p>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><p>被引用方法的参数列表和函数式接口的抽象方法的参数列表必须完全一致</p>
<h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>实例就是本节开头所引的System.out.println的简化写法</p>
<p>println本身是实例方法，out是输出流对象，并且前后参数完全一致，所以可以用方法引用简化</p>
<h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><h3 id="格式-3"><a href="#格式-3" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名::<span class="keyword">new</span> </span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>前后两个参数一致并且在创建对象的情况下就可以使用构造器引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//前后参数一致，并在创建对象</span></span><br><span class="line">s -&gt; <span class="keyword">new</span> Student(s);</span><br><span class="line"><span class="comment">//改写成引用</span></span><br><span class="line">Student::<span class="keyword">new</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>10-Servlet</title>
    <url>/2021/03/03/10-Servlet/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>运行在服务器端的小程序</p>
<p>Servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则</p>
<h3 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h3><ol>
<li>创建JavaEE项目</li>
<li>定义一个类，实现Servlet接口</li>
<li>实现接口的抽象方法</li>
<li>配置Servlet（在web.xml下配置）</li>
</ol>
<h4 id="配置代码："><a href="#配置代码：" class="headerlink" title="配置代码："></a>配置代码：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.ywrby.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h2><ol>
<li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径,获取访问的Servlet的资源路径</li>
<li>查找web.xml文件,是否有对应的<url-pattern>标签体内容。</li>
<li>如果有，则再找到对应的<servlet-class>全类名</li>
<li>tomcat会将字节码文件加载进内存，并且创建其对象</li>
<li>调用其方法</li>
</ol>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/servlet%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.jpg" alt="servlet执行原理"></p>
<h2 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h2><h3 id="1-被创建时"><a href="#1-被创建时" class="headerlink" title="1. 被创建时"></a>1. 被创建时</h3><p>执行init方法，且只执行一次，一般用于加载资源</p>
<h4 id="Servlet被创建的时机"><a href="#Servlet被创建的时机" class="headerlink" title="Servlet被创建的时机"></a>Servlet被创建的时机</h4><ul>
<li>默认情况下，在第一次访问时被创建</li>
<li>可以通过配置Servlet修改创建时机<ul>
<li>配置<Servlet>标签下的<load-on-startup>标签（值为正数则在启动服务器时就被创建，值为负数，则在第一次访问时创建，默认值为-1）</li>
</ul>
</li>
</ul>
<p>Servlet的init方法只执行一次，说明一个Servlet在内存中只存在一个对象，即Servlet是单例的。</p>
<ul>
<li>多个用户同时访问该对象时，就可能存在安全问题</li>
<li>解决方式：尽量不再Servlet中定义成员变量，不得已定义成员变量也不要在方法中修改成员变量的值（尽量把变量定义在方法中）</li>
</ul>
<h3 id="2-提供服务"><a href="#2-提供服务" class="headerlink" title="2. 提供服务"></a>2. 提供服务</h3><p>执行service方法，service方法可能被调用多次</p>
<h3 id="3-被销毁时"><a href="#3-被销毁时" class="headerlink" title="3. 被销毁时"></a>3. 被销毁时</h3><p>调用destroy方法，只在被销毁时执行一次，且必须是正常销毁，强制销毁时同样不执行。一般用于释放资源</p>
<h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><p>自Servlet3.0后，在配置时可以不必配置web.xml文件，而是采用注解配置的方式，大大降低配置注解的繁琐</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建JavaEE项目，选择Servlet版本在3.0以上，可以不创建web.xml</li>
<li>定义一个类，实现Servlet接口</li>
<li>复写方法</li>
<li>为该类添加注解，并进行配置<code>@WebServlet(url-pattern=&quot;资源路径&quot;)</code>或者省略url-pattern直接写作<code>@WebServlet(&quot;资源路径&quot;)</code></li>
</ol>
<p>一个url-pattern可以配置多个路径，例如<code>@WebServlet(&#123;&quot;/demo2&quot;,&quot;/demo3&quot;&#125;)</code></p>
<h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><ul>
<li>GenericServlet：一个抽象类，实现了Servlet接口，并对除service以外的方法都做了默认的空实现，支队service方法进行了抽象。所以在定义Servlet类时，可以继承GenericServlet，只需要实现service方法即可</li>
<li>HttpServlet：继承自GenericServlet。是对Http协议的一种封装，简化操作，其内部实现了service方法的判断逻辑，在继承时只需要复写doGet和doPost方法即可</li>
</ul>
<p>一般情况下我们采用继承HttpServlet并复写doGet和doPost方法的方式实现Servlet类</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>10-SpringMVC简介及组件解析</title>
    <url>/2021/03/03/10-SpringMVC%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h1><h2 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>经典MVC（Model View Controller）模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p>
<h4 id="M（Model）"><a href="#M（Model）" class="headerlink" title="M（Model）"></a>M（Model）</h4><p>模型，主要通过JavaBean实现。完成具体的业务操作（例如数据库的增删改查，对象的封装）</p>
<h4 id="V（View）"><a href="#V（View）" class="headerlink" title="V（View）"></a>V（View）</h4><p>视图，主要通过JSP实现。用于展示数据</p>
<h4 id="C（Controller）"><a href="#C（Controller）" class="headerlink" title="C（Controller）"></a>C（Controller）</h4><p>控制器，主要通过Servlet实现。用于获取用户输入，调用模型，以及将数据交给视图进行展示</p>
<h3 id="MVC优点"><a href="#MVC优点" class="headerlink" title="MVC优点"></a>MVC优点</h3><ul>
<li>耦合性低，方便维护，利于分工协作</li>
<li>代码重用性高</li>
</ul>
<h3 id="MVC缺点"><a href="#MVC缺点" class="headerlink" title="MVC缺点"></a>MVC缺点</h3><ul>
<li>项目架构复杂，对操作人员要求提高</li>
</ul>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级web框架，属于SpringFrameWork的后续产品，已经融合在Spring Web Flow中</p>
<p>SpringMVC是目前最主流的MVC框架之一，它通过一套注解，让一个简单的Java类（POJO：Plain Ordinary Java Object，简单的Java对象，实际就是普通JavaBeans）成为处理请求的控制器，而无需实现任何接口。同时它还支持Restful编程风格的请求</p>
<h3 id="SpringMVC概述"><a href="#SpringMVC概述" class="headerlink" title="SpringMVC概述"></a>SpringMVC概述</h3><p>在之前所述的客户端发送请求流程中，一般流程都是客户端发送请求到Tomcat服务器，服务器会利用Tomcat引擎对请求进行接收与封装（req和resp），随后进入web应用调用相关的请求资源即相关Servlet</p>
<p>但实际开发中web层的Servlet存在大量重复操作，几乎每个Servlet都需要执行</p>
<ol>
<li>接收请求参数 </li>
<li>封装实体</li>
<li>访问业务层</li>
<li>接收返回结果</li>
<li>指派页面操作</li>
</ol>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC1.jpg" alt="SpringMVC1"></p>
<p>以上大量重复的操作可以称为共有行为，而每个Servlet特有的具体执行实现可以称为特有行为，SpringMVC可以抽取共有行为，将所有共有行为创建为一个新的Servlet从未降低代码的重复。同时，剩下的特有行为也不再需要封装为Servlet，而是按照POJO来实现逻辑功能即可</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC2.jpg" alt="SpringMVC2"></p>
<p>不同框架所使用的前端控制器的格式是不相同的，以SpringMVC为例，其使用Servlet作为前端控制器，而以前的Struts2则采用Filter作为控制器</p>
<h4 id="SpringMVC架构"><a href="#SpringMVC架构" class="headerlink" title="SpringMVC架构"></a>SpringMVC架构</h4><p>为解决持久层中一直未处理好的数据库事务的编程，又为了迎合NoSQL崛起，SpringMVC给出了方案：将传统的模型层拆分为了业务层(Service)和数据访问层（DAO,Data Access Object）。 在 Service 下可以通过 Spring 的声明式事务操作数据访问层，而在业务层上还允许我们访问 NoSQL ，这样就能够满足NoSQL的使用了，它可以大大提高互联网系统的性能。</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%9E%B6%E6%9E%84.png"></p>
<h3 id="SpringMVC开发步骤"><a href="#SpringMVC开发步骤" class="headerlink" title="SpringMVC开发步骤"></a>SpringMVC开发步骤</h3><ol>
<li>导入SpringMVC坐标</li>
<li>配置Servlet（共有行为）—SpringMVC核心控制类DispatcherServlet</li>
<li>创建Controller类和视图</li>
<li>编写Controller（实现特有行为的POJO）</li>
<li>将Controller使用使用注解配置到容器中（@Controller）</li>
<li>配置spring-mvc.xml配置文件（配置组件扫描）</li>
</ol>
<h4 id="1-导入SpringMVC坐标"><a href="#1-导入SpringMVC坐标" class="headerlink" title="1. 导入SpringMVC坐标"></a>1. 导入SpringMVC坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-配置SpringMVC核心控制类DispatcherServlet-在web-xml配置文件中"><a href="#2-配置SpringMVC核心控制类DispatcherServlet-在web-xml配置文件中" class="headerlink" title="2. 配置SpringMVC核心控制类DispatcherServlet(在web.xml配置文件中)"></a>2. 配置SpringMVC核心控制类DispatcherServlet(在web.xml配置文件中)</h4><p>注意这里再配置SpringMVC前端控制器时第一个参数是控制器名称，第二个参数是创建Servlet的名，第三个参数是声明spring-mvc配置文件，最后一个参数是设置调用时间</p>
<p>配置映射地址是指定哪些页面调用时执行Servlet，url-pattern设为“/”表示所有页面都执行该控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-创建Controller类和视图"><a href="#3-创建Controller类和视图" class="headerlink" title="3. 创建Controller类和视图"></a>3. 创建Controller类和视图</h4><p>视图</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: </span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h4 id="4-编写Controller（实现特有行为的POJO）-将Controller使用使用注解配置到容器中（-Controller）"><a href="#4-编写Controller（实现特有行为的POJO）-将Controller使用使用注解配置到容器中（-Controller）" class="headerlink" title="4. 编写Controller（实现特有行为的POJO）,将Controller使用使用注解配置到容器中（@Controller）"></a>4. 编写Controller（实现特有行为的POJO）,将Controller使用使用注解配置到容器中（@Controller）</h4><p>Controller类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-配置spring-mvc-xml配置文件（配置组件扫描）"><a href="#5-配置spring-mvc-xml配置文件（配置组件扫描）" class="headerlink" title="5. 配置spring-mvc.xml配置文件（配置组件扫描）"></a>5. 配置spring-mvc.xml配置文件（配置组件扫描）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Controller的组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC开发流程图"><a href="#SpringMVC开发流程图" class="headerlink" title="SpringMVC开发流程图"></a>SpringMVC开发流程图</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="SpringMVC开发流程"></p>
<h1 id="SpringMVC组件解析"><a href="#SpringMVC组件解析" class="headerlink" title="SpringMVC组件解析"></a>SpringMVC组件解析</h1><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/SpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png"></p>
<ol>
<li>用户发送请求至前端控制器DispatcherServlet。</li>
<li>DispatcherServlet收到请求调用HandlerMapping处理器映射器。</li>
<li>处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。(这里返回的HandlerExecutionChain对象内部不光有访问的资源路径，还包含访问资源路径上的所有其他资源路径，因为实际web应用中要访问到所指定的资源可能需要经过多次跳转，所以只有获取所有跳转路径才能找到指定的资源)</li>
<li>DispatcherServlet调用HandlerAdapter处理器适配器。</li>
<li>HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器，即我们自己实现的特有应用的POJO)。</li>
<li>Controller执行完成返回ModelAndView。</li>
<li>HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</li>
<li>DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</li>
<li>ViewReslover解析后返回具体View。</li>
<li>DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户</li>
</ol>
<h2 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于建立请求URL和处理请求的方法之间的对应关系（即将请求URL与处理请求的方法进行绑定，并对请求进行限定）</p>
<h3 id="注解可出现的位置"><a href="#注解可出现的位置" class="headerlink" title="注解可出现的位置"></a>注解可出现的位置</h3><ul>
<li>类上：当该注解出现在类上时，将作为请求URL的一级访问目录，即访问类内的方法时前面需要注明该类，不写的情况下默认一级访问目录是根目录</li>
<li>方法上：当该注解出现在方法上时，表示请求URL的二级访问目录，与一级访问目录共同构成虚拟访问路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="comment">//访问路径：localhost:8080/userController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//访问路径：localhost:8080/userController/saveFunction</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>该注解支持三个属性（只有一个属性，且是value属性的情况下，属性名可以省略）</p>
<ul>
<li>value：用于指定请求URL的路径，作用和path一样</li>
<li>method：用于指定请求的方式（GET，POST…）</li>
<li>params：用于指定限制请求参数的条件，支持简单的表达式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个参数表示二级访问路径</span></span><br><span class="line"><span class="comment">     * 第二个参数表示对传入参数的限制，分别表示必须有username参数，money参数不能为100</span></span><br><span class="line"><span class="comment">     * 第三个参数表示必须是POST请求才能访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/saveFunction&quot;,params = &#123;&quot;username&quot;,&quot;money!100&quot;&#125;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>11-SpringMVC的数据响应</title>
    <url>/2021/03/05/11-SpringMVC%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><h3 id="方式一：直接返回字符串"><a href="#方式一：直接返回字符串" class="headerlink" title="方式一：直接返回字符串"></a>方式一：直接返回字符串</h3><p>直接返回字符串，此种方法会将返回的字符串与视图解析器的前后缀拼接后进行页面跳转</p>
<ol>
<li><p>没有设置视图解析器的前后缀，直接返回字符串时就需要把跳转页面路径写全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/success.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>设置视图解析器的前后缀(在Spring-MVC配置文件中配置)，直接返回字符串时就可以省略前后缀</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;(Controller) Save running...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方式二：返回ModelAndView"><a href="#方式二：返回ModelAndView" class="headerlink" title="方式二：返回ModelAndView"></a>方式二：返回ModelAndView</h3><p>ModelAndView对象内部分别存储了Model与View对象，其中Model对象负责进行数据的封装，即通过addObject方法像其中写入键值对，View对象负责展示数据（一般为JSP）通过setViewName进行指定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView 对象</span></span><br><span class="line"><span class="comment">     * Model：模型，负责封装数据</span></span><br><span class="line"><span class="comment">     * View：视图，负责展示数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//设置模型model数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Success! $&#123;username&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>上面的方法是在方法体内新创建ModelAndView对象，实际上由于是SpringMVC调用该方法，所以在调用过程中如果检测到该方法并非空参列表，会自动注入空参，所以可以改写成以下格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveFunction2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h2><h3 id="通过返回字符串进行回写数据"><a href="#通过返回字符串进行回写数据" class="headerlink" title="通过返回字符串进行回写数据"></a>通过返回字符串进行回写数据</h3><h4 id="方法一：利用response对象直接回写数据"><a href="#方法一：利用response对象直接回写数据" class="headerlink" title="方法一：利用response对象直接回写数据"></a>方法一：利用response对象直接回写数据</h4><p>因为是通过SpringMVC调用方法，所以可以在方法的形参列表中加入HttpServletResponse对象，由SpringMVC负责在调用时自动传入实参，并通过获得的response对象的getWriter方法进行数据的回写（但一般不会使用这种方法，这种方法又将请求和响应对象引入到了方法中，不便于SpringMVC的使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save2</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二：使用注解直接返回要回写的数据"><a href="#方法二：使用注解直接返回要回写的数据" class="headerlink" title="方法二：使用注解直接返回要回写的数据"></a>方法二：使用注解直接返回要回写的数据</h4><p>之前的案例中可以看出，如果不做其他注解的话，直接返回字符串，会被SpringMVC主动与视图控制器的前后缀拼接后进行页面跳转，所以这里如果想要实现直接返回字符串作为回写数据必须加上注解@ResponseBody 表示不进行页面跳转直接将返回的数据写入返回体中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一般情况下，我们不会直接返回普通字符串，而是返回能表示更多信息的JSON格式的字符串，所以这里可以利用JSON格式转换工具JackSon先将对象转换成字符串，再将字符串返回</p>
<p>首先需要导入Jackson需要用到的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后修改方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象并存入信息</span></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;Lselie&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//使用json转换工具将对象转换为JSON格式的字符串然后返回</span></span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = objectMapper.writeValueAsString(user);</span><br><span class="line">        <span class="comment">//返回json格式字符串</span></span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="通过对象或集合回写数据"><a href="#通过对象或集合回写数据" class="headerlink" title="通过对象或集合回写数据"></a>通过对象或集合回写数据</h3><h4 id="通过配置处理器映射器"><a href="#通过配置处理器映射器" class="headerlink" title="通过配置处理器映射器"></a>通过配置处理器映射器</h4><p>直接通过SpringMVC帮助我们进行对象或集合的JSON格式转换，并进行数据会写。我们只需要为处理器适配器(因为是处理器适配器为我们的形参列表传入实参)配置消息转换参数，指定使用JackSon进行数据格式转换，所以我们对spring-mvc.xml进行配置(messageConverters表示的就是消息转换参数，它会调用我们指定的格式转换工具处理我们返回的对象)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerAdapter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改写方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建对象并存入信息</span></span><br><span class="line">    User user=<span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;Lselie&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="comment">//直接返回User对象</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通过MVC的注解驱动"><a href="#通过MVC的注解驱动" class="headerlink" title="通过MVC的注解驱动"></a>通过MVC的注解驱动</h4><p>上面对于处理器映射器的配置还是略显繁杂，因此我们可以使用 mvc的注解驱动代替上述的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置spring-mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在SpringMVC中，处理器映射器，处理器适配器，视图解析器被称为SpringMVC的三大组件</p>
<p>使用<a href="mvc:annotation-driven/">mvc:annotation-driven/</a>配置mvc的注解驱动会自动加载RequestMappingHandlerMapping（处理器映射器）RequestMappingHandlerAdapter（处理器解析器），可用在spring-mvc.xml中用于替代处理器映射器和处理器解析器的配置</p>
<p>同时，该配置底层还会使用Jackson进行对象或集合的转换，所以我们不再需要配置处理器解析器</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>11-Http概述</title>
    <url>/2021/03/03/11-Http%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Http协议，超文本传输协议"><a href="#Http协议，超文本传输协议" class="headerlink" title="Http协议，超文本传输协议"></a>Http协议，超文本传输协议</h1><h4 id="Hyper-Text-Transfer-Protocol"><a href="#Hyper-Text-Transfer-Protocol" class="headerlink" title="(Hyper Text Transfer Protocol)"></a>(Hyper Text Transfer Protocol)</h4><h3 id="传输协议概念"><a href="#传输协议概念" class="headerlink" title="传输协议概念"></a>传输协议概念</h3><p>定义了客户端和服务器端通信时，发送数据的格式</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>基于TCP/IP的高级协议</li>
<li>默认端口号为80</li>
<li>基于请求/响应模型，即一次请求对应一次响应</li>
<li>无状态的：即每次请求之间相互独立，不能交互数据</li>
</ol>
<h2 id="请求信息数据格式"><a href="#请求信息数据格式" class="headerlink" title="请求信息数据格式"></a>请求信息数据格式</h2><ol>
<li>请求行<ul>
<li>请求方式：HTTP协议种规定了7种请求方式，常用的由两种<ul>
<li>GET：请求的参数在请求行中（即跟在URL后面），且请求的长度有限制，有安全隐患</li>
<li>POST：请求的参数在请求体中，请求的URL没有限制，相对安全</li>
</ul>
</li>
<li>请求url：发出请求的URL</li>
<li>请求协议/版本：例如HTTP/1.1</li>
</ul>
</li>
<li>请求头<ul>
<li>格式：请求头名称:请求头值</li>
<li>User-Agent：当前浏览器的相关版本信息（可以在服务器端获取该信息，以解决浏览器兼容问题）</li>
<li>Referer：当前网页的来源网址（从哪个网页跳转而来）可用于防盗链或进行一些统计工作</li>
<li>Accept：允许接收的数据格式</li>
<li>Accept-Language：允许接收的语言类型 </li>
<li>Coonection：连接状态（是否存活）</li>
</ul>
</li>
<li>请求空行：一段空行，用于分割各组成部分</li>
<li>请求体：正文内容</li>
</ol>
<h4 id="解析前的请求头"><a href="#解析前的请求头" class="headerlink" title="解析前的请求头"></a>解析前的请求头</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%89%8D%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg" alt="解析前的请求头"></p>
<h4 id="解析后的请求头"><a href="#解析后的请求头" class="headerlink" title="解析后的请求头"></a>解析后的请求头</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%A7%A3%E6%9E%90%E5%90%8E%E7%9A%84%E8%AF%B7%E6%B1%82%E5%A4%B4.jpg" alt="解析后的请求头"></p>
<h4 id="捕获的本地HTTP报文"><a href="#捕获的本地HTTP报文" class="headerlink" title="捕获的本地HTTP报文"></a>捕获的本地HTTP报文</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8D%95%E8%8E%B7%E7%9A%84HTTP%E6%8A%A5%E6%96%87.jpg" alt="捕获的HTTP报文"></p>
<h3 id="捕获本地报文的方式"><a href="#捕获本地报文的方式" class="headerlink" title="捕获本地报文的方式"></a>捕获本地报文的方式</h3><ol>
<li>以管理员身份运行cmd</li>
<li>route add 本机ip mask 255.255.255.255 网关ip<ul>
<li>如：route add 192.168.1.105 mask 255.255.255.255 192.168.1.1</li>
<li>使用完毕后用route delete 192.168.1.105 mask 255.255.255.255 192.168.1.1删除，否则所有本机报文都经过网卡出去走一圈回来很耗性能。</li>
</ul>
</li>
<li>此时再利用wireshark进行抓包便可以抓到本机自己同自己的通信包，这样配置的原因是将发往本机的包发送到网关，而此时wireshark可以捕获到网卡驱动的报文实现抓包。</li>
</ol>
<p>但这样有一个缺点，那就是本地请求的URL的IP只能写本地的IP地址，不能写localhost或127.0.0.1，写localhost或127.0.0.1还是抓不到包。<a href="https://www.cnblogs.com/lvdongjie/p/6110183.html">参考自</a></p>
<h2 id="响应信息数据格式"><a href="#响应信息数据格式" class="headerlink" title="响应信息数据格式"></a>响应信息数据格式</h2><ol>
<li>响应行<ul>
<li>组成：协议/版本 响应状态码  状态码描述（例如HTTP/1.1 200 OK）</li>
</ul>
</li>
<li>响应头<ul>
<li>格式：头名称:值</li>
<li>常见响应头<ul>
<li>Content-Type：服务器告知客户端，响应体数据的格式以及编码方式</li>
<li>Content-Disposition：服务器告知客户端响应体数据的打开方式</li>
</ul>
</li>
</ul>
</li>
<li>响应空行</li>
<li>响应体</li>
</ol>
<h3 id="响应状态码分类"><a href="#响应状态码分类" class="headerlink" title="响应状态码分类"></a>响应状态码分类</h3><table>
<thead>
<tr>
<th>分类</th>
<th>分类描述</th>
</tr>
</thead>
<tbody><tr>
<td>1xx</td>
<td>信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td>2xx</td>
<td>成功，操作被成功接收并处理</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>11-Stream流</title>
    <url>/2021/03/03/11-Stream%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Stream流的概述"><a href="#Stream流的概述" class="headerlink" title="Stream流的概述"></a>Stream流的概述</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>得益于Lambda所带来的函数式编程，用于解决已有集合/数组类库有的弊端</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>解决已有集合类库或者数组API的弊端</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不借助Stream流的情况下筛选出数组中首字母为L，长度大于3的名字</span></span><br><span class="line">        List&lt;String&gt; lists_search=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s:lists)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;L&quot;</span>) &amp; s.length()&gt;<span class="number">3</span>)&#123;</span><br><span class="line">                lists_search.add(s);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用Stream流筛选,整个代码被简化</span></span><br><span class="line">        lists.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;L&quot;</span>)).filter(s-&gt;s.length()&gt;<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Stream流类似一根传送带，集合中的元素在上面可以被操作</p>
<h2 id="Stream流运作思想"><a href="#Stream流运作思想" class="headerlink" title="Stream流运作思想"></a>Stream流运作思想</h2><ol>
<li>首先得到集合或者数组的Stream流(得到一根传送带)</li>
<li>然后用这个Stream流操作集合或者数组的元素</li>
<li>然后用Stream流简化替代集合操作的API</li>
</ol>
<h1 id="Stream流的获取"><a href="#Stream流的获取" class="headerlink" title="Stream流的获取"></a>Stream流的获取</h1><h3 id="集合获取Stream流的API"><a href="#集合获取Stream流的API" class="headerlink" title="集合获取Stream流的API"></a>集合获取Stream流的API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Collection集合获取Stream流</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stream&lt;String&gt; s1 = c.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map集合获取Stream流</span></span><br><span class="line">        Map&lt;String, Integer&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取Map集合的键的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = m.keySet().stream();</span><br><span class="line">        <span class="comment">//获取Map集合的值的Stream流</span></span><br><span class="line">        Stream&lt;Integer&gt; s3 = m.values().stream();</span><br><span class="line">        <span class="comment">//将键和值转换为set有序对类型，从而看作一个整体，获取键值对的Stream流</span></span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; s4 = m.entrySet().stream();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//数组获取Stream流,两种获取方式</span></span><br><span class="line">        String[] arrs=<span class="keyword">new</span> String[]&#123;<span class="string">&quot;Leslie&quot;</span>,<span class="string">&quot;Lily&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; s5= Arrays.stream(arrs);</span><br><span class="line">        Stream&lt;String&gt; s6=Stream.of(arrs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到集合获取Stream流，普遍采用stream()方法，数组获取Stream流有两种方式Arrays.stream(数组)/Stream.of(数组)</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; lists_search=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 通过filter的匿名内部类写法可以看出，filter是通过</span></span><br><span class="line"><span class="comment">         * 新建一个Predicate来指定条件，筛选数组/集合中的元素</span></span><br><span class="line"><span class="comment">         * 而这个筛选规则就是Predicate类中的test方法</span></span><br><span class="line"><span class="comment">         * 它会通过返回布尔值决定该元素是否删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        lists.stream().filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.length()&gt;<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).filter(<span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.startsWith(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forEach(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//是因为Predicate是一个函数式接口，所以才可以利用Lambda表达式简化</span></span><br><span class="line">        lists.stream().filter(s-&gt;s.startsWith(<span class="string">&quot;L&quot;</span>)).filter(s-&gt;s.length()&gt;<span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Stream流常用API"><a href="#Stream流常用API" class="headerlink" title="Stream流常用API"></a>Stream流常用API</h1><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>遍历集合元素</p>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>统计个数(返回值类型为long)</p>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>过滤元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>取符合条件的前几个元素</p>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>跳出符合条件的前几个元素</p>
<h2 id="Stream流的加工方法map"><a href="#Stream流的加工方法map" class="headerlink" title="Stream流的加工方法map"></a>Stream流的加工方法map</h2><p>map (映射)，指把原来的元素经过加工之后，重新放回去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给所有名字后面都加上序号</span></span><br><span class="line">        AtomicInteger i= <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        lists.stream().map(s -&gt; s+(i.getAndIncrement())).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Leslie1</span><br><span class="line">Lily2</span><br><span class="line">Leon3</span><br><span class="line">John4</span><br><span class="line">Li5</span><br><span class="line">Herge6</span><br></pre></td></tr></table></figure>

<h4 id="还可以将其转换为对象再放回其中"><a href="#还可以将其转换为对象再放回其中" class="headerlink" title="还可以将其转换为对象再放回其中"></a>还可以将其转换为对象再放回其中</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给所有名字后面都加上序号</span></span><br><span class="line">        <span class="comment">//AtomicInteger i= new AtomicInteger(1);</span></span><br><span class="line">        <span class="comment">//lists.stream().map(s -&gt; s+(i.getAndIncrement())).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将所有名字转换为学生对象再放回去</span></span><br><span class="line">        lists.stream().map(Student::<span class="keyword">new</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream流的合并方法concat"><a href="#Stream流的合并方法concat" class="headerlink" title="Stream流的合并方法concat"></a>Stream流的合并方法concat</h2><p><strong>注意concat方法只能同时合并两个流</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并相同的Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s1=lists.stream();</span><br><span class="line">        Stream&lt;String&gt; s2=Stream.of(<span class="string">&quot;Happy&quot;</span>,<span class="string">&quot;Sad&quot;</span>,<span class="string">&quot;Shy&quot;</span>);</span><br><span class="line">        <span class="comment">//直接调用concat并按照类型创建新的Stream流即可</span></span><br><span class="line">        Stream&lt;String&gt; s3=Stream.concat(s1,s2);</span><br><span class="line">        <span class="comment">//合并不同类型的s1,s4两条Stream流</span></span><br><span class="line">        Stream&lt;String&gt; s4=lists.stream();</span><br><span class="line">        Stream&lt;Integer&gt; s5=Stream.of(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="comment">//可行方法之一，就是直接定义对象类型的Stream流</span></span><br><span class="line">        Stream&lt;Object&gt; s6=Stream.concat(s4,s5);</span><br><span class="line"></span><br><span class="line">        s3.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        s6.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Leslie</span><br><span class="line">Lily</span><br><span class="line">Leon</span><br><span class="line">John</span><br><span class="line">Li</span><br><span class="line">Herge</span><br><span class="line">Happy</span><br><span class="line">Sad</span><br><span class="line">Shy</span><br><span class="line">------------</span><br><span class="line">Leslie</span><br><span class="line">Lily</span><br><span class="line">Leon</span><br><span class="line">John</span><br><span class="line">Li</span><br><span class="line">Herge</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure>

<h2 id="Stream终结与非终结方法"><a href="#Stream终结与非终结方法" class="headerlink" title="Stream终结与非终结方法"></a>Stream终结与非终结方法</h2><h3 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h3><p>一旦Stream流调用终结方法，流的操作就全部终结了，<strong>不能继续使用，只能创建新的Stream操作</strong>，其原因一般是没有返回值，或返回值不是Stream流对象</p>
<h4 id="终结方法包括forEach-count等等"><a href="#终结方法包括forEach-count等等" class="headerlink" title="终结方法包括forEach(),count等等"></a>终结方法包括forEach(),count等等</h4><h3 id="非终结方法"><a href="#非终结方法" class="headerlink" title="非终结方法"></a>非终结方法</h3><p>每次调用完成以后都会<strong>返回一个新的流对象</strong>，可以继续使用，支持链式编程</p>
<h4 id="非终结方法包括filter-skip-limit-map-concat等等"><a href="#非终结方法包括filter-skip-limit-map-concat等等" class="headerlink" title="非终结方法包括filter,skip,limit,map,concat等等"></a>非终结方法包括filter,skip,limit,map,concat等等</h4><h2 id="收集Stream流"><a href="#收集Stream流" class="headerlink" title="收集Stream流"></a>收集Stream流</h2><p>将Stream流的数据转回成集合</p>
<p>Stream流的作用在于将集合转换为一根高效的传送带，再利用Stream流的强大功能对Stream流进行操作。但是实际开发中最终数据的形式应该仍然是集合，所以这就涉及到Stream流的收集</p>
<p>换言之，Stream流只是一种手段，是我们操作数据的一种方式，集合才是我们需要始终用来保存，传输数据的数据结构，也就是目的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        lists.add(<span class="string">&quot;Leslie&quot;</span>); lists.add(<span class="string">&quot;Lily&quot;</span>); lists.add(<span class="string">&quot;Leon&quot;</span>);</span><br><span class="line">        lists.add(<span class="string">&quot;John&quot;</span>); lists.add(<span class="string">&quot;Li&quot;</span>); lists.add(<span class="string">&quot;Herge&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先转换成Stream流并进行筛选</span></span><br><span class="line">        Stream&lt;String&gt; s1=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//然后进行Stream流的收集，将它们转换为可以用来保存，传输的数据结构</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到set集合</span></span><br><span class="line">        Set&lt;String&gt; set1=s1.collect(Collectors.toSet());</span><br><span class="line">        System.out.println(set1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到list集合</span></span><br><span class="line">        Stream&lt;String&gt; s2=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        List&lt;String&gt; list1=s2.collect(Collectors.toList());</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换到数组</span></span><br><span class="line">        Stream&lt;String&gt; s3=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        Stream&lt;String&gt; s4=lists.stream().filter(s -&gt; s.length()&gt;=<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//两种转换方式，（还可以强转）</span></span><br><span class="line">        Object[] arrs1=s3.toArray();</span><br><span class="line">        <span class="comment">//接用构造器引用申明转换成的数组类型</span></span><br><span class="line">        String[] arrs2=s4.toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>12-SpringMVC的请求</title>
    <url>/2021/03/08/12-SpringMVC%E7%9A%84%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h1><h2 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h2><p>客户端请求参数的格式：name=value&amp;name=value…</p>
<p>服务器端要获得请求的参数，有时还需要对获得的数据进行封装，SpringMVC可以接收的参数如下：</p>
<ul>
<li>基本类型参数</li>
<li>POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h3 id="基本类型参数的获取"><a href="#基本类型参数的获取" class="headerlink" title="基本类型参数的获取"></a>基本类型参数的获取</h3><p>当Controller中的业务方法的参数名称与请求参数的名称一致时，SpringMVC会自动进行参数值的映射匹配</p>
<p>例如该方法中的参数名称分别为username和age，当我们访问 <a href="http://localhost:8080/save?username=leslie&amp;age=20">http://localhost:8080/save?username=leslie&amp;age=20</a> 时，两个基本类型的参数便能够自动匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String username,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">leslie</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="获得POJO类型的参数"><a href="#获得POJO类型的参数" class="headerlink" title="获得POJO类型的参数"></a>获得POJO类型的参数</h3><p>当Controller的业务方法中请求的POJO类的属性值与请求参数名称一致时，SpringMVC会自动将对应的属性值封装到POJO类中并实例化该对象</p>
<p>例如该业务方法的参数为POJO类：User，其内部属性值分别为username和age，当我们访问 <a href="http://localhost:8080/save?username=leslie&amp;age=20">http://localhost:8080/save?username=leslie&amp;age=20</a> 时，username和age便会被传入User对象内并实例化该POJO对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 输出结果</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;leslie&#x27;, age=20&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="获得数组类型的参数"><a href="#获得数组类型的参数" class="headerlink" title="获得数组类型的参数"></a>获得数组类型的参数</h3><p>本质与上文同理，只要保证Controller的业务方法中参数的数组名称与请求参数名称一致，数组便可以被自动匹配</p>
<p>访问 <a href="http://localhost:8080/save?users=leslie&amp;users=Jessica&amp;users=Lily">http://localhost:8080/save?users=leslie&amp;users=Jessica&amp;users=Lily</a> 该路径，则数组users将被自动匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String[] users)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(String user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">leslie</span></span><br><span class="line"><span class="comment">Jessica</span></span><br><span class="line"><span class="comment">Lily</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="获得集合类型的参数"><a href="#获得集合类型的参数" class="headerlink" title="获得集合类型的参数"></a>获得集合类型的参数</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>想要获得集合类型的参数，不能再直接通过在参数列表中指定集合类型的参数，而是需要将集合参数包装到一个POJO中（一般将该POJO称为VO：View Object），通过这个对象来获取集合类型参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样这里也无法通过get方法获取参数了，所以利用一个简单的表单页面完成验证,表单中<code>&lt;input&gt;</code>标签的name属性用于指定集合参数的名称，以及写入数据在集合中的位置，以及写入数据的属性名称。例如：<code>name=&quot;userList[0].username&quot;</code>表示这个数据会被写入到userList这个集合的第一个位置，写入的属性名称为username</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>接下来业务方法就可以利用VO对象来接收集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(VO vo)</span></span>&#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ListTest.png"></p>
<p>执行结果：</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/ListResult.png"></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>当使用ajax提交时，可以指定contentType为json格式，然后在业务方法中为参数名添加@RequestBody注解，就可以直接接收集合参数，不需要通过POJO封装后接收</p>
<p>通过ajax提交数据，并指定contentType类型为json格式</p>
<p>下面的代码先引入了jQuery文件，然后定义了一个集合数据类型，并向其中写入了两条数据，随后通过ajax进行提交，指定提交方式为POST，提交路径为业务方法的路径，提交的数据为经过JSON格式转化的集合数据，contentType为JSON</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">3</span>/<span class="number">8</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/js/jQuery-3.5.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> userList=<span class="keyword">new</span> Array();</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;Leslie&quot;</span>,age:<span class="number">19</span>&#125;);</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;Jessica&quot;</span>,age:<span class="number">37</span>&#125;);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url: <span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save&quot;</span>,</span><br><span class="line">            data: JSON.stringify(userList),</span><br><span class="line">            contentType: <span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>开启静态资源的访问，以保证jQuery-3.5.1.js能被正常访问到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在业务方法的参数前加上注解@RequestBody</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;Leslie&#x27;, age=19&#125;</span></span><br><span class="line"><span class="comment">User&#123;username=&#x27;Jessica&#x27;, age=37&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>就是本来用到jquery，他会把js文件当做请求，去扫描所有的requestMapping，发现没有，就加载失败。需要给这个扫描的配适器加一个能够扫描本地js目录下文件的权限</p>
<h3 id="开启静态资源的访问"><a href="#开启静态资源的访问" class="headerlink" title="开启静态资源的访问"></a>开启静态资源的访问</h3><p>上文中在通过ajax提交数据的过程中，在spring-mvc.xml中加入了如下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果不加入该代码，当我们访问对应的jsp文件路径时，会发现网页提示如下错误</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/error1.png"></p>
<p>这里的错误是由于我们在web.xml中配置SpringMVC的前端控制器DispatcherServlet时设置了缺省值<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>，这导致我们在访问所有资源时，如果没有对应Servlet，则其会交由前端控制器进行处理，而前端控制器寻找资源的依据是注解<code>@RequestMapping(&quot;/xxx&quot;)</code>中设置的资源路径，但很明显jQuery文件并没有配置该虚拟路径，所以导致前端控制器和网页无法访问到该资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置SpringMVC前端控制器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置映射地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因此我们需要开启某些资源的访问权限（一般情况下都为静态资源），所以在配置文件中加入对js文件夹下所有静态资源的访问权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启js文件夹下所有资源的访问权限,</span></span><br><span class="line"><span class="comment">mapping表示映射资源地址，location表示开放的目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<p>或者我们还可以进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>该配置表示访问资源时仍旧首先通过前端控制器进行访问，如果前端控制器不能匹配到对应的资源，则调用原始的容器进行静态资源的访问（而在此处原始的容器是Tomcat服务器，其本身具有访问静态资源的能力），所以可以解决静态资源不能被访问到的问题</p>
<p>PS：该配置必须写在spring-mvc的注解驱动配置下方才有效</p>
<h3 id="配置全局乱码过滤器"><a href="#配置全局乱码过滤器" class="headerlink" title="配置全局乱码过滤器"></a>配置全局乱码过滤器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局乱码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>解决获得参数中包含中文出现乱码的问题</p>
<h3 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h3><p>当请求的参数名称与Controller中业务方法的参数名称不一致时，就需要通过@RequestParam注解将两个参数名称进行显式的绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="meta">@RequestParam(&quot;user&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该注解包含三个参数，value表示请求参数的名称，required为布尔类型，表示请求时是否必须指定该参数，默认值为true，defaultValue表示没有请求该参数时，默认向业务方法的参数中传入的值</p>
]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>12-Request对象+Response对象</title>
    <url>/2021/03/03/12-Request%E5%AF%B9%E8%B1%A1+Response%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h1><h2 id="request对象和response对象原理"><a href="#request对象和response对象原理" class="headerlink" title="request对象和response对象原理"></a>request对象和response对象原理</h2><ul>
<li>request对象和response对象是由服务器创建的，供程序员使用的对象</li>
<li>request对象是来获取请求信息的，response对象是来设置响应消息的</li>
</ul>
<h3 id="浏览器-amp-服务器请求响应过程"><a href="#浏览器-amp-服务器请求响应过程" class="headerlink" title="浏览器&amp;服务器请求响应过程"></a>浏览器&amp;服务器请求响应过程</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%BF%87%E7%A8%8B.jpg" alt="浏览器服务器请求响应过程"></p>
<h2 id="Request功能"><a href="#Request功能" class="headerlink" title="Request功能"></a>Request功能</h2><h3 id="获取请求消息数据"><a href="#获取请求消息数据" class="headerlink" title="获取请求消息数据"></a>获取请求消息数据</h3><ol>
<li>获取请求行数据<ul>
<li>String getMethod():获取请求方式GET/POST</li>
<li>String　getContextPath():获取虚拟目录</li>
<li>String getServletPath():获取Servlet路径</li>
<li>String getQueryString():获取get方式的请求参数</li>
<li>String getRequestURI():获取请求URI（不包含协议和IP地址）</li>
<li>StringBuffer getRequestURL():获取请求URI（包含协议和IP地址）</li>
<li>String getProtocol():获取协议及版本</li>
<li>String getRemoteAddr():获取客户机IP地址</li>
</ul>
</li>
<li>获取请求头数据<ul>
<li>String getHeader(String headerName):通过请求头的名称获取请求头的值</li>
<li>Enumeration<String> getHeaders():获取所有请求头的名称（Enumeration<String>通过hasMoreElements方法判断是否结束，通过nextElement获取下一个请求头的名称）</li>
</ul>
</li>
<li>获取请求体数据<ul>
<li>只有POST请求方式，才有请求体</li>
<li>请求体的返回数据是流对象的格式，所以我们需要先获取流对象，再从流对象中获取请求体的数据，共有两种方式获取流对象<ul>
<li>BufferesReader getReader():获取字符输入流，只能操作字符数据</li>
<li>ServletInputStream getInputStream():获取字节输入流，可以操作所有类型的数据</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="获取请求行数据代码示例"><a href="#获取请求行数据代码示例" class="headerlink" title="获取请求行数据代码示例"></a>获取请求行数据代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - String getMethod():获取请求方式GET/POST</span></span><br><span class="line"><span class="comment"> * - String　getContextPath():获取虚拟目录</span></span><br><span class="line"><span class="comment"> * - String getServletPath():获取Servlet路径</span></span><br><span class="line"><span class="comment"> * - String getQueryString():获取get方式的请求参数</span></span><br><span class="line"><span class="comment"> * - String getRequestURI():获取请求URI（不包含协议和IP地址）</span></span><br><span class="line"><span class="comment"> * - StringBuffer getRequestURL():获取请求URI（包含协议和IP地址）</span></span><br><span class="line"><span class="comment"> * - String getProtocol():获取协议及版本</span></span><br><span class="line"><span class="comment"> * - String getRemoteAddr():获取客户机IP地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(value=&quot;/requestDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求方式：&quot;</span>+request.getMethod());</span><br><span class="line">        System.out.println(<span class="string">&quot;虚拟目录：&quot;</span>+request.getContextPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet路径：&quot;</span>+request.getServletPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;get方式的请求参数：&quot;</span>+request.getQueryString());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求URI：&quot;</span>+request.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;请求URL：&quot;</span>+request.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;协议及版本：&quot;</span>+request.getProtocol());</span><br><span class="line">        System.out.println(<span class="string">&quot;客户机IP地址：&quot;</span>+request.getRemoteAddr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">请求方式：GET</span></span><br><span class="line"><span class="comment">虚拟目录：/JavaWebTest2</span></span><br><span class="line"><span class="comment">Servlet路径：/requestDemo1</span></span><br><span class="line"><span class="comment">get方式的请求参数：username=renboyu010214</span></span><br><span class="line"><span class="comment">请求URI：/JavaWebTest2/requestDemo1</span></span><br><span class="line"><span class="comment">请求URL：http://localhost:8080/JavaWebTest2/requestDemo1</span></span><br><span class="line"><span class="comment">协议及版本：HTTP/1.1</span></span><br><span class="line"><span class="comment">客户机IP地址：0:0:0:0:0:0:0:1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="获取请求头数据代码示例"><a href="#获取请求头数据代码示例" class="headerlink" title="获取请求头数据代码示例"></a>获取请求头数据代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取所有请求头的名称request.getHeaderNames()</span></span><br><span class="line">        Enumeration&lt;String&gt; enumeration=request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (enumeration.hasMoreElements())&#123;</span><br><span class="line">            <span class="comment">//利用迭代器逐个获取请求头名称</span></span><br><span class="line">            String headerName=enumeration.nextElement();</span><br><span class="line">            <span class="comment">//利用请求头名称获取请求头的值request.getHeader(headerName)</span></span><br><span class="line">            String headerValue=request.getHeader(headerName);</span><br><span class="line">            <span class="comment">//输出结果</span></span><br><span class="line">            System.out.println(headerName+<span class="string">&quot; : &quot;</span>+headerValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：(有特殊字符*/不便放在注释中)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">host : localhost:<span class="number">8080</span></span><br><span class="line">connection : keep-alive</span><br><span class="line">upgrade-insecure-requests : <span class="number">1</span></span><br><span class="line">user-agent : Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">84.0</span><span class="number">.4147</span><span class="number">.89</span> Safari/<span class="number">537.36</span></span><br><span class="line">accept : text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,*<span class="comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="comment">sec-fetch-site : none</span></span><br><span class="line"><span class="comment">sec-fetch-mode : navigate</span></span><br><span class="line"><span class="comment">sec-fetch-user : ?1</span></span><br><span class="line"><span class="comment">sec-fetch-dest : document</span></span><br><span class="line"><span class="comment">accept-encoding : gzip, deflate, br</span></span><br><span class="line"><span class="comment">accept-language : zh-CN,zh;q=0.9,en;q=0.8,bo-CN;q=0.7,bo;q=0.6</span></span><br><span class="line"><span class="comment">cookie : JSESSIONID=B675242192B257B0274786E223DE5A0F; JSESSIONID=9C6F2A1D8D267CD4F8849D8D1158DDFF</span></span><br></pre></td></tr></table></figure>

<h4 id="获取请求体数据示例"><a href="#获取请求体数据示例" class="headerlink" title="获取请求体数据示例"></a>获取请求体数据示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取流对象</span></span><br><span class="line">        BufferedReader br=request.getReader();</span><br><span class="line">        String line=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//从流对象中逐行获取数据</span></span><br><span class="line">        <span class="keyword">while</span>((line=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line"><span class="comment">//username=renboyu010214&amp;password=123456</span></span><br></pre></td></tr></table></figure>



<h3 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h3><h4 id="1-通用的获取请求参数的方法"><a href="#1-通用的获取请求参数的方法" class="headerlink" title="1. 通用的获取请求参数的方法"></a>1. 通用的获取请求参数的方法</h4><p>以下四种方式不论是POST还是GET方式都可以获取到请求参数</p>
<ul>
<li>String getParameter(String name):根据参数名称获取参数值</li>
<li>String[] getParameterValues(String name):根据参数名称获取参数值的数组（因为可能出现一个名称对应多个值的情况）</li>
<li>Enumeration<String> getParameterNames():获取所有请求参数的名称</li>
<li>Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</li>
</ul>
<h5 id="中文乱码问题："><a href="#中文乱码问题：" class="headerlink" title="中文乱码问题："></a>中文乱码问题：</h5><p>当获取请求参数出现乱码时，只需要在获取参数前，提前设置编码请求参数的格式即可</p>
<h4 id="2-请求转发功能"><a href="#2-请求转发功能" class="headerlink" title="2. 请求转发功能"></a>2. 请求转发功能</h4><p>一种在服务器内部的资源跳转方式</p>
<h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol>
<li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象进行转发，利用其的forward(ServletRequest request ServletResponse response)方法</li>
</ol>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li>浏览器路径不发生变化</li>
<li>只能转发到当前服务器内部资源中</li>
<li>转发是一次请求</li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问RequestDemo5...&quot;</span>);</span><br><span class="line">        RequestDispatcher requestDispatcher=request.getRequestDispatcher(<span class="string">&quot;/requestDemo6&quot;</span>);</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">        <span class="comment">//一般情况下利用链式编程化简为一句即可：request.getRequestDispatcher(&quot;/requestDemo6&quot;).forward(request,response);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">访问RequestDemo5...</span></span><br><span class="line"><span class="comment">访问RequestDemo6...</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/requestDemo6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo6</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问RequestDemo6...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3. 共享数据"></a>3. 共享数据</h4><h5 id="域对象："><a href="#域对象：" class="headerlink" title="域对象："></a>域对象：</h5><p>一个有作用范围的对象，可以在范围内共享数据</p>
<h5 id="request域："><a href="#request域：" class="headerlink" title="request域："></a>request域：</h5><p>代表一次请求的范围，一般用于请求转发的多个资源中共享数据</p>
<h5 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h5><ul>
<li>void setAttribute(String name,Object obj):存储数据</li>
<li>Object getAttribute(String name):通过键获取值</li>
<li>void removeAttribute(String name):通过键移除键值对</li>
</ul>
<h4 id="4-获取ServletContext对象"><a href="#4-获取ServletContext对象" class="headerlink" title="4. 获取ServletContext对象"></a>4. 获取ServletContext对象</h4><ul>
<li>getServletContext()方法</li>
</ul>
<h2 id="BeanUtils工具类"><a href="#BeanUtils工具类" class="headerlink" title="BeanUtils工具类"></a>BeanUtils工具类</h2><p>用于简化数据的封装过程</p>
<h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><p>标准的Java类</p>
<h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ul>
<li>类必须被public修饰</li>
<li>必须提供空参的构造器</li>
<li>成员变量必须使用private修饰</li>
<li>提供公共的setter和getter方法</li>
</ul>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>封装数据</p>
<h3 id="提供的方法"><a href="#提供的方法" class="headerlink" title="提供的方法"></a>提供的方法</h3><ul>
<li>setProperty</li>
<li>getProperty</li>
<li>populate(Object obj,Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</li>
</ul>
<h1 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h1><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>设置响应消息（相应行，响应头，响应体）</p>
<h3 id="设置响应行"><a href="#设置响应行" class="headerlink" title="设置响应行"></a>设置响应行</h3><ul>
<li>格式：例如 HTTP/1.1 200 OK</li>
<li>设置状态码：setStatus(int sc)</li>
</ul>
<h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><ul>
<li>setHeader(String name,String Value)</li>
</ul>
<h3 id="设置响应体"><a href="#设置响应体" class="headerlink" title="设置响应体"></a>设置响应体</h3><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>获取输出流<ul>
<li>字符输出流：PrintWriter getWriter()</li>
<li>字节输出流：ServletOutputStream getOutputStream()</li>
</ul>
</li>
<li>使用输出流，将数据输出到客户端浏览器</li>
</ol>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><h3 id="1-重定向"><a href="#1-重定向" class="headerlink" title="1. 重定向"></a>1. 重定向</h3><p>资源跳转的一种方式</p>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li>重定向后地址栏发生变化</li>
<li>重定向可以访问其他站点（服务器）的资源</li>
<li>重定向是两次请求，不能使用request对象共享数据</li>
</ul>
<p><strong>常规重定向操作</strong></p>
<ol>
<li>设置状态码为302</li>
<li>设置location响应头，值为重定向资源路径<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//访问demo1资源会自动跳转到demo2资源</span></span><br><span class="line">        <span class="comment">//1. 设置状态码为302</span></span><br><span class="line">        response.setStatus(<span class="number">302</span>);</span><br><span class="line">        <span class="comment">//2. 设置location响应头，值为重定向资源路径</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;location&quot;</span>,<span class="string">&quot;/LoginTest/responseDemo2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>上述重定向操作中不难看出，状态码设为302是固定的，响应头的名称设为location也是固定的，唯一在重定向时会发生变化的就是跳转资源的路径，所以response对象将重定向进行了封装</p>
<p><strong>更简单的重定向操作</strong></p>
<ul>
<li>sendRedirect()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//访问demo1资源会自动跳转到demo2资源</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;/LoginTest/responseDemo2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-输出字符-字节数据"><a href="#2-输出字符-字节数据" class="headerlink" title="2. 输出字符/字节数据"></a>2. 输出字符/字节数据</h3><h4 id="输出字符-字节数据"><a href="#输出字符-字节数据" class="headerlink" title="输出字符/字节数据"></a>输出字符/字节数据</h4><ol>
<li>设置编码格式（防止中文乱码）</li>
<li>获取字符/字节输出流</li>
<li>输出数据</li>
</ol>
<h5 id="字符数据代码实现"><a href="#字符数据代码实现" class="headerlink" title="字符数据代码实现"></a>字符数据代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码格式(还可以通过直接设置响应头的ContentType来实现编码的设置,例如下面)</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取字符输出流</span></span><br><span class="line">        PrintWriter pw=response.getWriter();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        pw.write(<span class="string">&quot;你好！hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="字节数据代码实现"><a href="#字节数据代码实现" class="headerlink" title="字节数据代码实现"></a>字节数据代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/responseDemo3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//设置编码格式(还可以通过直接设置响应头的ContentType来实现编码的设置,例如下面)</span></span><br><span class="line">        <span class="comment">//response.setHeader(&quot;content-type&quot;,&quot;text/html;charset=utf-8&quot;);</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos=response.getOutputStream();</span><br><span class="line">        <span class="comment">//输出数据</span></span><br><span class="line">        sos.write(<span class="string">&quot;加油！good job!&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="路径写法"><a href="#路径写法" class="headerlink" title="路径写法"></a>路径写法</h1><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>通过相对路径不可以确定唯一资源，相对路径的写法：<code>./index.html</code></p>
<h3 id="相对路径的规则"><a href="#相对路径的规则" class="headerlink" title="相对路径的规则"></a>相对路径的规则</h3><ul>
<li>./表示当前目录</li>
<li>../表示上一级目录</li>
</ul>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>通过绝对路径可以确定唯一资源，但在书写时一般不写整个绝对路径的全部内容而是简化写法，例如：<a href="http://localhost/JavaWebTest/responseDemo1">http://localhost/JavaWebTest/responseDemo1</a> 可以简化为/JavaWebTest/responseDemo1</p>
<h3 id="绝对路径规则"><a href="#绝对路径规则" class="headerlink" title="绝对路径规则"></a>绝对路径规则</h3><ul>
<li>给客户端浏览器使用的路径需要加上虚拟目录，即格式为/JavaWebTest/responseDemo1（例如超链接标签<a>，重定向等等）</li>
<li>给服务器端使用的路径不需要加上虚拟路径，即格式为/responseDemo1（例如转发）</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>12-File类</title>
    <url>/2021/03/03/12-File%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="File类概述"><a href="#File类概述" class="headerlink" title="File类概述"></a>File类概述</h1><p><strong>File类代表操作系统的文件对象</strong>，是用来操作操作系统中的文件对象的，例如：删除文件，获取文件信息，创建文件/文件夹。广义来说，操作系统认为文件已经包含了文件和文件夹的概念</p>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public File(String pathname):根据路径获取文件对象</li>
<li>public File(String parent,String child):根据父路径和文件名称获取文件对象</li>
<li>public File(File parent,String child):根据父类文件对象和子类文件名称获取子类文件对象</li>
</ul>
<p>这里的路径也是分为<strong>绝对路径和相对路径</strong>，Java默认的相对路径是<strong>相对工程目录下的文件路径</strong>。二者比较而言，绝对路径一旦脱离具体依赖的环境，代码就极可能出错。相对路径在脱离所处的环境后一般还是可以正常执行，但相对路径只能用于寻找该工程下的文件，有一定的局限性。<strong>一般为了跨平台操作，主要采用相对路径</strong></p>
<h3 id="文件路径分隔符"><a href="#文件路径分隔符" class="headerlink" title="文件路径分隔符"></a>文件路径分隔符</h3><ol>
<li>可以使用正斜杠“/”</li>
<li>使用反斜杠（需要转义）“\\”</li>
<li>使用分隔符API：File.separator</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1：使用正斜杠</span></span><br><span class="line">File f1=<span class="keyword">new</span> File(<span class="string">&quot;D:/photo/未压缩图片&quot;</span>);</span><br><span class="line"><span class="comment">//方式2：使用反斜杠并转义</span></span><br><span class="line">File f2=<span class="keyword">new</span> File(<span class="string">&quot;D:\\photo\\未压缩图片&quot;</span>);</span><br><span class="line"><span class="comment">//方式3：使用File的分隔符API</span></span><br><span class="line">File f3=<span class="keyword">new</span> File(<span class="string">&quot;D:&quot;</span>+File.separator+<span class="string">&quot;photo&quot;</span>+File.separator+<span class="string">&quot;未压缩图片&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>三种写法含义一样，第三种方法直接采用系统分隔符替换该处内容，目的是防止某些系统采取的分隔符不是斜杠进而导致路径报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;D:/photo/未压缩图片/theme.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//直接获取文件大小（字节数大小）</span></span><br><span class="line">        System.out.println(f1.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//使用相对路径定位工程中文件</span></span><br><span class="line">        File f2=<span class="keyword">new</span> File(<span class="string">&quot;src/FileDemo/text.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件对象，代表文件夹</span></span><br><span class="line">        File f3=<span class="keyword">new</span> File(<span class="string">&quot;src/FileDemo&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接获取文件夹的大小，最后返回的结果不是文件夹内文件大小，而是文件夹本身的大小或0</span></span><br><span class="line">        System.out.println(f3.length()+<span class="string">&quot; byte&quot;</span>);</span><br><span class="line">        <span class="comment">//判断文件是否存在</span></span><br><span class="line">        System.out.println(f3.exists());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">897788</span> <span class="keyword">byte</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">byte</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">byte</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h1 id="File类的获取功能"><a href="#File类的获取功能" class="headerlink" title="File类的获取功能"></a>File类的获取功能</h1><ul>
<li>public String getAbsolutePath() : 返回此文件的绝对路径字符串</li>
<li>public String getPath() : 获取创建文件对象的时候用的路径</li>
<li>public String getName() : 返回由此File表示的文件或目录名称</li>
<li>public long length : 返回由此File表示的文件长度</li>
</ul>
<h1 id="File类的判断功能"><a href="#File类的判断功能" class="headerlink" title="File类的判断功能"></a>File类的判断功能</h1><ul>
<li>public boolean exists() : 此File表示的文件或目录是否实际存在</li>
<li>public boolean isDirectory() : 此File表示的是否为目录</li>
<li>public boolean isFile() : 此File表示的是否为文件</li>
</ul>
<h1 id="File类的创建和删除方法"><a href="#File类的创建和删除方法" class="headerlink" title="File类的创建和删除方法"></a>File类的创建和删除方法</h1><ul>
<li>public boolean createNewFile() : 当且仅当具有该名称的文件尚不存在时，创建一个新文件（几乎不用）</li>
<li>public boolean delete() : 删除由此File表示的文件或目录（目录只能删除空目录）</li>
<li>public boolean mkdir() : 创建由此File表示的目录（只能创建一级目录）</li>
<li>public boolean mkdirs() : 可以创建多级目录（常用）</li>
</ul>
<h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><ul>
<li>public String[] list() : 获取当前目录下所有“一级文件名称”到一个字符串数组中返回</li>
<li>public File[] listFiles() : 获取当前目录下所有“一级文件对象”到一个对象数组中返回，<strong>直接返回对象</strong>这种方式更常见，并且更具可操作性，一般都采用这种遍历方式</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>13-递归</title>
    <url>/2021/03/03/13-%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="递归概念"><a href="#递归概念" class="headerlink" title="递归概念"></a>递归概念</h1><h4 id="递归指方法在方法中又调用自己"><a href="#递归指方法在方法中又调用自己" class="headerlink" title="递归指方法在方法中又调用自己"></a>递归指方法在方法中又调用自己</h4><h2 id="递归形式"><a href="#递归形式" class="headerlink" title="递归形式"></a>递归形式</h2><h3 id="直接递归"><a href="#直接递归" class="headerlink" title="直接递归"></a>直接递归</h3><p>自己的放大中调用自己</p>
<h3 id="间接递归"><a href="#间接递归" class="headerlink" title="间接递归"></a>间接递归</h3><p>A方法调用B方法，B方法又调用A方法</p>
<h1 id="递归三要素"><a href="#递归三要素" class="headerlink" title="递归三要素"></a>递归三要素</h1><h3 id="1-一定有终止条件"><a href="#1-一定有终止条件" class="headerlink" title="1. 一定有终止条件"></a>1. 一定有终止条件</h3><h3 id="2-递归的规则-公式"><a href="#2-递归的规则-公式" class="headerlink" title="2. 递归的规则/公式"></a>2. 递归的规则/公式</h3><h3 id="3-递归的方向：必然走向终止条件"><a href="#3-递归的方向：必然走向终止条件" class="headerlink" title="3. 递归的方向：必然走向终止条件"></a>3. 递归的方向：必然走向终止条件</h3><h1 id="递归搜索文件"><a href="#递归搜索文件" class="headerlink" title="递归搜索文件"></a>递归搜索文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findFile</span><span class="params">(File f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(f.isFile())&#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件夹----------------------&quot;</span>+f.getName()+<span class="string">&quot;----------------------文件夹&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(File f1:f.listFiles())&#123;</span><br><span class="line">                findFile(f1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\renboyu010214\\Desktop\\Python&quot;</span>);</span><br><span class="line">        FileDemo1 fd=<span class="keyword">new</span> FileDemo1();</span><br><span class="line">        fd.findFile(f1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>13-ServletContext</title>
    <url>/2021/03/03/13-ServletContext/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>代表整个web应用，可以和程序的容器进行通信</p>
<h3 id="ServletContext对象的获取"><a href="#ServletContext对象的获取" class="headerlink" title="ServletContext对象的获取"></a>ServletContext对象的获取</h3><ul>
<li>通过request对象获取：getServletContext()</li>
<li>通过HttpServlet获取：getServletContext()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/servletContextDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//通过request直接获取</span></span><br><span class="line">        ServletContext sc1=request.getServletContext();</span><br><span class="line">        <span class="comment">//通过HttpServlet获取</span></span><br><span class="line">        ServletContext sc2=<span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(sc1==sc2); <span class="comment">//true</span></span><br><span class="line">        System.out.println(sc1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="1-获取MIME类型"><a href="#1-获取MIME类型" class="headerlink" title="1. 获取MIME类型"></a>1. 获取MIME类型</h3><h4 id="MIME类型概念"><a href="#MIME类型概念" class="headerlink" title="MIME类型概念"></a>MIME类型概念</h4><p>在互联网通信过程中定义的一种文件数据类型，HTTP协议也遵循这种数据类型</p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><p>大类型/小类型，例如：</p>
<ul>
<li>text/html</li>
<li>image/jpeg</li>
</ul>
<h4 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h4><ul>
<li>getMimeType(String filename)</li>
</ul>
<h3 id="2-作为域对象-共享数据"><a href="#2-作为域对象-共享数据" class="headerlink" title="2. 作为域对象-共享数据"></a>2. 作为域对象-共享数据</h3><ul>
<li>setAttribute(String name,Object value)</li>
<li>getAttribute(String name)</li>
<li>removeAttribute(String name)</li>
</ul>
<h4 id="ServletContext对象的范围"><a href="#ServletContext对象的范围" class="headerlink" title="ServletContext对象的范围"></a>ServletContext对象的范围</h4><p>所有用户所有请求的数据</p>
<h3 id="3-获取文件的真实（服务器）路径"><a href="#3-获取文件的真实（服务器）路径" class="headerlink" title="3. 获取文件的真实（服务器）路径"></a>3. 获取文件的真实（服务器）路径</h3><p>这里获取的真实路径是指在程序运行在Tomcat服务器上时的文件路径，而不是指我们当前工作空间的真实路径</p>
<p>我们传入的路径是以web文件夹为基准的相对路径，这里需要注意，如果要获取与web文件夹同级的src文件夹中的文件，有两种方式，一种是采用类加载器的方式，局限性较大，另一种方式是当程序运行在Tomcat服务器上时，src中的内容会被放置在web文件夹下的WEB-INF文件夹中的classes文件夹中，可以通过这种相对关系来获取</p>
<h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ul>
<li>String getRealPath(String path)</li>
</ul>
<h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><ul>
<li>获取web文件夹下的文件：getRealPath(“/a.txt”)</li>
<li>获取WEB-INF文件夹下的文件：getRealPath(“/WEB-INF/b.txt”)</li>
<li>获取src文件夹下的文件：getRealPath(“/WEB-INF/classes/c.txt”)</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>15-会话技术与Cookie</title>
    <url>/2021/03/03/15-%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B8%8Ecookie/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>一次会话中包含多次请求和相应，浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止，会话结束</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>再一次会话范围内的多次请求间共享数据</p>
<h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul>
<li>客户端会话技术：Cookie</li>
<li>服务器端会话技术：Session</li>
</ul>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>客户端会话技术，将数据保存到客户端</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤:"></a>主要步骤:</h3><ol>
<li>创建Cookie对象，绑定数据<ul>
<li>new Cookie(String name,String value)</li>
</ul>
</li>
<li>发送Cookie对象<ul>
<li>response.addCookie(Cookie cookie)</li>
</ul>
</li>
<li>获取Cookie对象，拿到数据(getCookies方法获取全部Cookie并返回数组)<ul>
<li>request.getCookies()</li>
</ul>
</li>
</ol>
<h4 id="创建Cookie与发送"><a href="#创建Cookie与发送" class="headerlink" title="创建Cookie与发送"></a>创建Cookie与发送</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/CookieServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建Cookie对象</span></span><br><span class="line">        Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line">        <span class="comment">//发送Cookie</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接收Cookie"><a href="#接收Cookie" class="headerlink" title="接收Cookie"></a>接收Cookie</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/CookieServlet2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        Cookie[] cookies=request.getCookies();</span><br><span class="line">        <span class="comment">//遍历Cookies 获取Cookie值</span></span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie:cookies)&#123;</span><br><span class="line">                String name=cookie.getName();</span><br><span class="line">                String value=cookie.getValue();</span><br><span class="line">                System.out.println(name+<span class="string">&quot; : &quot;</span>+value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Cookie的发送是通过在客户端发送请求到服务器端的过程后，浏览器端在返回response时向响应头中添加set-cookie:name=value实现。Cookie的接收是通过客户端在向服务器端发送请求前向请求头中添加cookie:name=value来实现的。两个实现原理均是在遵循HTML协议的前提下所实现</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>一次可以发送多个Cookie</li>
<li>cookie在浏览器中默认情况下在浏览器关闭后被销毁（保存在浏览器内存而不是本地）</li>
<li>在发送cookie时可以进行持久化存储的操作，保证在一段时间内，无论浏览器是否关闭，cookie都有效（保存在本地文件中）<ul>
<li>Cookie.setMaxAge(int seconds)</li>
<li>传入正数表示保存到秒数</li>
<li>传入0表示删除本地对应cookie信息</li>
<li>传入负数表示在浏览器关闭后销毁cookie</li>
</ul>
</li>
<li>Tomcat8之前不能存储中文cookie，Tomcat8之后可以存储中文cookie</li>
<li>默认情况下，同一个Tomcat服务器部署的不同web项目之间的cookie是不能进行共享的。cookie共享范围，默认情况下为当前虚拟目录。可以通过setPath(String path)修改默认共享范围</li>
<li>在不同Tomcat服务器部署的web项目中cookie也是可以设置共享的，利用setDomain(String path):如果设置的一级域名相同，那么多个服务器之间的cookie可以共享（例如：setDomain(“.baidu.com”)可以保证百度贴吧和百度体育之间的cookie共享）</li>
</ol>
<h3 id="Cookie特点与作用"><a href="#Cookie特点与作用" class="headerlink" title="Cookie特点与作用"></a>Cookie特点与作用</h3><ol>
<li>数据存储在客户端浏览器</li>
<li>浏览器对于cookie的大小以及同域名下cookie的数量都有限制</li>
<li>一般用来存储不太敏感的信息（例如在不登录的情况下，完成服务器对客户端身份的识别）</li>
</ol>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie.jpg" alt="cookie"></p>
<h3 id="Cookie简单应用"><a href="#Cookie简单应用" class="headerlink" title="Cookie简单应用"></a>Cookie简单应用</h3><p>判断用户是否为初次访问当前页面，如果是则告知用户初次访问，如果不是，则显示用户上一次访问页面的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.Cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/CookieDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取所有cookie</span></span><br><span class="line">        Cookie[] cookies=request.getCookies();</span><br><span class="line">        <span class="comment">//是否找到lastTime的cookie</span></span><br><span class="line">        <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//遍历cookie列表判断是否访问过该网页</span></span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span>&amp;&amp;cookies.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//判断是否存在lastTime的cookie</span></span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;lastTime&quot;</span>)) &#123;</span><br><span class="line">                    <span class="comment">//存在该cookie表示之前访问过</span></span><br><span class="line">                    <span class="comment">//获取上次访问时间</span></span><br><span class="line">                    String t1=cookie.getValue();</span><br><span class="line">                    <span class="comment">//打印上次访问时间</span></span><br><span class="line">                    response.getWriter().write(<span class="string">&quot;&lt;h1&gt;欢迎再次访问，您上次访问时间是：&quot;</span>+t1+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">                    <span class="comment">//获取当前时间</span></span><br><span class="line">                    Date date=<span class="keyword">new</span> Date();</span><br><span class="line">                    <span class="comment">//格式化时间数据</span></span><br><span class="line">                    SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">                    String t2=sdf.format(date);</span><br><span class="line">                    <span class="comment">//重新传值并传回response中</span></span><br><span class="line">                    cookie.setValue(t2);</span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line">                    <span class="comment">//修改flag值</span></span><br><span class="line">                    flag=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//未找到lastTime的cookie表示初次访问</span></span><br><span class="line">        <span class="keyword">if</span>(!flag||cookies==<span class="keyword">null</span>||cookies.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//获取当前时间</span></span><br><span class="line">            Date date=<span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf=<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">            String t=sdf.format(date);</span><br><span class="line">            <span class="comment">//创建cookie并传入response中</span></span><br><span class="line">            Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;lastTime&quot;</span>,t);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">            <span class="comment">//页面显示初次内容</span></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;欢迎初次访问！&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie1.jpg" alt="cookie1"><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/cookie2.jpg" alt="cookie2"></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>14-下载案例</title>
    <url>/2021/03/03/14-%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="下载案例"><a href="#下载案例" class="headerlink" title="下载案例"></a>下载案例</h1><h2 id="HTML文件"><a href="#HTML文件" class="headerlink" title="HTML文件"></a>HTML文件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义超链接跳转到对应的Servlet并且携带文件名参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=1.jpg&quot;</span>&gt;</span>点击下载图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=2.jpg&quot;</span>&gt;</span>点击下载图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/DownloadTest/downloadServlet?filename=3.jpg&quot;</span>&gt;</span>点击下载图片3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/downloadServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取请求参数（即文件名称）</span></span><br><span class="line">        String filename=request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1 获取文件真实路径</span></span><br><span class="line">        String path=<span class="keyword">this</span>.getServletContext().getRealPath(<span class="string">&quot;/img/&quot;</span>+filename);  <span class="comment">//通过ServletContext对象获取真实路径</span></span><br><span class="line">        <span class="comment">//2.2 加载进内存</span></span><br><span class="line">        FileInputStream fis=<span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="comment">//3. 设置响应头数据</span></span><br><span class="line">        <span class="comment">//3.1 设置content-type(需要利用ServletContext获取文件的MIME类型)</span></span><br><span class="line">        String mimeType=<span class="keyword">this</span>.getServletContext().getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">&quot;content-type&quot;</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2 设置content-disposition(文件的打开方式，以附件形式打开。filename属性表示保存文件的名称)</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;content-disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+filename);</span><br><span class="line">        <span class="comment">//4. 将文件内容（输入流）写入输出流中</span></span><br><span class="line">        ServletOutputStream sos=response.getOutputStream();</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>16-JSP基础</title>
    <url>/2021/03/03/16-JSP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Java Server Pages:Java服务器端页面，在该页面中既可以定义Java代码，也可以定义html标签，主要用于简化书写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;测试用例&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;%System.out.println(&quot;hello JSP!&quot;);%&gt;</span><br><span class="line">    &lt;p&gt;hi JSP!&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><strong>JSP本质上还是Java中的Servlet，因为只有Servlet能够提供文件访问</strong></p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/index_jsp.jpg" alt="index_jsp"></p>
<h3 id="JSP脚本"><a href="#JSP脚本" class="headerlink" title="JSP脚本"></a>JSP脚本</h3><p>JSP中共有三种定义Java代码的方法，每种定义方法均有不同作用，经过编译并形成最终的.class文件时自动生成的位置也不相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;定义的Java代码，在service方法中生成</span><br><span class="line">&#x2F;&#x2F;service方法中可以定义什么，这种方法就可以写什么</span><br><span class="line">&lt;% code %&gt;</span><br><span class="line">&lt;% System.out.println(&quot;hello&quot;); %&gt; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义的Java方法，在JSP转换后的成员位置</span><br><span class="line">&#x2F;&#x2F;可以定义成员变量或成员方法</span><br><span class="line">&lt;%! code %&gt;</span><br><span class="line">&lt;%! int num&#x3D;100; %&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义的Java代码，会输出到页面上</span><br><span class="line">&#x2F;&#x2F;输出语句可以定义什么,代码就可以定义什么</span><br><span class="line">&lt;%&#x3D; code %&gt;</span><br><span class="line">&lt;%&#x3D; &quot;hello&quot; %&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>在JSP页面中，不需要获取和创建就可以直接使用的对象。JSP中共有9个内置对象（request,response,out…）</p>
<p>其中的out对象本质是字符输出流对象，其作用类似于response.getWriter()主要用于将字符输出到页面</p>
<p>out.write()和response.getWriter().write()的作用还是存在细微差距，由于二者缓冲区不一致，在Tomcat服务器中，始终会首先访问response的缓冲区再访问out缓冲区，所以导致response的输出始终先于out输出，无论二者在代码中的位置，所以一般情况下，都会统一采用一种输出方式</p>
<h2 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h2><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于配置JSP页面，导入资源文件</p>
<h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ 指令名 属性名1&#x3D;属性值1 属性名2&#x3D;属性值2 ... %&gt;</span><br></pre></td></tr></table></figure>

<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li>page:配置JSP页面</li>
<li>include:页面包含的，导入页面的资源文件</li>
<li>taglib:导入资源</li>
</ul>
<h4 id="page指令常用属性"><a href="#page指令常用属性" class="headerlink" title="page指令常用属性"></a>page指令常用属性</h4><ul>
<li>contentType:作用等同于response.setContentType(),作用为设置响应体的MIME类型和字符集以及设置当前JSP页面编码</li>
<li>import:用于导入相应包</li>
<li>errorPage:表示当前页面发生异常后，会自动跳转到指定的页面</li>
<li>isErrorPage:用于标识当前页面是否为异常跳转页面，如果是，则该页面可以通过内置对象exception获取跳转来的页面的报错信息</li>
</ul>
<p><strong>可能发生报错的页面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; errorPage&#x3D;&quot;JspDemo2.jsp&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;% int i&#x3D;3&#x2F;0; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>响应报错的页面</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; isErrorPage&#x3D;&quot;true&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    网页错误！错误原因：</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;% String e&#x3D;exception.getMessage(); %&gt;</span><br><span class="line">&lt;% out.write(e); %&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP注释方法"><a href="#JSP注释方法" class="headerlink" title="JSP注释方法"></a>JSP注释方法</h4><ol>
<li>HTML注释：<!-- --> 只能注释HTML内容</li>
<li>JSP注释：&lt;%– –%&gt; Java代码与HTML标签都可以注释</li>
</ol>
<h2 id="JSP中的9个内置对象"><a href="#JSP中的9个内置对象" class="headerlink" title="JSP中的9个内置对象"></a>JSP中的9个内置对象</h2><table>
<thead>
<tr>
<th>变量名</th>
<th>真实类型</th>
<th>主要作用</th>
</tr>
</thead>
<tbody><tr>
<td>pageContext</td>
<td>PageContext</td>
<td>当前页面内共享数据，还可以获取其他八个内置对象</td>
</tr>
<tr>
<td>request</td>
<td>HttpServletRequest</td>
<td>一次请求访问多个资源</td>
</tr>
<tr>
<td>response</td>
<td>HttpServletResponse</td>
<td>响应对象</td>
</tr>
<tr>
<td>session</td>
<td>HttpSession</td>
<td>一次会话的多个请求间</td>
</tr>
<tr>
<td>application</td>
<td>ServletContext</td>
<td>所有用户间共享数据</td>
</tr>
<tr>
<td>page</td>
<td>Object</td>
<td>当前页面（Servlet）的对象，this</td>
</tr>
<tr>
<td>out</td>
<td>JspWriter</td>
<td>输出对象，将内容输出到页面上</td>
</tr>
<tr>
<td>config</td>
<td>ServletConfig</td>
<td>Servlet配置对象</td>
</tr>
<tr>
<td>exception</td>
<td>Throwable</td>
<td>异常对象</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>15-初始化和清理</title>
    <url>/2021/03/03/15-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初始化和清理"><a href="#初始化和清理" class="headerlink" title="初始化和清理"></a>初始化和清理</h1><p>初始化和清理是涉及编程安全的两个重要问题，在C语言中一直采取由程序员直接控制变量的初始化和清理，极易导致内存耗尽等问题出现</p>
<p>C++和Java采用了构造器（构造方法）的概念来进行对象的创建，创建对象时，如果该类提供有构造方法，Java会在用户有能力操作对象前调用构造器，完成对类中每个对象的初始化</p>
<h3 id="构造器与类同名的原因"><a href="#构造器与类同名的原因" class="headerlink" title="构造器与类同名的原因"></a>构造器与类同名的原因</h3><ol>
<li>调用构造器是编译器的任务，所以编译器必须清楚要调用哪个方法，这就要求所有类的构造器必须具有相同的方法名</li>
<li>所取的任何名字都可能与类中原有的方法名重复，产生冲突，为了避免这种情况，统一采用构造器与类同名这种方案</li>
</ol>
<p>构造器没有返回值，这与返回值为空null（void）具有很大区别，构造器本质上不会返回任何东西，我们在创建对象时<code>Object object=new Object();</code>看似是构造方法返回了一个新对象，实质是new表达式返回了该对象的引用（虽然与该对象完全一致）。</p>
<p>因为有了构造器的存在，所以强制重载方法名就显得十分重要，这也是Java支持强制重载方法名的重要原因。区分重载方法的唯一规则是不同的参数列表（即便只是顺序不同），而返回值并不可以作为区分重载方法的规则，因为很多时候我们并不关心返回值，而是为了实现方法内的功能，这样就会出现这种单纯的调用<code>func();</code>这种情况下，Java便无法区分两个返回值不同的重载方法的区别了</p>
<h3 id="我们为什么可以使用this关键字"><a href="#我们为什么可以使用this关键字" class="headerlink" title="我们为什么可以使用this关键字"></a>我们为什么可以使用this关键字</h3><p>在构造器或其他类方法中，我们常常通过this关键字来区分类中的变量或方法与传入的变量或方法。但我们在调用构造函数时，对象本身并不在参数列表中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple apple=<span class="keyword">new</span> Apple(<span class="keyword">int</span> num);</span><br><span class="line">apple.pick(<span class="keyword">int</span> n);</span><br></pre></td></tr></table></figure>
<p>那么Java是如何区分对象的？实质上我们在调用构造函数后编译器会对上述调用语句进行修改，最终的结果是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Apple.pick(apple,n);</span><br></pre></td></tr></table></figure>
<p>变量被作为第一个参数被默认传入方法中，这也就给了我们利用this关键字来区分对象的能力 </p>
<h3 id="在构造器中调用另一个构造器"><a href="#在构造器中调用另一个构造器" class="headerlink" title="在构造器中调用另一个构造器"></a>在构造器中调用另一个构造器</h3><p>当我们有多个不同参数列表的构造器后，在一个构造器中调用另一个构造器可以有效的避免代码重复，实现这种调用的方式就是通过this关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is the default constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num, String name, <span class="keyword">double</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(num);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is the rewrite constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test=<span class="keyword">new</span> Test(<span class="number">5</span>,<span class="string">&quot;Leslie&quot;</span>,<span class="number">90.0</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+test.name+<span class="string">&quot;,num=&quot;</span>+test.num+<span class="string">&quot;,weight=&quot;</span>+test.weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span> is the <span class="keyword">default</span> constructor</span><br><span class="line"><span class="keyword">this</span> is the rewrite constructor</span><br><span class="line">name=Leslie,num=<span class="number">5</span>,weight=<span class="number">90.0</span></span><br></pre></td></tr></table></figure>

<p>除构造器外，编译器禁止在其他任何方法中调用构造器</p>
<h3 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h3><p>静态方法就是没有this的方法，在static内部不能调用非静态的方法，反之可以。静态方法可以在没有创建对象的情况下，直接通过类本身来调用，这恰恰是静态方法的主要作用。这使得static方法更类似于一个全局变量，当你在类中置入static方法就可以访问其他static方法或static域</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>17-Session</title>
    <url>/2021/03/03/17-Session/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>服务器端会话技术，再一次对话的多次请求间共享数据，数据存储在服务器端的对象中（HttpSession）</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><ol>
<li>获取HttpSession对象 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpSession session=request.getSession();</span><br></pre></td></tr></table></figure></li>
<li>使用HttpSession对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">Object msg=session.getAttribute(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line"><span class="comment">//移除数据</span></span><br><span class="line">session.removeAttribute(<span class="string">&quot;msg&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li>
</ol>
<p><strong>Session的实现依赖于Cookie</strong>，在一次会话中，第一次请求Session的过程中，服务器端会创建一个Cookie对象，用来存储该Session的ID，并写入响应头返回到客户端，在客户端下次访问时，服务器端检测到该Cookie并读取Session的ID，就能够在浏览器端找到该Session并返回客户端</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>客户端关闭后，服务器端不关闭的情况下，两次获取的Session默认情况下不是同一个，也就不能共享数据（这是因为客户端关闭，代表一次会话结束，同时携带JSESSIONID的cookie也被销毁，所以Session失效）</li>
<li>通过创建一个同名Cookie并设置Cookie的持久化处理，可以解决上面的问题<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Session</span></span><br><span class="line">HttpSession session=request.getSession();</span><br><span class="line"><span class="comment">//创建JSESSIONID的Cookie 设置最大存活时间</span></span><br><span class="line">Cookie cookie=<span class="keyword">new</span> Cookie(<span class="string">&quot;JSESSIONID&quot;</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line"><span class="comment">//存储数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello_world&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>服务器端关闭的情况下，两次获取的Session对象不是同一个，但要保证数据不丢失，所以服务器端会进行Session的钝化与活化<ul>
<li>Session的钝化：在服务器正常关闭之前，将服务器上的Session对象序列化到硬盘中</li>
<li>Session的活化：在服务器启动后，将硬盘中的Session文件转化为内存中的Session对象</li>
</ul>
</li>
<li>Session被销毁的情况<ul>
<li>服务器关闭</li>
<li>session对象调用invalidate方法</li>
<li>session默认失效时间30min</li>
</ul>
</li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>session用于存储一次会话的多次请求的数据，存储在服务器端</li>
<li>session可以存储任意类型，任意大小的数据</li>
</ol>
<h3 id="Session与Cookie的区别"><a href="#Session与Cookie的区别" class="headerlink" title="Session与Cookie的区别"></a>Session与Cookie的区别</h3><ol>
<li>Session存储数据在服务器端，Cookie在客户端</li>
<li>Session对存储数据的类型和大小没有限制，Cookie有限制</li>
<li>Session更安全，Cookie相对而言不安全</li>
</ol>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>19-Filter过滤器</title>
    <url>/2021/03/03/19-Filter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>当访问服务器资源时，过滤器可以将请求提前拦截下来，完成一些特殊的操作。一般用于完成通用操作（检查是否登录，统一编码处理，敏感词汇处理等…）</p>
<h4 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h4><ol>
<li>定义类，实现Filter接口</li>
<li>复写方法</li>
<li>配置拦截路径（1. 通过web.xml 2. 通过注解@WebFilter）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/index.jsp&quot;)</span>  <span class="comment">//配置拦截路径，访问index.jsp前会进行过滤（&quot;/*&quot;表示访问所有资源前均过滤）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务器启动后，会调用init方法，创建Filter对象，只执行一次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在每一次请求被拦截的资源时执行，执行多次</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//对请求request进行特殊操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;对request进行操作...&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        <span class="comment">//对响应response进行操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;对response进行操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在服务器关闭时销毁Filter对象，在服务器正常关闭的情况下执行，只执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>第二种配置方法：通过web.xml(url-pattern处写拦截路径)</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.ywrby.Filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterDemo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="过滤器执行流程"><a href="#过滤器执行流程" class="headerlink" title="过滤器执行流程"></a>过滤器执行流程</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/filter.jpg" alt="filter"><br>一次请求会两次经过Filter，request和response都会经由过滤器处理。在执行放行流程filterChain.doFilter(servletRequest,servletResponse)之前，一般对request进行特殊操作，在执行放行流程之后，一般对响应response进行操作</p>
<h3 id="拦截路径配置的四种写法"><a href="#拦截路径配置的四种写法" class="headerlink" title="拦截路径配置的四种写法"></a>拦截路径配置的四种写法</h3><ol>
<li>具体资源路径：”/index.jsp” 只有访问具体路径资源时，才会调用过滤器</li>
<li>拦截目录：”/user/*” 访问user目录下所有资源时，都会调用过滤器</li>
<li>后缀名拦截：”*.jsp” 注意这种写法没有“/”,访问所有后缀名为.jsp的资源时都会调用过滤器</li>
<li>拦截所有资源：”/*” 访问所有资源都会调用过滤器</li>
</ol>
<h3 id="拦截方式配置"><a href="#拦截方式配置" class="headerlink" title="拦截方式配置"></a>拦截方式配置</h3><p>拦截方式是指资源被访问的方式</p>
<h4 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h4><p>通过设置dispatcherTypes属性</p>
<ul>
<li>REQUEST：默认值，浏览器直接请求资源</li>
<li>FORWORD：转发访问资源</li>
<li>INCLUDE：包含访问资源</li>
<li>ERROR：错误跳转资源</li>
<li>ASYNC：异步访问资源</li>
</ul>
<p>例如我们设置dispatcherTypes属性值为FORWARD则表示只有通过转发访问资源的方式才能够通过过滤器</p>
<p>我们将dispatcherTypes属性值设为REQUEST</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dispatcherTypes = DispatcherType.REQUEST 表示浏览器直接请求资源时，该过滤器会被执行</span></span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/index.jsp&quot;,dispatcherTypes = DispatcherType.REQUEST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo2</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;FilterDemo2正常执行...&quot;</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TextDemo1可以转发访问index.jsp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/TextDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TextDemo1正常执行...&quot;</span>);</span><br><span class="line">        <span class="comment">//转发到index.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/index.jsp&quot;</span>).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index.jsp被访问时在控制台输出内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试用例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;%System.out.println(&quot;index.jsp执行...&quot;);%&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>hi JSP!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当直接访问index.jsp时，过滤器正常执行</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE.jpg" alt="直接访问"></p>
<p>当通过TextDemo1转发访问index.jsp时，过滤器没有被调用</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%BD%AC%E5%8F%91%E8%AE%BF%E9%97%AE.jpg" alt="转发访问"></p>
<h4 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h4><p>通过web.xml中的dispatcher标签也可以定义拦截方式</p>
<h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>要注意过滤器链的执行顺序<br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%8B%A6%E6%88%AA%E5%99%A8%E9%93%BE.jpg" alt="拦截器链"></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>18-MVC开发模式</title>
    <url>/2021/03/03/18-MVC%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MVC开发模式"><a href="#MVC开发模式" class="headerlink" title="MVC开发模式"></a>MVC开发模式</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>经典MVC（Model View Controller）模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。其中，View的定义比较清晰，就是用户界面。</p>
<h3 id="M（Model）"><a href="#M（Model）" class="headerlink" title="M（Model）"></a>M（Model）</h3><p>模型，主要通过JavaBean实现。完成具体的业务操作（例如数据库的增删改查，对象的封装）</p>
<h3 id="V（View）"><a href="#V（View）" class="headerlink" title="V（View）"></a>V（View）</h3><p>视图，主要通过JSP实现。用于展示数据</p>
<h3 id="C（Controller）"><a href="#C（Controller）" class="headerlink" title="C（Controller）"></a>C（Controller）</h3><p>控制器，主要通过Servlet实现。用于获取用户输入，调用模型，以及将数据交给视图进行展示</p>
<h3 id="MVC优点"><a href="#MVC优点" class="headerlink" title="MVC优点"></a>MVC优点</h3><ul>
<li>耦合性低，方便维护，利于分工协作</li>
<li>代码重用性高</li>
</ul>
<h3 id="MVC缺点"><a href="#MVC缺点" class="headerlink" title="MVC缺点"></a>MVC缺点</h3><ul>
<li>项目架构复杂，对操作人员要求提高</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>2-BOM</title>
    <url>/2021/03/03/2-BOM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BOM-Browser-Object-Model"><a href="#BOM-Browser-Object-Model" class="headerlink" title="BOM(Browser Object Model)"></a>BOM(Browser Object Model)</h1><h4 id="浏览器对象模型"><a href="#浏览器对象模型" class="headerlink" title="浏览器对象模型"></a>浏览器对象模型</h4><hr>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将浏览器各个组成部分封装成对象</p>
<h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul>
<li>Window：窗口对象</li>
<li>Navigator：浏览器对象</li>
<li>Screen：显示器屏幕对象</li>
<li>History：历史记录对象</li>
<li>Location：地址栏对象</li>
</ul>
<p>(DOM对象因为十分重要被单独分类)</p>
<h4 id="BOM对象组成"><a href="#BOM对象组成" class="headerlink" title="BOM对象组成"></a>BOM对象组成</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/BOM%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0.jpg" alt="BOM对象概述"></p>
<h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Window窗口对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 方法</span></span><br><span class="line"><span class="comment">    1. 与弹出框相关的方法</span></span><br><span class="line"><span class="comment">        alert()	显示带有一段消息和一个确认按钮的警告框。</span></span><br><span class="line"><span class="comment">        confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。(确定返回true，取消返回false)</span></span><br><span class="line"><span class="comment">        prompt()	显示可提示用户输入的对话框。 返回值即用户输入的值</span></span><br><span class="line"><span class="comment">    2. 与打开关闭有关的方法</span></span><br><span class="line"><span class="comment">        close()	关闭浏览器窗口。关闭的窗口是调用该方法的窗口</span></span><br><span class="line"><span class="comment">        open()	打开一个新的浏览器窗口或查找一个已命名的窗口。返回值是打开的窗口对象</span></span><br><span class="line"><span class="comment">    3. 与定时器有关的方法</span></span><br><span class="line"><span class="comment">        setTimeout()	在指定的毫秒数后调用函数或计算表达式。</span></span><br><span class="line"><span class="comment">                        接收两个参数，第一个是JS代码或方法对象，第二个是毫秒值，返回值是该定时器ID</span></span><br><span class="line"><span class="comment">        clearTimeout()	取消由 setTimeout() 方法设置的 timeout。通过ID取消</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。</span></span><br><span class="line"><span class="comment">                        同样接收两个参数，第一个是是JS代码或方法对象，第二个是循环执行的时间间隔毫秒值，返回值是该定时器ID</span></span><br><span class="line"><span class="comment">        clearInterval()	取消由 setInterval() 设置的 timeout。通过ID取消</span></span><br><span class="line"><span class="comment">3. 属性</span></span><br><span class="line"><span class="comment">    获取其他BOM对象</span></span><br><span class="line"><span class="comment">        1. history</span></span><br><span class="line"><span class="comment">        2. location</span></span><br><span class="line"><span class="comment">        3. Navigator</span></span><br><span class="line"><span class="comment">        4. Screen</span></span><br><span class="line"><span class="comment">        可以用var h1=window.history,也可以直接省略window直接获取var h2=history;</span></span><br><span class="line"><span class="comment">    获取DOM对象</span></span><br><span class="line"><span class="comment">        document属性  获取方法window.document或者document</span></span><br><span class="line"><span class="comment">4. 特点</span></span><br><span class="line"><span class="comment">    window对象不需要创建，可以直接使用：window.方法名</span></span><br><span class="line"><span class="comment">    window引用也可以省略，即直接调用方法名即可 方法名()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取按钮对象</span></span><br><span class="line"><span class="keyword">var</span> openBtn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;openBtn&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> closeBtn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;closeBtn&quot;</span>);</span><br><span class="line"><span class="comment">//新窗口对象</span></span><br><span class="line"><span class="keyword">var</span> newWin;</span><br><span class="line"><span class="comment">//打开新窗口</span></span><br><span class="line">openBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    newWin=open(<span class="string">&quot;https://www.baidu.com&quot;</span>);  <span class="comment">//打开并接收返回值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭新打开的窗口</span></span><br><span class="line">closeBtn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    newWin.close(); <span class="comment">//关闭指定窗口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Location地址栏对象"><a href="#Location地址栏对象" class="headerlink" title="Location地址栏对象"></a>Location地址栏对象</h2><h3 id="Location对象的创建"><a href="#Location对象的创建" class="headerlink" title="Location对象的创建"></a>Location对象的创建</h3><ul>
<li>window.location</li>
<li>location</li>
</ul>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul>
<li>reload() 重新加载当前文档，即刷新</li>
</ul>
<h3 id="主要属性"><a href="#主要属性" class="headerlink" title="主要属性"></a>主要属性</h3><ul>
<li>href 设置或返回完整的URL</li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>2-反射</title>
    <url>/2021/03/03/2-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>框架设计的灵魂，反射机制就是指将类的各个组成部分封装成其他对象</p>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>半成品的软件，可以在其基础上进行软件开发，简化代码</p>
<h2 id="反射机制的好处"><a href="#反射机制的好处" class="headerlink" title="反射机制的好处"></a>反射机制的好处</h2><ul>
<li>可以在程序运行过程中操作这些对象</li>
<li>可以解耦，提高程序可扩展性</li>
</ul>
<h2 id="Java代码在计算机中的三个运行阶段"><a href="#Java代码在计算机中的三个运行阶段" class="headerlink" title="Java代码在计算机中的三个运行阶段"></a>Java代码在计算机中的三个运行阶段</h2><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/java%E4%BB%A3%E7%A0%81%E4%B8%89%E4%B8%AA%E8%BF%90%E8%A1%8C%E9%98%B6%E6%AE%B5.jpg" alt="java代码三个运行阶段"></p>
<p>（第二阶段通过类加载器将源代码阶段的字节码文件加载进了内存）</p>
<h3 id="三个阶段获取Class对象的方法"><a href="#三个阶段获取Class对象的方法" class="headerlink" title="三个阶段获取Class对象的方法"></a>三个阶段获取Class对象的方法</h3><h4 id="源代码阶段"><a href="#源代码阶段" class="headerlink" title="源代码阶段"></a>源代码阶段</h4><p>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class类对象</p>
<p>多用于配置文件，将类名定义在配置文件中，读取文件，加载类</p>
<h4 id="Class类对象阶段"><a href="#Class类对象阶段" class="headerlink" title="Class类对象阶段"></a>Class类对象阶段</h4><p>通过 类名.class：通过类名的属性class获取</p>
<p>多用于参数传递时</p>
<h4 id="运行时阶段"><a href="#运行时阶段" class="headerlink" title="运行时阶段"></a>运行时阶段</h4><p>通过 对象.getClass() 获取（getClass方法定义在Object类中，所以所有对象都具有该方法）</p>
<p>多用于对象已被创建后，通过对象获取字节码文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的三种方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Class.forName(&quot;全类名&quot;)</span></span><br><span class="line">        Class cls1=Class.forName(<span class="string">&quot;cn.ywrby.domain.Person&quot;</span>);</span><br><span class="line">        System.out.println(cls1);</span><br><span class="line">        <span class="comment">//类名.class</span></span><br><span class="line">        Class cls2= Person.class;</span><br><span class="line">        System.out.println(cls2);</span><br><span class="line">        <span class="comment">//对象.getClass()</span></span><br><span class="line">        Person person=<span class="keyword">new</span> Person();</span><br><span class="line">        Class cls3=person.getClass();</span><br><span class="line">        System.out.println(cls3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判读Class对象是否为同一个</span></span><br><span class="line">        System.out.println(cls1==cls2);</span><br><span class="line">        System.out.println(cls1==cls3);</span><br><span class="line">        <span class="comment">//结果均为true说明一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次</span></span><br><span class="line">        <span class="comment">//也就是说不论通过哪一种方式获取到的Class对象都是同一个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="使用Class对象"><a href="#使用Class对象" class="headerlink" title="使用Class对象"></a>使用Class对象</h2><h3 id="获取功能"><a href="#获取功能" class="headerlink" title="获取功能"></a>获取功能</h3><ul>
<li>获取成员变量们<ul>
<li>Field[]    getFields()  获取所有<strong>public修饰</strong>的成员变量</li>
<li>Field    getField(String name)  获取指定名称的由<strong>public修饰</strong>的成员变量 （通过Filed对象的get()和set()方法可以获取和设置成员变量的值，不过需要传入对象参数）</li>
<li>Field[]    getDeclaredFields()  获取所有的成员变量，不考虑变量的修饰符</li>
<li>Field    getDeclaredField(String name)  获取指定成员变量，不考虑修饰符</li>
</ul>
</li>
<li>获取构造方法们<ul>
<li>Constructor&lt;?&gt;[]    getConstructors()</li>
<li>Constructor<T>    getConstructor(Class&lt;?&gt;… parameterTypes)</li>
<li>Constructor&lt;?&gt;[]    getDeclaredConstructors()</li>
<li>Constructor<T>    getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</li>
</ul>
</li>
<li>获取成员方法们<ul>
<li>Method[]    getMethods()</li>
<li>Method    getMethod(String name, Class&lt;?&gt;… parameterTypes)</li>
<li>Method[]    getDeclaredMethods()</li>
<li>Method    getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</li>
</ul>
</li>
<li>获取类名<ul>
<li>String    getName()</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取成员变量们</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass=Person.class;</span><br><span class="line">        <span class="comment">//获取所有public修饰的成员变量</span></span><br><span class="line">        Field[] fields=personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field: fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的public修饰的成员变量</span></span><br><span class="line">        Field field=personClass.getField(<span class="string">&quot;num&quot;</span>);</span><br><span class="line">        <span class="comment">//设置成员变量的值</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        field.set(p,<span class="number">80</span>);</span><br><span class="line">        <span class="comment">//获取成员变量的值</span></span><br><span class="line">        Object num= field.get(p);</span><br><span class="line">        System.out.println(num);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有的成员变量</span></span><br><span class="line">        Field[] fields1=personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field1:fields1) &#123;</span><br><span class="line">            System.out.println(field1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定的成员变量</span></span><br><span class="line">        Field field1=personClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">/* 设置成员变量的值（正常情况下我们直接通过对象无法获取到对象所在类</span></span><br><span class="line"><span class="comment">         * 的非public类型的成员变量，但是通过反射的getDeclaredField等方法却可以获取到</span></span><br><span class="line"><span class="comment">         * 任意指定的成员变量，但如果该成员变量是非public修饰的，我们需要忽略访问权限修饰符的安全检查</span></span><br><span class="line"><span class="comment">         * 才能对该成员变量进行访问（获取或设置值））</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        field1.setAccessible(<span class="keyword">true</span>);   <span class="comment">//忽略访问权限修饰符的安全检查(被称为暴力反射)</span></span><br><span class="line">        field1.set(p,<span class="string">&quot;ywrby&quot;</span>);</span><br><span class="line">        Object name=field1.get(p);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">public int cn.ywrby.domain.Person.num</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">80</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">private java.lang.String cn.ywrby.domain.Person.name</span></span><br><span class="line"><span class="comment">private int cn.ywrby.domain.Person.age</span></span><br><span class="line"><span class="comment">public int cn.ywrby.domain.Person.num</span></span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line"><span class="comment">ywrby</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取构造方法们</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//获取构造函数/构造器(构造函数间唯一区别就在于参数列表，所以通过参数类型获取指定构造器)</span></span><br><span class="line">        Constructor constructor=personClass.getConstructor(String.class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//利用构造方法可以用来创建对象  newInstance​(Object... initargs)方法就是用来创建对应的对象</span></span><br><span class="line">        Object person=constructor.newInstance(<span class="string">&quot;ywrby&quot;</span>,<span class="number">19</span>,<span class="number">95</span>);</span><br><span class="line">        System.out.println(person); <span class="comment">//这里记得在Person类中重写toString方法才能显示正确的各变量值（右键generate快速创建）</span></span><br><span class="line">        <span class="comment">//空参构造器一般直接采用下面这种方式简化创建</span></span><br><span class="line">        Object person2=personClass.getDeclaredConstructor().newInstance();</span><br><span class="line">        System.out.println(person2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;ywrby&#x27;, age=19, num=95&#125;</span></span><br><span class="line"><span class="comment">Person&#123;name=&#x27;null&#x27;, age=0, num=0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先获取Person的Class对象</span></span><br><span class="line">        Class personClass = Person.class;</span><br><span class="line">        <span class="comment">//获取指定方法,第一个参数是方法名，后续参数的方法的参数列表类型</span></span><br><span class="line">        Method method = personClass.getDeclaredMethod(<span class="string">&quot;MessageOfPerson&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;ywrby&quot;</span>, <span class="number">19</span>, <span class="number">95</span>);</span><br><span class="line">        method.invoke(person, <span class="number">5</span>);  <span class="comment">//利用invoke执行方法，第一个参数是类对象，后续不定参是方法实参列表</span></span><br><span class="line">        <span class="comment">//方法对象还可以直接获取名称，利用getName()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment">name is ywrby, age is 19, num is 95</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="反射的简单案例"><a href="#反射的简单案例" class="headerlink" title="反射的简单案例"></a>反射的简单案例</h2><h4 id="完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）"><a href="#完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）" class="headerlink" title="完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）"></a>完成一个简单的框架，在不改变任何代码的前提下，能够创建任意类对象，并且运行其中任意方法（方法无参）</h4><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ul>
<li>配置文件</li>
<li>反射</li>
</ul>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>将需要创建的全类名和需要执行的方法名定义在配置文件中</li>
<li>在程序中加载读取配置文件</li>
<li>使用反射技术来加载读取类文件进入内存</li>
<li>创建对象</li>
<li>执行方法</li>
</ol>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">className</span>=<span class="string">cn.ywrby.domain.Person</span></span><br><span class="line"><span class="attr">methodName</span>=<span class="string">MessageOfPerson</span></span><br></pre></td></tr></table></figure>
<h3 id="简单框架"><a href="#简单框架" class="headerlink" title="简单框架"></a>简单框架</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//利用load方法加载配置文件，转换为一个集合</span></span><br><span class="line">        ClassLoader classLoader=ReflectTest.class.getClassLoader();  <span class="comment">//获取类加载器</span></span><br><span class="line">        InputStream is=classLoader.getResourceAsStream(<span class="string">&quot;pro.properties&quot;</span>); <span class="comment">//利用类加载器的getResourceAsStream方法获取资源路径下的字节流对象</span></span><br><span class="line">        pro.load(is);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置文件中定义的数据</span></span><br><span class="line">        String className=pro.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName=pro.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载该类进内存，并且创建对象</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object object=cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method=cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>21-jQuery基础+选择器</title>
    <url>/2021/03/03/21-jQuery%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jQuery框架"><a href="#jQuery框架" class="headerlink" title="jQuery框架"></a>jQuery框架</h1><p>jQuery是开源软件，使用MIT许可证授权。 jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。模块化的方式使jQuery函数库能够创建功能强大的动态网页以及网络应用程序。</p>
<h4 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过JS的方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//遍历标签集合，修改标签内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;divs.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        divs[i].innerHTML=<span class="string">&quot;hello div!&quot;</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $divs=$(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式遍历标签集合并修改内容</span></span></span><br><span class="line"><span class="javascript">    $divs.html(<span class="string">&quot;hi div!&quot;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="JS与Jquery对象之间的转化"><a href="#JS与Jquery对象之间的转化" class="headerlink" title="JS与Jquery对象之间的转化"></a>JS与Jquery对象之间的转化</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>div1...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>div2...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过JS的方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//通过Jquery方式获取所有div标签</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $divs=$(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//JS对象转化为Jquery对象,直接在变量名前加$()即可</span></span></span><br><span class="line"><span class="javascript">    $(divs)</span></span><br><span class="line"><span class="javascript">    <span class="comment">//Jquery对象转化为JS对象，可以利用索引值，也可以利用get方法</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div1=$divs.get(<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div2=$divs[<span class="number">1</span>];</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h2><p>用于筛选具有相似特征的元素</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="1-事件绑定"><a href="#1-事件绑定" class="headerlink" title="1. 事件绑定"></a>1. 事件绑定</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//获取按钮</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#b1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;hello&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-入口函数"><a href="#2-入口函数" class="headerlink" title="2. 入口函数"></a>2. 入口函数</h4><p>入口函数即指首先加载的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//入口函数，始终先于其他内容执行</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&quot;执行页面加载前的准备工作&quot;</span>)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-CSS样式控制"><a href="#3-CSS样式控制" class="headerlink" title="3. CSS样式控制"></a>3. CSS样式控制</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//进行CSS样式控制</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#div1&quot;</span>).css(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul>
<li>标签选择器（元素选择器）：获得所有匹配标签名称的选择器<ul>
<li>$(“HTML标签名”)</li>
</ul>
</li>
<li>ID选择器：获得所有与指定ID值匹配的元素<ul>
<li>$(“#ID的属性值”)</li>
</ul>
</li>
<li>类选择器：获得所有与指定类(class)相同的元素<ul>
<li>$(“.class”)  </li>
</ul>
</li>
<li>并集选择器：获得多个选择器所选中的元素<ul>
<li>$(“选择器1,选择器2,…”)</li>
</ul>
</li>
</ul>
<h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul>
<li>后代选择器：会选择A标签下所有与B标签相一致的元素（包括子辈与孙辈等等）<ul>
<li>$(“A B”)</li>
</ul>
</li>
<li>子选择器：会选择A标签下所有与B标签相一致的子辈元素（不包括子辈以外的元素）<ul>
<li>$(“A &gt; B”)</li>
</ul>
</li>
</ul>
<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul>
<li>属性名称选择器：只要包含指定属性名称都会被选择(A是标签名称)<ul>
<li>$(“A[属性名]”)  </li>
</ul>
</li>
<li>属性选择器：选择所有包含对应属性，且属性值与规定相同的元素<ul>
<li>$(“A[属性名=’属性值’]”)</li>
</ul>
</li>
<li>复合属性选择器：包含多个属性选择器<ul>
<li>$(“A[属性名1=’属性值1’][属性名2=’属性值2’]…”)</li>
</ul>
</li>
</ul>
<h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><ul>
<li>首元素选择器：获得选择元素中的第一个元素<ul>
<li>$(“选择器:first”)</li>
<li>例如：$(“div:first”) $(“#id:first”)</li>
</ul>
</li>
<li>尾元素选择器：获得选择元素中的最后一个元素<ul>
<li>$(“选择器:last”)</li>
<li>例如：$(“div:last”) $(“#id:last”)</li>
</ul>
</li>
<li>非元素选择器：不包括指定内容的元素<ul>
<li>$(“选择器:not(selector)”)</li>
</ul>
</li>
<li>偶数选择器，奇数选择器（从0开始计数）<ul>
<li>$(“选择器:even”)  $(“选择器:odd”)</li>
</ul>
</li>
<li>等于索引选择器：指定索引元素<ul>
<li>$(“选择器:eq(index)”)</li>
</ul>
</li>
<li>大于索引选择器：所有大于指定索引的元素<ul>
<li>$(“选择器:gt(index)”)</li>
</ul>
</li>
<li>小于索引选择器：所有小于指定索引的元素<ul>
<li>$(“选择器:lt(index)”)</li>
</ul>
</li>
<li>标题选择器：获得标题元素，固定写法<ul>
<li>$(“选择器:header”)</li>
</ul>
</li>
</ul>
<h3 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h3><ul>
<li>可用元素选择器：获得所有可用元素<ul>
<li>$(“选择器:enabled”)</li>
</ul>
</li>
<li>不可用元素选择器：获得所有不可用元素<ul>
<li>$(“选择器:disabled”)</li>
</ul>
</li>
<li>选中选择器：获得单选/复选框所有选中的元素<ul>
<li>$(“选择器:checked”)</li>
</ul>
</li>
<li>选中选择器：获得下拉列表框中选中元素<ul>
<li>$(“选择器:selected”)</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>2-多线程</title>
    <url>/2021/03/03/2-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多线程概述（并发编程）"><a href="#多线程概述（并发编程）" class="headerlink" title="多线程概述（并发编程）"></a>多线程概述（并发编程）</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序是静止的，而运行中的程序就是进程</p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>动态性：进程是运行中的程序，要动态的占用内存，CPU和网络等资源</li>
<li>独立性：进程和进程之间是相互独立的，彼此有自己独立内存区域</li>
<li>并发性：假如CPU是单核，同一时刻内存中只有一个进程在被执行，CPU会依时为每个进程服务，由于切换速度非常快，给我们的感觉就是这些进程在同时执行，这就是并发性</li>
</ul>
<h4 id="并行："><a href="#并行：" class="headerlink" title="并行："></a>并行：</h4><p>同一时刻同时有多个进程在执行（多核CPU）</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程属于进程，一个进程可以包含多个线程，这就是多线程。（线程是进程中的一个独立执行单元）线程的创建开销相对于进程来说比较小，线程也支持并发性</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>提高程序效率，线程支持并发性，可以有更多机会得到CPU</li>
<li>多线程可以解决很多业务模型</li>
<li>大型高并发技术的核心技术</li>
</ul>
<h2 id="线程创建方式一：继承Thread类"><a href="#线程创建方式一：继承Thread类" class="headerlink" title="线程创建方式一：继承Thread类"></a>线程创建方式一：继承Thread类</h2><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程的方法一：</span></span><br><span class="line"><span class="comment">* 1. 直接定义类继承Thread</span></span><br><span class="line"><span class="comment">* 2. 重写run()方法</span></span><br><span class="line"><span class="comment">* 3. 创建线程对象</span></span><br><span class="line"><span class="comment">* 4. 调用线程对象的start()方法启动线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程输出：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里可以把启动后的ThreadDemo当成一个进程</span></span><br><span class="line">    <span class="comment">// main方法是由主线程执行的，理解成main方法就是一个主线程</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> MyThread();  <span class="comment">//多态</span></span><br><span class="line">        <span class="comment">//调用start()方法启动线程</span></span><br><span class="line">        t.start();  <span class="comment">//此时一共存在两个线程，一个是main函数表示的主线程，另一个就是t表示的子线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程输出：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">主线程输出：<span class="number">0</span></span><br><span class="line">主线程输出：<span class="number">1</span></span><br><span class="line">子线程输出：<span class="number">0</span></span><br><span class="line">主线程输出：<span class="number">2</span></span><br><span class="line">子线程输出：<span class="number">1</span></span><br><span class="line">主线程输出：<span class="number">3</span></span><br><span class="line">子线程输出：<span class="number">2</span></span><br><span class="line">主线程输出：<span class="number">4</span></span><br><span class="line">子线程输出：<span class="number">3</span></span><br><span class="line">子线程输出：<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>可以看到多线程是并发的，两个线程之间的执行顺序是完全随机的，双方都不断争抢CPU执行，并且执行过程始终向前推进</p>
<h3 id="继承Thread类的优点"><a href="#继承Thread类的优点" class="headerlink" title="继承Thread类的优点"></a>继承Thread类的优点</h3><ul>
<li>编码相对简单</li>
</ul>
<h3 id="继承Thread类的缺点"><a href="#继承Thread类的缺点" class="headerlink" title="继承Thread类的缺点"></a>继承Thread类的缺点</h3><ul>
<li>自定义线程类继承了Thread类，导致无法再继承其他类，功能单一，不能继续拓展（单继承的局限性）</li>
</ul>
<h3 id="线程的注意事项"><a href="#线程的注意事项" class="headerlink" title="线程的注意事项"></a>线程的注意事项</h3><h4 id="线程的启动必须调用start-方法"><a href="#线程的启动必须调用start-方法" class="headerlink" title="线程的启动必须调用start()方法"></a>线程的启动必须调用start()方法</h4><p>否则操作就会被当作普通类处理，按照代码顺序正常执行。<br>也就是说，如果直接调用自定义线程类的run方法，实际上就变成了普通类执行，此时只有一个主线程在运行</p>
<p>start()方法底层其实是给CPU注册当前线程，并且触发run()方法的执行</p>
<p>一般建议进程中先创建子线程，主线程的任务放在之后（否则程序按顺序执行，先接触到主线程内容，并没有发现后续的子线程启动，导致主线程必然先进行完，整个流程实际上仍然是顺序执行）</p>
<h2 id="线程创建方式二：实现Runnable接口"><a href="#线程创建方式二：实现Runnable接口" class="headerlink" title="线程创建方式二：实现Runnable接口"></a>线程创建方式二：实现Runnable接口</h2><ol>
<li>创建一个线程任务类实现Runnable接口</li>
<li>重写run()方法</li>
<li>创建一个<strong>线程任务</strong>对象</li>
<li>将<strong>线程任务</strong>对象包装成<strong>线程</strong>对象</li>
<li>调用线程对象的start()方法启动线程</li>
</ol>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建&quot;线程任务&quot;对象(不是线程对象，只是执行线程任务的)</span></span><br><span class="line">        Runnable target=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//4. 把线程任务对象包装成线程对象</span></span><br><span class="line">        <span class="comment">//Thread t=new Thread(target);   单纯创建线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target,<span class="string">&quot;TheFirstThread&quot;</span>);  <span class="comment">//利用线程任务创建线程对象的同时为线程命名</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 首先，创建线程任务类实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方式二的匿名内部类写法（简化写法）"><a href="#方式二的匿名内部类写法（简化写法）" class="headerlink" title="方式二的匿名内部类写法（简化写法）"></a>方式二的匿名内部类写法（简化写法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target=<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target,<span class="string">&quot;TheFirstThread&quot;</span>);  </span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="方式二实现Runnable接口创建的优点"><a href="#方式二实现Runnable接口创建的优点" class="headerlink" title="方式二实现Runnable接口创建的优点"></a>方式二实现Runnable接口创建的优点</h3><ul>
<li>线程任务类只是实现了Runnable接口，所以可以继续继承其他类，而且可以继续实现其他接口，避免了单继承的局限性 </li>
<li>同一个线程任务对象可以被包装成多个线程对象</li>
<li>适合多个相同的程序代码的线程去共享同一个资源</li>
<li>实现解耦操作，线程任务代码可以被多个线程共享，线程任务代码和线程独立</li>
<li>线程池可以放入实现Runnable或Callable线程任务对象</li>
</ul>
<h3 id="方式二实现Runnable接口创建的缺点"><a href="#方式二实现Runnable接口创建的缺点" class="headerlink" title="方式二实现Runnable接口创建的缺点"></a>方式二实现Runnable接口创建的缺点</h3><ul>
<li>代码较为复杂</li>
<li>继承的Runnable接口的run()方法没有返回值，不能直接得到线程执行的结果</li>
</ul>
<h4 id="注意：Thread类本身也实现了Runnable接口"><a href="#注意：Thread类本身也实现了Runnable接口" class="headerlink" title="注意：Thread类本身也实现了Runnable接口"></a>注意：Thread类本身也实现了Runnable接口</h4><h2 id="线程创建方式三：实现Callable接口"><a href="#线程创建方式三：实现Callable接口" class="headerlink" title="线程创建方式三：实现Callable接口"></a>线程创建方式三：实现Callable接口</h2><ol>
<li>定义一个线程任务类实现Callable接口，申明线程执行的结果类型</li>
<li>重写线程任务类的call方法，这个方法可以直接返回执行结果（解决了Runnable接口的缺点）</li>
<li>创建一个Callable的线程任务对象</li>
<li>把Callable的线程任务对象包装成一个未来任务对象</li>
<li>把未来任务对象包装成线程对象</li>
<li>调用现成的start()方法启动线程</li>
</ol>
<h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Callable线程任务对象</span></span><br><span class="line">        Callable&lt;String&gt; call=<span class="keyword">new</span> MyCallable();</span><br><span class="line">        <span class="comment">//4. 把Callable任务对象包装成未来任务对象</span></span><br><span class="line">        <span class="comment">//未来任务对象：本质就是一个Runnaable对象（FutureTask继承自Runnable）</span></span><br><span class="line">        <span class="comment">//未来任务对象可以在线程执行完后得到线程执行结果</span></span><br><span class="line">        FutureTask&lt;String&gt; task=<span class="keyword">new</span> FutureTask&lt;String&gt;(call);</span><br><span class="line">        <span class="comment">//5. 把未来任务对象包装成线程对象</span></span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(task,<span class="string">&quot;TheFirstThread&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6. 最后获取线程执行结果,如果线程没有结果，会让出CPU等待线程执行完毕再来取值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String rs=task.get();  <span class="comment">//获取call方法返回的结果（正常/异常）</span></span><br><span class="line">            System.out.println(rs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个线程任务类实现Callable接口，申明线程返回的结果类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写线程任务类的call方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 计算1~20的和</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName()+<span class="string">&quot;执行的结果是：&quot;</span>+sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TheFirstThread==&gt;<span class="number">0</span></span><br><span class="line">main==&gt;<span class="number">0</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">1</span></span><br><span class="line">main==&gt;<span class="number">1</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">2</span></span><br><span class="line">main==&gt;<span class="number">2</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">3</span></span><br><span class="line">main==&gt;<span class="number">3</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">4</span></span><br><span class="line">main==&gt;<span class="number">4</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">5</span></span><br><span class="line">main==&gt;<span class="number">5</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">6</span></span><br><span class="line">main==&gt;<span class="number">6</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">7</span></span><br><span class="line">main==&gt;<span class="number">7</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">8</span></span><br><span class="line">main==&gt;<span class="number">8</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">9</span></span><br><span class="line">main==&gt;<span class="number">9</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">10</span></span><br><span class="line">main==&gt;<span class="number">10</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">11</span></span><br><span class="line">main==&gt;<span class="number">11</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">12</span></span><br><span class="line">main==&gt;<span class="number">12</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">13</span></span><br><span class="line">main==&gt;<span class="number">13</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">14</span></span><br><span class="line">main==&gt;<span class="number">14</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">15</span></span><br><span class="line">main==&gt;<span class="number">15</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">16</span></span><br><span class="line">main==&gt;<span class="number">16</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">17</span></span><br><span class="line">main==&gt;<span class="number">17</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">18</span></span><br><span class="line">main==&gt;<span class="number">18</span></span><br><span class="line">TheFirstThread==&gt;<span class="number">19</span></span><br><span class="line">main==&gt;<span class="number">19</span></span><br><span class="line">TheFirstThread执行的结果是：<span class="number">190</span></span><br></pre></td></tr></table></figure>
<h3 id="方法三，继承Callable接口优点"><a href="#方法三，继承Callable接口优点" class="headerlink" title="方法三，继承Callable接口优点"></a>方法三，继承Callable接口优点</h3><p>拥有方法二的全部优点，并且能够通过返回值了解线程是否正常运行，得到线程执行的结果</p>
<h3 id="方法三，继承Callable接口缺点"><a href="#方法三，继承Callable接口缺点" class="headerlink" title="方法三，继承Callable接口缺点"></a>方法三，继承Callable接口缺点</h3><p>编码复杂</p>
<h2 id="线程常用API"><a href="#线程常用API" class="headerlink" title="线程常用API"></a>线程常用API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : 子线程输出 ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进程中一共包括两个子线程t1,t2与一个主线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> MyThread2();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;TheFirstThread&quot;</span>);   <span class="comment">//为线程命名</span></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(t1.getName());  <span class="comment">//获取子线程的名字</span></span><br><span class="line"></span><br><span class="line">        Thread t2=<span class="keyword">new</span> MyThread2();</span><br><span class="line"></span><br><span class="line">        t2.setName(<span class="string">&quot;TheSecondThread&quot;</span>);   <span class="comment">//为线程命名</span></span><br><span class="line"></span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(t2.getName());  <span class="comment">//获取子线程的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取主线程名称的方法</span></span><br><span class="line">        <span class="comment">//利用currentThread()方法，可以获取当前所在的线程的对象</span></span><br><span class="line">        <span class="comment">//（注意，这里说的是在哪个线程内部，而不是正在执行哪个线程，三个线程随机执行，但此时都在主线程内）</span></span><br><span class="line">        Thread m =Thread.currentThread();</span><br><span class="line">        m.setName(<span class="string">&quot;MainThread&quot;</span>);</span><br><span class="line">        System.out.println(m.getName());  <span class="comment">//从而就可获取到主线程名称</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TheFirstThread</span><br><span class="line">TheSecondThread</span><br><span class="line">MainThread</span><br><span class="line">MainThread ：<span class="number">0</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">0</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">0</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">1</span></span><br><span class="line">MainThread ：<span class="number">1</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">2</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">1</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">3</span></span><br><span class="line">MainThread ：<span class="number">2</span></span><br><span class="line">TheSecondThread : 子线程输出 ：<span class="number">4</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">2</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">3</span></span><br><span class="line">TheFirstThread : 子线程输出 ：<span class="number">4</span></span><br><span class="line">MainThread ：<span class="number">3</span></span><br><span class="line">MainThread ：<span class="number">4</span></span><br></pre></td></tr></table></figure>



<h3 id="线程休眠方法：sleep"><a href="#线程休眠方法：sleep" class="headerlink" title="线程休眠方法：sleep()"></a>线程休眠方法：sleep()</h3><p>让当前线程休眠指定时间（毫秒）后继续执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个线程类继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写run()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 线程的执行方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);  <span class="comment">//使子进程休眠1000ms再运行</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; : 子线程输出 ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        Thread t1=<span class="keyword">new</span> MyThread3();</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; ：&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="通过Thread类的含参构造器为线程命名"><a href="#通过Thread类的含参构造器为线程命名" class="headerlink" title="通过Thread类的含参构造器为线程命名"></a>通过Thread类的含参构造器为线程命名</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t1=<span class="keyword">new</span> MyThread(<span class="string">&quot;TheFirstThread&quot;</span>);</span><br><span class="line"><span class="comment">// 需要重写自定义线程的方法（直接调用父类有参构造器即可）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name); <span class="comment">//调用父类有参构造器并初始化线程对象的名称</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>22-jQuery深入</title>
    <url>/2021/03/03/22-jQuery%E6%B7%B1%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jQuery中的DOM操作"><a href="#jQuery中的DOM操作" class="headerlink" title="jQuery中的DOM操作"></a>jQuery中的DOM操作</h1><h2 id="内容操作"><a href="#内容操作" class="headerlink" title="内容操作"></a>内容操作</h2><ul>
<li>html():获取/设置元素标签体中的内容</li>
<li>text():获取/设置元素标签体中的纯文本内容</li>
<li>val():获取/设置元素value属性值内容</li>
</ul>
<h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h4 id="1-通用属性操作"><a href="#1-通用属性操作" class="headerlink" title="1. 通用属性操作"></a>1. 通用属性操作</h4><ul>
<li>attr():获取/设置元素属性，一般操作自定义属性</li>
<li>removeAttr():删除元素属性</li>
<li>prop():获取/设置元素属性，一般操作固有属性</li>
<li>removeProp():删除元素属性</li>
</ul>
<h4 id="2-对class属性操作"><a href="#2-对class属性操作" class="headerlink" title="2. 对class属性操作"></a>2. 对class属性操作</h4><ul>
<li>addClass():添加class属性值</li>
<li>removeClass():删除class属性值</li>
<li>taggleClass():切换class属性</li>
</ul>
<h2 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h2><ol>
<li>append():父元素将子元素追加到末尾<ul>
<li>对象1.append(对象2):将对象2添加到对象1元素内部，并且在末尾</li>
</ul>
</li>
<li>prepend():父元素将子元秦追加到开头<ul>
<li>对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</li>
</ul>
</li>
<li>appendTo():<ul>
<li>对象1.appendTo(对象2):将对象1添加到对象2内部，并且在未尾</li>
</ul>
</li>
<li>prependTo():<ul>
<li>对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</li>
</ul>
</li>
<li>after():添加元秦到元素后边<ul>
<li>对象1.after(对象2):将对象2添加到对象1后边。对象1和对象2是兄弟关系</li>
</ul>
</li>
<li>before():添加元素到元秦前边<ul>
<li>对象1. before(对象2):将对象2添加到对象1前边。对象1和对象2是兄弟关系</li>
</ul>
</li>
<li>insertAfter()<ul>
<li>对象1.insertAfter(对象2):将对象2添加到对象1后边。对象1和对象2是兄弟关系</li>
</ul>
</li>
<li>insertBefore()<ul>
<li>对象1.insertBefore(对象2)∶将对象2添加到对象1前边。对象1和对象2是兄弟关系</li>
</ul>
</li>
<li>remove():移除元素<ul>
<li>对象.remove(:将对象删除掉</li>
</ul>
</li>
<li>empty():清空元素的所有后代元秦。<ul>
<li>对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</li>
</ul>
</li>
</ol>
<h1 id="jQuery中的动画操作"><a href="#jQuery中的动画操作" class="headerlink" title="jQuery中的动画操作"></a>jQuery中的动画操作</h1><h3 id="标签默认的显示与隐藏"><a href="#标签默认的显示与隐藏" class="headerlink" title="标签默认的显示与隐藏"></a>标签默认的显示与隐藏</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery动画练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /**</span><br><span class="line">         * show,hide,taggle都可以接收三个参数</span><br><span class="line">         * 第一个参数表示动画速度，可选slow,fast,normal也可输入毫秒数，可以省略</span><br><span class="line">         * 第二个参数表示淡入/淡出方式，默认是swing，还有linear可选，可以省略</span><br><span class="line">         * 第三个参数表示执行函数，函数会在动画时执行，每个元素执行一次</span><br><span class="line">         */</span><br><span class="line"><span class="javascript">        <span class="comment">//利用hide函数隐藏元素</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">hideFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).hide(<span class="string">&quot;slow&quot;</span>,<span class="string">&quot;swing&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;div1被隐藏...&quot;</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//利用show方法显示元素</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).show(<span class="string">&quot;slow&quot;</span>,<span class="string">&quot;swing&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//taggle函数会修改标签显示状态</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeFunc</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#div1&quot;</span>).toggle(<span class="string">&quot;slow&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击隐藏&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;hideFunc()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击显示&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;showFunc()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换状态&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;changeFunc()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此外还有类似功能的slideDown,slideUp,slideTaggle表示滑动显示或隐藏</p>
<p>以及fadeIn,fadeOut,fadeTaggle表示淡入淡出</p>
<h1 id="jQuery中的遍历操作"><a href="#jQuery中的遍历操作" class="headerlink" title="jQuery中的遍历操作"></a>jQuery中的遍历操作</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> cities=$(<span class="string">&quot;#city li&quot;</span>);</span></span><br><span class="line">        alert(cities);</span><br><span class="line"><span class="javascript">        <span class="comment">//JS遍历方式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;cities.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=cities[i].innerHTML;</span></span><br><span class="line">            alert(name);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//jQuery方式遍历</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//第一种方式</span></span></span><br><span class="line"><span class="javascript">        cities.each(<span class="function"><span class="keyword">function</span> (<span class="params">index,element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//index表示索引值，element是每次遍历得到的元素对象</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//index,element可以省略不写，此时可以通过this获取对象，但不能获取索引值</span></span></span><br><span class="line"><span class="javascript">            alert(index+<span class="string">&quot;:&quot;</span>+$(element).html());</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//第二种方式</span></span></span><br><span class="line"><span class="javascript">        $.each(cities,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert($(<span class="built_in">this</span>).html());</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="comment">//第三种方式（jQuery3.0后才支持）</span></span></span><br><span class="line">        for(city of cities)&#123;</span><br><span class="line"><span class="javascript">            alert($(city).html());</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="jQuery事件绑定"><a href="#jQuery事件绑定" class="headerlink" title="jQuery事件绑定"></a>jQuery事件绑定</h1><h3 id="标准绑定方式"><a href="#标准绑定方式" class="headerlink" title="标准绑定方式"></a>标准绑定方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery对象.事件方法(回调函数)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例如</span><br><span class="line">button.onClick(function()&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="on绑定事件-off解除绑定"><a href="#on绑定事件-off解除绑定" class="headerlink" title="on绑定事件/off解除绑定"></a>on绑定事件/off解除绑定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery对象.on(&quot;事件名称&quot;,回调函数)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;例如</span><br><span class="line">button.on(&quot;click&quot;,function()&#123;</span><br><span class="line">&#125;)</span><br><span class="line">button.off(&quot;click&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="事件切换-toggle"><a href="#事件切换-toggle" class="headerlink" title="事件切换 toggle"></a>事件切换 toggle</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery对象.toggle(func1,func2,...)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>2-Spring配置文件与依赖注入</title>
    <url>/2021/03/03/2-Spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><h2 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h2><p>用于配置对象交由Spring来创建，默认情况下调用的是类中的无参构造函数，没有无参构造的情况下不能创建成功</p>
<h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><ul>
<li>id：Bean实例在Spring中的唯一标识</li>
<li>class：Bean的全限定名称</li>
</ul>
<h3 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h3><h4 id="scope属性"><a href="#scope属性" class="headerlink" title="scope属性"></a>scope属性</h4><table>
<thead>
<tr>
<th>取值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>默认值，单例的</td>
</tr>
<tr>
<td>prototype</td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>web项目中，Spring创建一个对象并将对象存入request域内</td>
</tr>
<tr>
<td>session</td>
<td>web项目中，Spring创建一个对象并将对象存入session域内</td>
</tr>
<tr>
<td>global session</td>
<td>web项目中，应用在Portlet环境，如果没有Portlet环境，global session相当于session</td>
</tr>
</tbody></table>
<p>这里单例是指每次创建出的Bean对象都是同一个对象，而多例则表示每次创建的都是全新的不同的Bean对象</p>
<p><strong>示例</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多例的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试scope属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserDao dao1= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    UserDao dao2= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    <span class="comment">//输出两个对象的地址即可判断是否两次创建为同一对象</span></span><br><span class="line">    System.out.println(dao1);</span><br><span class="line">    System.out.println(dao2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="singleton与prototype的区别"><a href="#singleton与prototype的区别" class="headerlink" title="singleton与prototype的区别"></a>singleton与prototype的区别</h4><p>当scope取值为singleton时，Bean实例化的个数始终是一个，并且实例化的时机是在<strong>Spring核心文件（配置文件）被加载时</strong></p>
<p>当scope取值为prototype时，Bean实例化的个数是多个，此时实例化的时机不是核心文件加载，而是在<strong>每次调用getBean方法时创建</strong></p>
<h3 id="Bean声明周期的配置"><a href="#Bean声明周期的配置" class="headerlink" title="Bean声明周期的配置"></a>Bean声明周期的配置</h3><ul>
<li>init-method:指定初始化方法，在对象创建时被调用</li>
<li>destroy-method:指定销毁方法，在对象被销毁时调用</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行初始化...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行销毁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Save Running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Spring依赖注入"><a href="#Spring依赖注入" class="headerlink" title="Spring依赖注入"></a>Spring依赖注入</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>依赖注入（Dependency Injection）是Spring框架核心IOC的具体实现</p>
<h3 id="Bean对象的注入（引用数据类型的注入）"><a href="#Bean对象的注入（引用数据类型的注入）" class="headerlink" title="Bean对象的注入（引用数据类型的注入）"></a>Bean对象的注入（引用数据类型的注入）</h3><p>依赖注入的主要目的还是解耦，主要利用的原理就是控制反转，即将构造对象这个【控制】交给了第三方Spring来进行操作</p>
<p>我们在实际的项目开发中，必然涉及到对多个对象的构造与控制，而我们许多的对象已经预定义在Spring容器中（那些已经在配置文件中定义的对象）。</p>
<p>此时假如我们需要在某个Spring容器中已有的对象A内调用另一个同样已经在Spring容器中定义的对象B，一般情况我们会直接在对象A中加载配置文件，利用Spring获取对象B，然后再操作获取到的对象</p>
<p>这种情况下假如我们需要修改代码，就需要到所有操作配置文件获取对象B的方法内进行修改，直接导致了代码耦合度变高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//UserService与UserDao都是定义在Spring容器中的对象</span></span><br><span class="line">        <span class="comment">//这里在UserService的save方法中利用配置文件获取了UserDao对象</span></span><br><span class="line">        <span class="comment">//这也就导致了代码耦合度很高，不便于复用和修改</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要解决这种问题就可以利用依赖注入,第一种方式是set方法注入，第二种是构造函数注入</p>
<h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><p>即通过在配置文件中提前配置，使得在创建对象A时调用指定的set方法将对象B直接传入对象A内部，这样的注入方式保证了对象B没有在对象A的方法中进行实例化，而是作为参数直接传入A内部，需要使用对象B时直接使用传入的对象即可。需要修改代码时只需要对配置文件进行修改即可</p>
<p>首先在被传入的Bean中定义传入参数的set方法，并且定义成员变量用于接收传入的参数，修改调用对象B的函数，直接利用成员变量进行操作即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;  <span class="comment">//定义成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法，用于其他对象的传入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改成员方法，可以直接利用成员变量进行操作</span></span><br><span class="line">        <span class="comment">//省去了对配置文件的使用，降低了代码耦合度</span></span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后修改配置文件，指定在创建UserService时调用指定的set方法注入相关参数(利用property标签进行指定 其中name是set方法后面的后缀并首字母小写，例如setDao方法，这里就传入dao，setUserService方法就传入userService ，ref是要传入的Spring容器中对象的ID)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试依赖注入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userServiceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    service.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>P命名空间注入</strong></p>
<p>这种注入方式本质还是set方法注入，只是通过利用P命名空间，简化了配置方法</p>
<p>在配置时首先需要定义P命名空间(第三行即定义P命名空间)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>利用P命名空间的属性直接定义注入方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:dao-ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h4><p>构造函数注入就是在创建对象A时调用对象A的有参构造函数，将指定的对象B作为参数注入对象A中</p>
<p>首先需要在被注入的对象中创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;  <span class="comment">//定义成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改成员方法，可以直接利用成员变量进行操作</span></span><br><span class="line">        <span class="comment">//省去了对配置文件的使用，降低了代码耦合度</span></span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在配置文件中声明要调用有参构造，并指定传入的对象在Spring容器中的ID(利用constructor-arg标签指定要传入的参数，name属性表示的是传入的对象命名，ref属性是传入参数在Spring容器中的ID)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="普通数据类型的注入"><a href="#普通数据类型的注入" class="headerlink" title="普通数据类型的注入"></a>普通数据类型的注入</h3><p>在使用中，我们除了可能注入Spring中已经定义的引用数据类型，也有可能需要注入普通类型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义普通数据类型的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot; : &quot;</span>+num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Leslie&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为此时注入的是普通数据类型，所以不需要通过ref属性指定ID，此时直接通过value属性将要注入的值传入</p>
<h3 id="集合数据类型的注入"><a href="#集合数据类型的注入" class="headerlink" title="集合数据类型的注入"></a>集合数据类型的注入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义集合数据类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; nameList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameList</span><span class="params">(List&lt;String&gt; nameList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameList = nameList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(nameList);</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是集合数据类型注入时配置文件的配置方式</p>
<p>可以看到List类型注入时只需要定义value标签即可，标签体内传注入的值</p>
<p>Map类型在注入时需要利用entry标签传入键和值，键和值都可以使用引用类型或普通类型，引用类型只需要在后面加“-ref”即可</p>
<p>properties类型注入时和Map类似，也需要传入键和值，但是键是通过key属性传入的，值是直接写在标签体中的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nameList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Ywrby<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jessica&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Peking&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Lere&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SJZ&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>测试用例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指定配置文件</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//通关配置文件与ID获取实例</span></span><br><span class="line">    UserDao dao= (UserDao) context.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    <span class="comment">//执行方法</span></span><br><span class="line">    dao.save();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">运行结果：</span></span><br><span class="line"><span class="comment">[Leslie, Ywrby]</span></span><br><span class="line"><span class="comment">&#123;1=User&#123;name=&#x27;Jessica&#x27;, addr=&#x27;Peking&#x27;&#125;, 2=User&#123;name=&#x27;Lere&#x27;, addr=&#x27;SJZ&#x27;&#125;&#125;</span></span><br><span class="line"><span class="comment">&#123;p1=value1, p2=value2&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>


<h1 id="其他配置文件的引入"><a href="#其他配置文件的引入" class="headerlink" title="其他配置文件的引入"></a>其他配置文件的引入</h1><p>实际开发过程中我们所需要的配置文件可能是十分巨大的，内容十分杂乱，如果都定义在一个配置文件中，可读性和复写性都大打折扣</p>
<p>这种情况下我们可以将配置文件进行按模块拆分，或其他方式进行拆分，只需要最后在主配置文件中利用import标签进行引入即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-user.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-userDao.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-userService.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>20-Listener监听器</title>
    <url>/2021/03/03/20-Listener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><h4 id="事件的监听机制"><a href="#事件的监听机制" class="headerlink" title="事件的监听机制"></a>事件的监听机制</h4><ul>
<li>事件：一件事务</li>
<li>事件源：事件发生地点</li>
<li>监听器：一个监听器对象</li>
<li>注册监听：将事件，事件源，监听器，绑定在一起，当事件源上某事件发生时，执行监听代码</li>
</ul>
<h3 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h3><p>监听ServletContext对象的创建和销毁</p>
<ul>
<li>void contextDestroyed(ServletContextEvent sce)：ServletContext对象被销毁前会调用该方法</li>
<li>void contextInitialized(ServletContextEvent sce)：ServletContext对象被创建时会调用该方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListerDemo1</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext对象被创建时会调用该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一般用于加载资源文件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ServletContext对象被销毁前会调用该方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletContextEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一般用于释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h3><ul>
<li>注解配置：直接在类前加上注解@WebListener即可</li>
<li>web.xml配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.ywrby.Listener.ListerDemo1<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>24-JSON</title>
    <url>/2021/03/03/24-JSON/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JavaScript 对象表示法（JavaScript Object Notation）。如今主要用于做存储和交换文本信息的语法。类似 XML。JSON 比 XML 更小、更快，更易解析。</p>
<p>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;employees&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Bill&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Gates&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;George&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Bush&quot;</span> &#125;,</span><br><span class="line">&#123; <span class="attr">&quot;firstName&quot;</span>:<span class="string">&quot;Thomas&quot;</span> , <span class="attr">&quot;lastName&quot;</span>:<span class="string">&quot;Carter&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSON语法"><a href="#JSON语法" class="headerlink" title="JSON语法"></a>JSON语法</h3><p>JSON 语法是 JavaScript 对象表示法语法的子集。</p>
<ul>
<li>数据在名称/值对中：JSON数据由键值对构成（键在书写时引号可省略）<ul>
<li>JSON 值可以是：数字（整数或浮点数），字符串（在双引号中），逻辑值（true 或 false），数组（在方括号中），对象（在花括号中）<br>null</li>
</ul>
</li>
<li>数据由逗号分隔（对于多个键值对）</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<h3 id="JSON值的获取"><a href="#JSON值的获取" class="headerlink" title="JSON值的获取"></a>JSON值的获取</h3><ul>
<li>json对象.键名 </li>
<li>json对象[“键名”]</li>
<li>数组对象[索引]</li>
</ul>
<p>注意：第一种获取方式键名不需要加引号，第二种获取方式需要加引号</p>
<h2 id="JSON数据与Java对象相互转换"><a href="#JSON数据与Java对象相互转换" class="headerlink" title="JSON数据与Java对象相互转换"></a>JSON数据与Java对象相互转换</h2><p>这种转换一般依赖于JSON解析器，常见的解析器有：Jsonlib,fastjson,Gson,jackson</p>
<h3 id="java对象转换为JSON数据"><a href="#java对象转换为JSON数据" class="headerlink" title="java对象转换为JSON数据"></a>java对象转换为JSON数据</h3><ol>
<li>导入响应jar包（jackson-annotations-2.9.9.jar，jackson-core-2.9.9.jar，jackson-databind-2.9.9.jar）</li>
<li>创建Jackson核心对象ObjectMapper</li>
<li>使用核心对象进行Java与JSON的转换</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jacksonTest1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建Person对象</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Person(<span class="string">&quot;Leslie&quot;</span>,<span class="number">23</span>,<span class="string">&quot;man&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Jackson的核心对象</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将对象转换为JSON格式</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 转换函数有</span></span><br><span class="line"><span class="comment">         * writeValue():接收两个参数，第一个参数表示转换后的处理方式，第二个参数是要转换的对象</span></span><br><span class="line"><span class="comment">         *     参数1：</span></span><br><span class="line"><span class="comment">         *          File：将对象转换为JSON字符串，转化后的字符串保存到对应文件中去</span></span><br><span class="line"><span class="comment">         *          Writer：将对象转换为JSON字符串，并将数据填充到指定的字符输出流中</span></span><br><span class="line"><span class="comment">         *          OutputStream：将对象转换为JSON字符串，并将数据填充到指定的字节输出流中</span></span><br><span class="line"><span class="comment">         * writeValueAsString():将对象直接转换为JSON字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String person=mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&quot;name&quot;:&quot;Leslie&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;man&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="两个注解"><a href="#两个注解" class="headerlink" title="两个注解"></a>两个注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span> <span class="comment">//表示转化为JSON数据时忽略该属性</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span> <span class="comment">//表示转化为Json时按照指定格式格式化该属性</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>

<h3 id="Json数据转换为Java对象"><a href="#Json数据转换为Java对象" class="headerlink" title="Json数据转换为Java对象"></a>Json数据转换为Java对象</h3><ol>
<li>导入响应jar包（jackson-annotations-2.9.9.jar，jackson-core-2.9.9.jar，jackson-databind-2.9.9.jar）</li>
<li>创建Jackson核心对象ObjectMapper</li>
<li>使用核心对象进行Java与JSON的转换</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jacksonTest2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建Jackson的核心对象</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//将数据转为Java对象</span></span><br><span class="line">        <span class="comment">//第一个参数表示Json数据，第二个参数表示要转化为的对象</span></span><br><span class="line">        <span class="comment">//初始化Json字符串</span></span><br><span class="line">        String json=<span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Leslie\&quot;,\&quot;age\&quot;:23,\&quot;gender\&quot;:\&quot;man\&quot;&#125;&quot;</span>;</span><br><span class="line">        Person person=mapper.readValue(json,Person.class);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person&#123;name=&#x27;Leslie&#x27;, age=23, gender=&#x27;man&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>23-Ajax</title>
    <url>/2021/03/03/23-Ajax/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>异步和同步: 客户端和服务器端相互通信的基础上</p>
<p>同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</p>
<p>异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</p>
<p>Ajax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用Ajax)如果需要更新内容，必须重载整个网页页面。提升用户的体验</p>
<h2 id="JS原生实现异步操作"><a href="#JS原生实现异步操作" class="headerlink" title="JS原生实现异步操作"></a>JS原生实现异步操作</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送异步请求</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建关键对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断浏览器版本，根据版本不同，初始化对象方式不同</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">            &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></span></span><br><span class="line"><span class="javascript">                xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">            &#123;<span class="comment">// code for IE6, IE5</span></span></span><br><span class="line"><span class="javascript">                xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//建立连接</span></span></span><br><span class="line">            /**</span><br><span class="line">             * 参数：</span><br><span class="line">             *     1. 请求方式：GET，POST</span><br><span class="line">             *        GET:请求在URL后面拼接，send方法传空参</span><br><span class="line">             *        POST:请求通过send方法传入，不在URL后拼接</span><br><span class="line">             *     2. 请求的URL</span><br><span class="line">             *     3. 是否采用异步请求</span><br><span class="line">             */</span><br><span class="line"><span class="javascript">            xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;AjaxServlet1?username=Tom&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送异步请求</span></span></span><br><span class="line">            xmlhttp.send();</span><br><span class="line"><span class="javascript">            <span class="comment">//接收并处理来自服务器的响应结果</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断xmlhttp对象的响应状态，处于就绪状态时再执行后续操作</span></span></span><br><span class="line"><span class="javascript">            xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//判断就绪状态是否为4，只有为4时才能获取响应结果</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//同时判断响应状态码是否为200，200表示相应成功</span></span></span><br><span class="line">                /**</span><br><span class="line">                 0: 请求未初始化</span><br><span class="line">                 1: 服务器连接已建立</span><br><span class="line">                 2: 请求已接收</span><br><span class="line">                 3: 请求处理中</span><br><span class="line">                 4: 请求已完成，且响应已就绪</span><br><span class="line">                 */</span><br><span class="line">                if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">                &#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">//xmlhttp.responseText用于获取响应结果</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> username=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//显示结果</span></span></span><br><span class="line">                    alert(username);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/AjaxServlet1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求参数</span></span><br><span class="line">        String username=request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">//打印参数</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//响应请求</span></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Hello :&quot;</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="jQuery实现异步操作"><a href="#jQuery实现异步操作" class="headerlink" title="jQuery实现异步操作"></a>jQuery实现异步操作</h2><h4 id="ajax-：通用操作"><a href="#ajax-：通用操作" class="headerlink" title="$.ajax()：通用操作"></a>$.ajax()：通用操作</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//通过jQuery实现异步操作</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用$.ajax()的方式发送异步请求</span></span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url:<span class="string">&quot;AjaxServlet1&quot;</span>,<span class="comment">//请求路径</span></span></span><br><span class="line"><span class="javascript">                type:<span class="string">&quot;POST&quot;</span>,<span class="comment">//请求方式</span></span></span><br><span class="line"><span class="javascript">                data:&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;Jack&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">23</span>&#125;,<span class="comment">//请求参数</span></span></span><br><span class="line"><span class="javascript">                success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                    alert(data);</span><br><span class="line"><span class="javascript">                &#125;<span class="comment">//响应成功后的回调函数</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="get-post-用来发送get或post请求"><a href="#get-post-用来发送get或post请求" class="headerlink" title="$.get() $.post() 用来发送get或post请求"></a>$.get() $.post() 用来发送get或post请求</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax异步请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//通过jQuery实现异步操作</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用$.get()的方式发送异步请求</span></span></span><br><span class="line"><span class="javascript">            $.get(<span class="string">&quot;AjaxServlet1&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;Leslie&quot;</span>&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                alert(data)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;异步请求&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;func()&quot;</span> <span class="attr">id</span>=<span class="string">&quot;b1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;in1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>25-Redis</title>
    <url>/2021/03/03/25-Redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>Redis是一款高性能的NoSQL系列的非关系型的数据库</p>
<p>关系型数据库一般多指数据之间存在关系，且将数据保存到硬盘上的数据库，例如MySQL等等。非关系型数据库是一个与之相对的概念，数据之间并不存在逻辑上的关系，且将数据存入内存而非硬盘中</p>
<p>Redis数据库将数据以键值对的形式存入内存</p>
<h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Redis存储的是键值对形式（KEY，VALUE）的数据，其中KEY始终是字符串，VALUE有五种可存储类型</p>
<ul>
<li>字符串类型string</li>
<li>哈希类型hash（可嵌套存储键值对）</li>
<li>列表类型list</li>
<li>集合类型set（键不可重复）</li>
<li>有序集合类型sortedset（自动排序）</li>
</ul>
<h2 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h2><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul>
<li>set key value:存储数据</li>
<li>get key:获取数据</li>
<li>del key:删除数据</li>
</ul>
<h3 id="哈希类型"><a href="#哈希类型" class="headerlink" title="哈希类型"></a>哈希类型</h3><ul>
<li>hset key filed value:存储数据</li>
<li>hget key filed:获取数据</li>
<li>hgetall key:获取全部哈希数据</li>
<li>hdel key field:删除指定数据</li>
</ul>
<h3 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h3><ul>
<li>lpush key value:从列表左侧插入元素（列表头部）</li>
<li>rpush key value:从列表右侧插入元素（列表尾部）</li>
<li>lrange key start end:获取范围内的元素</li>
<li>lpop key:删除列表左侧首元素并返回值</li>
<li>rpop key:删除列表右侧尾元素并返回值</li>
</ul>
<h3 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h3><ul>
<li>sadd key value:存储元素（键不可重复）</li>
<li>smembers key:获取set集合中所有元素</li>
<li>srem key value:删除集合中某个元素</li>
</ul>
<h3 id="有序集合类型（数据按照score排序）"><a href="#有序集合类型（数据按照score排序）" class="headerlink" title="有序集合类型（数据按照score排序）"></a>有序集合类型（数据按照score排序）</h3><ul>
<li>zadd key score value:存储数据 </li>
<li>zrange key start end:获取指定范围内的元素</li>
<li>zren key value:删除指定元素</li>
</ul>
<h3 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h3><ul>
<li>keys * :获取所有键名</li>
<li>type key:获取对应键所存储的数据种类</li>
<li>del key:删除指定数据</li>
</ul>
<h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>redis是一个内存数据库，当服务器重启或者电脑重启，都会导致数据库中数据的丢失，此时就需要通过设置redis持久化进行解决。redis有两种持久化方案，分别是RDB与AOF</p>
<h3 id="RDB持久化方式"><a href="#RDB持久化方式" class="headerlink" title="RDB持久化方式"></a>RDB持久化方式</h3><p>在一定的时间间隔中，检验key的变化情况，然后持久化数据</p>
<p>是redis默认的持久化方式，不需要进行配置，默认情况下就采用这种持久化方式</p>
<p>要更改相关的配置需要修改配置文件redis.windows.conf中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line">#</span><br><span class="line"># Save the DB on disk:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line">#</span><br><span class="line">#   In the example below the behaviour will be to save:</span><br><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">#   after 60 sec if at least 10000 keys changed</span><br><span class="line">#</span><br><span class="line">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span><br><span class="line">#</span><br><span class="line">#   It is also possible to remove all the previously configured save</span><br><span class="line">#   points by adding a save directive with a single empty string argument</span><br><span class="line">#   like in the following example:</span><br><span class="line">#</span><br><span class="line">#   save &quot;&quot;</span><br><span class="line"></span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure>

<p>“save 900 1”表示没过900秒有超过1个key被修改就进行持久化操作，同理”save 60 10000”表示没过60秒超过10000个key变化就进行持久化操作</p>
<p>修改文件后不能通过直接打开可执行程序的方式打开服务器端，需要通过命令行启动服务器端才能实现修改（在服务器文件路径下打开CMD窗口输入文件名启动服务器端）</p>
<h3 id="AOF持久化方式"><a href="#AOF持久化方式" class="headerlink" title="AOF持久化方式"></a>AOF持久化方式</h3><p>采用直接记录日志的方式，可以在每一次命令操作后持久化数据</p>
<p>使用AOF进行持久化操作的方式是编辑配置文件redis.windows.conf，将appendonly no 修改为appendonly yes（表示开启AOF持久化）</p>
<p>AOF持久化有三种可以选择的持久化方案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendfsync always  &#x2F;&#x2F;每次命令操作都进行持久化</span><br><span class="line">appendfsync everysec  &#x2F;&#x2F;每隔一秒进行一次持久化操作</span><br><span class="line">appendfsync no   &#x2F;&#x2F;不进行持久化操作</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>3-DOM</title>
    <url>/2021/03/03/3-DOM/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM(Document Object Model)"></a>DOM(Document Object Model)</h1><h4 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h4><hr>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>将标记语言文档（HTML,XML…）的各个部分，封装为对象，可以使用这些对象，对标记语言文档进行CRUD动态操作</p>
<p>W3C 文档对象模型 （DOM）是中立于平台和语言的接口，它允许程序和脚本动态地访问和更新文档的内容、结构和样式。”W3C DOM标准被分为 3 个不同的部分</p>
<ul>
<li>核心DOM-针对任何结构化文档的标准模型<ul>
<li><strong>Document</strong>：文档对象</li>
<li><strong>Element</strong>：元素对象</li>
<li>Attribute：属性对象</li>
<li>Text：文本对象</li>
<li>Comment：注释对象</li>
<li><strong>Node</strong>：节点对象，是其他5个对象的父对象</li>
</ul>
</li>
<li>XML DOM - 针对 XML 文档的标准模型</li>
<li>HTML DOM - 针对 HTML 文档的标准模型</li>
</ul>
<h4 id="HTML-DOM-树"><a href="#HTML-DOM-树" class="headerlink" title="HTML DOM 树"></a>HTML DOM 树</h4><p><img src="https://note.youdao.com/yws/res/27632/BF5CDA32E4A74808A1DAD09A903A3AF4" alt="htmlDom"></p>
<hr>
<h3 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h3><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><ul>
<li>window.document</li>
<li>document</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><strong>获取Element对象</strong></p>
<ul>
<li>getElementById()    查找具有指定的唯一 ID 的元素。</li>
<li>getElementsByTagName()    返回所有具有指定名称的元素节点。</li>
<li>getElementByClassName 根据Class属性值获取元素对象数组并返回</li>
<li>getElementByName() 根据name属性值获取元素对象数组并返回</li>
</ul>
<p><strong>创建其他DOM对象</strong></p>
<ul>
<li>createAttribute(name)    创建拥有指定名称的属性节点，并返回新的 Attr 对象。</li>
<li>createComment()    创建注释节点。</li>
<li>createElement()    创建元素节点。</li>
<li>createTextNode()    创建文本节点。</li>
</ul>
<h3 id="Element元素对象"><a href="#Element元素对象" class="headerlink" title="Element元素对象"></a>Element元素对象</h3><p>通过document获取和创建</p>
<h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><ul>
<li>removeAttribute()    删除指定的属性。</li>
<li>setAttribute()    添加新属性。</li>
</ul>
<h3 id="Node节点对象"><a href="#Node节点对象" class="headerlink" title="Node节点对象"></a>Node节点对象</h3><p>节点对象代表文档树中的一个节点。节点可以是元素节点、属性节点、文本节点，或者也可以是任何一种节点。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>虽然所有的对象均能继承用于处理父节点和子节点的属性和方法，但是并不是所有的对象都拥有父节点或子节点。例如，文本节点不能拥有子节点，所以向类似的节点添加子节点就会导致 DOM 错误。</p>
<h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><p><strong>对DOM数进行增删改查</strong></p>
<ul>
<li>appendChild()    向节点的子节点列表的结尾添加新的子节点。</li>
<li>removeChild()    删除（并返回）当前节点的指定子节点。</li>
<li>replaceChild()    用新节点替换一个子节点。</li>
</ul>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul>
<li>parentNode    返回节点的父节点。</li>
</ul>
<p>以上方法和属性虽然都是介绍的Node节点，但由于Node节点是其他五种对象的父对象，所以其他几种对象都可以使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #div1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #div2&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        #div3&#123;</span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除内部的div2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">            div2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        div1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--在href中填入#或javascript:void(0);都可以使超链接对象不跳转，只保留点击效果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;del&quot;</span>&gt;</span>删除子节点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span>添加子节点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> del=<span class="built_in">document</span>.getElementById(<span class="string">&quot;del&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert=<span class="built_in">document</span>.getElementById(<span class="string">&quot;insert&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//删除div1内部的div2</span></span></span><br><span class="line"><span class="javascript">        del.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            div1.removeChild(div2);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//向div1内部添加子节点div3</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div3=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);  <span class="comment">//创建子节点</span></span></span><br><span class="line"><span class="javascript">        div3.setAttribute(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;div3&quot;</span>)  <span class="comment">//设置节点ID属性，再在CSS中设置节点其他样式</span></span></span><br><span class="line"><span class="javascript">        insert.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">            div1.appendChild(div3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="实例：动态表格（插入-删除）"><a href="#实例：动态表格（插入-删除）" class="headerlink" title="实例：动态表格（插入/删除）"></a>实例：动态表格（插入/删除）</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入ID&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in_btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;stu_table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学术信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jessica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>woman<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作实现</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert_btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;in_btn&quot;</span>);  <span class="comment">//获取插入按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">&quot;stu_table&quot;</span>);  <span class="comment">//获取表格对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//插入按钮操作</span></span></span><br><span class="line"><span class="javascript">        insert_btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取输入框中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementById(<span class="string">&quot;sex&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建ID的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_id=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);  <span class="comment">//创建节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_id=<span class="built_in">document</span>.createTextNode(num);  <span class="comment">//创建文本子节点</span></span></span><br><span class="line"><span class="javascript">            td_id.appendChild(text_id);  <span class="comment">//插入子节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建姓名的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_name=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_name=<span class="built_in">document</span>.createTextNode(name);</span></span><br><span class="line">            td_name.appendChild(text_name);</span><br><span class="line"><span class="javascript">            <span class="comment">//创建性别的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_sex=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_sex=<span class="built_in">document</span>.createTextNode(sex);</span></span><br><span class="line">            td_sex.appendChild(text_sex);</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//创建删除按钮的td节点</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> td_delete=<span class="built_in">document</span>.createElement(<span class="string">&quot;td&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> del=<span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);  <span class="comment">//创建超链接类型的子节点</span></span></span><br><span class="line"><span class="javascript">            del.href=<span class="string">&quot;#&quot;</span>;  <span class="comment">//定义跳转链接为#，使a标签只具备点击效果，没有跳转效果</span></span></span><br><span class="line"><span class="javascript">            del.setAttribute(<span class="string">&quot;onclick&quot;</span>,<span class="string">&quot;delTr(this)&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> text_del=<span class="built_in">document</span>.createTextNode(<span class="string">&quot;删除&quot;</span>);  </span></span><br><span class="line"><span class="javascript">            del.appendChild(text_del);  <span class="comment">//插入删除的文本子节点</span></span></span><br><span class="line"><span class="javascript">            td_delete.appendChild(del);  <span class="comment">//向td节点中插入超链接子节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tr_stu=<span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);  <span class="comment">//创建tr类型节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//逐个插入四个子节点</span></span></span><br><span class="line">            tr_stu.appendChild(td_id);  </span><br><span class="line">            tr_stu.appendChild(td_name);</span><br><span class="line">            tr_stu.appendChild(td_sex);</span><br><span class="line">            tr_stu.appendChild(td_delete);</span><br><span class="line"><span class="javascript">            <span class="comment">//向表格中插入tr子节点</span></span></span><br><span class="line">            table.appendChild(tr_stu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//定义删除函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delTr</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> stuTr=obj.parentNode.parentNode;  <span class="comment">//通过链接节点获取当前信息栏对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> table=stuTr.parentNode;    <span class="comment">//通过当前栏对象获取table对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            table.removeChild(stuTr);  <span class="comment">//删除指定子节点</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li>标签体的设置和获取：innerHTML</li>
<li>使用html元素对象的属性</li>
<li>控制样式</li>
</ul>
<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>innerHTML 属性设置或返回表格行的开始和结束标签之间的 HTML。</p>
<h4 id="使用innerHTML简化之前的动态表格实例"><a href="#使用innerHTML简化之前的动态表格实例" class="headerlink" title="使用innerHTML简化之前的动态表格实例"></a>使用innerHTML简化之前的动态表格实例</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dynamicTable<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">td</span>,<span class="selector-tag">th</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入ID&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> <span class="attr">id</span>=<span class="string">&quot;in_btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;stu_table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学术信息表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>John<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>man<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Jessica<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>woman<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;delTr(this)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//添加操作实现</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> insert_btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;in_btn&quot;</span>);  <span class="comment">//获取插入按钮</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> table=<span class="built_in">document</span>.getElementById(<span class="string">&quot;stu_table&quot;</span>);  <span class="comment">//获取表格对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//插入按钮操作</span></span></span><br><span class="line"><span class="javascript">        insert_btn.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取输入框中的值</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> num=<span class="built_in">document</span>.getElementById(<span class="string">&quot;num&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> name=<span class="built_in">document</span>.getElementById(<span class="string">&quot;name&quot;</span>).value</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> sex=<span class="built_in">document</span>.getElementById(<span class="string">&quot;sex&quot;</span>).value;</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tr_stu=<span class="built_in">document</span>.createElement(<span class="string">&quot;tr&quot;</span>);  <span class="comment">//创建tr类型节点</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//使用innerHTML向tr中追加标签</span></span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML=<span class="string">&quot;&lt;td&gt;&quot;</span>+num+<span class="string">&quot;&lt;/td&gt;&quot;</span>;  <span class="comment">//这里只是展示=是直接赋值，+=可以实现追加</span></span></span><br><span class="line"><span class="javascript">                                                  <span class="comment">//实际上这四行完全可以放到一行代码（只调用一次innerHTML）</span></span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML+=<span class="string">&quot;&lt;td&gt;&quot;</span>+name+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="javascript">            tr_stu.innerHTML+=<span class="string">&quot;&lt;td&gt;&quot;</span>+sex+<span class="string">&quot;&lt;/td&gt;&quot;</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            tr_stu.innerHTML+=&quot;<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;#&#x27;</span> <span class="attr">onclick</span>=<span class="string">&#x27;delTr(this)&#x27;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//向表格中插入tr子节点</span></span></span><br><span class="line">            table.appendChild(tr_stu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//定义删除函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">delTr</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> stuTr=obj.parentNode.parentNode;  <span class="comment">//通过链接节点获取当前信息栏对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> table=stuTr.parentNode;    <span class="comment">//通过当前栏对象获取table对象</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            table.removeChild(stuTr);  <span class="comment">//删除指定子节点</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="控制元素样式"><a href="#控制元素样式" class="headerlink" title="控制元素样式"></a>控制元素样式</h3><h4 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .d1&#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">        div1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">        div2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置样式方式1</span></span></span><br><span class="line"><span class="javascript">            div1.style.border=<span class="string">&quot;1px solid red&quot;</span>;</span></span><br><span class="line"><span class="javascript">            div1.style.width=<span class="string">&quot;200px&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//类似font-size这种样式的设置方式与命名方式如下</span></span></span><br><span class="line"><span class="javascript">            div1.style.fontSize=<span class="string">&quot;30px&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> div2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div2.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//设置样式方式2</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//提前定义好类选择器样式，通过元素的className属性来设置其class属性</span></span></span><br><span class="line"><span class="javascript">            div2.className=<span class="string">&quot;d1&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>某些组件（事件源）被执行了某些操作（事件）后，触发某些代码（监听器）执行</p>
<h4 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h4><p>某些操作，如单击，双击，鼠标移动，键盘操作等</p>
<h4 id="事件源"><a href="#事件源" class="headerlink" title="事件源"></a>事件源</h4><p>被监听的组件，如文本输入框，按钮等</p>
<h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><p>一段代码</p>
<h4 id="注册监听"><a href="#注册监听" class="headerlink" title="注册监听"></a>注册监听</h4><p>将事件，事件源和监听器绑定在一起</p>
<h4 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h4><ul>
<li>点击事件<ul>
<li>onclick    当用户点击某个对象时调用的事件句柄。</li>
<li>ondblclick 当用户双击某个对象时调用的事件句柄。</li>
</ul>
</li>
<li>焦点事件<ul>
<li>onblur    元素失去焦点。</li>
<li>onfocus    元素获得焦点。</li>
</ul>
</li>
<li>加载事件<ul>
<li>onload    一张页面或一幅图像完成加载。</li>
</ul>
</li>
<li>鼠标事件<ul>
<li>onmousedown    鼠标按钮被按下。</li>
<li>onmousemove    鼠标被移动。</li>
<li>onmouseout    鼠标从某元素移开。</li>
<li>onmouseover    鼠标移到某元素之上。</li>
<li>onmouseup    鼠标按键被松开。</li>
</ul>
</li>
<li>键盘事件<ul>
<li>onkeydown    某个键盘按键被按下。</li>
<li>onkeypress    某个键盘按键被按下并松开。</li>
<li>onkeyup    某个键盘按键被松开。</li>
</ul>
</li>
<li>选中和改变<ul>
<li>onchange    域的内容被改变。</li>
<li>onselect    文本被选中。</li>
</ul>
</li>
<li>表单事件<ul>
<li>onsubmit    确认按钮被点击。</li>
<li>onreset    重置按钮被点击。</li>
</ul>
</li>
</ul>
<p><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">演示网址</a></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>26-Jedis</title>
    <url>/2021/03/03/26-Jedis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h4 id="Jedis-是-Redis-官方首选的-Java-客户端开发包。"><a href="#Jedis-是-Redis-官方首选的-Java-客户端开发包。" class="headerlink" title="Jedis 是 Redis 官方首选的 Java 客户端开发包。"></a>Jedis 是 Redis 官方首选的 Java 客户端开发包。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Jedis测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Jedis jedis=<span class="keyword">new</span> Jedis(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        String name=jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Jedis中各个方法名与Redis中完全一致</p>
<h4 id="Jedis中的特殊方法"><a href="#Jedis中的特殊方法" class="headerlink" title="Jedis中的特殊方法"></a>Jedis中的特殊方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//保存数据并在规定时间后删除</span></span><br><span class="line">jedis.setex(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>,<span class="string">&quot;17&quot;</span>); <span class="comment">//存入age:17键值对并在10秒后删除</span></span><br></pre></td></tr></table></figure>

<h2 id="Jedis连接池：JedisPool"><a href="#Jedis连接池：JedisPool" class="headerlink" title="Jedis连接池：JedisPool"></a>Jedis连接池：JedisPool</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建连接池配置对象用于修改默认配置</span></span><br><span class="line">    JedisPoolConfig config=<span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxIdle(<span class="number">10</span>); <span class="comment">//最大空闲连接</span></span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>); <span class="comment">//最大连接数</span></span><br><span class="line">    <span class="comment">//获取连接池对象</span></span><br><span class="line">    JedisPool pool=<span class="keyword">new</span> JedisPool(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//通过连接池获取Jedis连接</span></span><br><span class="line">    Jedis jedis=pool.getResource();</span><br><span class="line">    <span class="comment">//执行操作</span></span><br><span class="line">    jedis.set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭(此时只是归还Jedis对象给连接池)</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>3-多线程安全问题，线程同步</title>
    <url>/2021/03/03/3-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%EF%BC%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>指的是多个线程操作同一个共享资源的时候可能会出现的线程安全问题</p>
<h2 id="银行取钱问题"><a href="#银行取钱问题" class="headerlink" title="银行取钱问题"></a>银行取钱问题</h2><p>多个用户同时操作一个银行账户进行取钱操作，账户内余额为1000元，每个账户同时取出1000元，由于线程执行的随机性就会导致线程安全问题的产生</p>
<h3 id="银行账户类"><a href="#银行账户类" class="headerlink" title="银行账户类"></a>银行账户类</h3><h4 id="定义账户内容，定义取钱方法"><a href="#定义账户内容，定义取钱方法" class="headerlink" title="定义账户内容，定义取钱方法"></a>定义账户内容，定义取钱方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义取钱过程，所有操作这个账户的人都会取走账户中的m元钱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断取钱的用户</span></span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line">        <span class="comment">//判断余额是否充足</span></span><br><span class="line">        <span class="keyword">if</span>(Money&gt;=m)&#123;</span><br><span class="line">            <span class="comment">//输出取钱结果</span></span><br><span class="line">            System.out.println(name+<span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span>+m+<span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//更新账户余额</span></span><br><span class="line">            Money-=m;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//余额不足，取钱失败</span></span><br><span class="line">            System.out.println(name+<span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;用户结束操作，余额&quot;</span>+Money+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程类"><a href="#线程类" class="headerlink" title="线程类"></a>线程类</h3><h4 id="（执行取钱操作）"><a href="#（执行取钱操作）" class="headerlink" title="（执行取钱操作）"></a>（执行取钱操作）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将取钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行取钱操作，每个用户取1000元</span></span><br><span class="line">        acc.DrawMoney(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="开始执行"><a href="#开始执行" class="headerlink" title="开始执行"></a>开始执行</h3><h4 id="多用户共同取钱"><a href="#多用户共同取钱" class="headerlink" title="多用户共同取钱"></a>多用户共同取钱</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个允许共享的银行账户（可能会有多人同时使用）</span></span><br><span class="line">        Account acc = <span class="keyword">new</span> Account(<span class="number">111</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//创建多个线程去银行账户中取钱（多个线程操作一个资源）</span></span><br><span class="line">        Thread user1 = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;user1&quot;</span>);</span><br><span class="line">        user1.start();</span><br><span class="line">        Thread user2 = <span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        user2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><h4 id="违反了正常取钱过程，存在严重安全问题"><a href="#违反了正常取钱过程，存在严重安全问题" class="headerlink" title="违反了正常取钱过程，存在严重安全问题"></a>违反了正常取钱过程，存在严重安全问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">user2用户结束操作，余额-<span class="number">1000.0</span>元</span><br></pre></td></tr></table></figure>


<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><h3 id="也称同步代码块"><a href="#也称同步代码块" class="headerlink" title="也称同步代码块"></a>也称同步代码块</h3><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>为了更好的解决线程安全问题的方案</p>
<h2 id="线程同步解决线程安全问题的核心思想"><a href="#线程同步解决线程安全问题的核心思想" class="headerlink" title="线程同步解决线程安全问题的核心思想"></a>线程同步解决线程安全问题的核心思想</h2><p>让多个线程实现先后依次访问共享资源，这样就解决了安全问题</p>
<h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>将共享资源上锁，每次只能一个线程进入访问完毕之后，其他线程才能进来</p>
<h2 id="三种同步（上锁）方式"><a href="#三种同步（上锁）方式" class="headerlink" title="三种同步（上锁）方式"></a>三种同步（上锁）方式</h2><ol>
<li>同步代码块</li>
<li>同步方法</li>
<li>Lock显式锁</li>
</ol>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>将出现线程安全问题的核心代码上锁，每次只允许一个线程进入，执行完毕之后自动解锁，其他线程才能进来执行</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">    <span class="comment">// 访问共享资源的核心代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="锁对象"><a href="#锁对象" class="headerlink" title="锁对象"></a>锁对象</h4><p>理论上可以是任意的“唯一”对象即可</p>
<h4 id="原则上"><a href="#原则上" class="headerlink" title="原则上"></a>原则上</h4><p>锁对象建议使用共享资源  </p>
<pre><code>- 在实例方法中建议使用this作为锁对象，此时this正好是共享资源（使用前提代码必须高度面向对象）
- 在静态方法中建议使用**类名.class**字节码作为锁对象
</code></pre>
<h4 id="将上文中的取款行为进行上锁操作"><a href="#将上文中的取款行为进行上锁操作" class="headerlink" title="将上文中的取款行为进行上锁操作"></a>将上文中的取款行为进行上锁操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//判断取钱的用户</span></span><br><span class="line">    String name =Thread.currentThread().getName();</span><br><span class="line">    <span class="comment">//判断余额是否充足</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将取款行为上锁(使用this表示锁住的对象是当前账户)</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">            <span class="comment">//输出取钱结果</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">            <span class="comment">//更新账户余额</span></span><br><span class="line">            Money -= m;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//余额不足，取钱失败</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="上锁后的运行结果"><a href="#上锁后的运行结果" class="headerlink" title="上锁后的运行结果"></a>上锁后的运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">user1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">user2用户执行取钱操作，余额不足，支付失败！</span><br><span class="line">user2用户结束操作，余额<span class="number">0.0</span>元</span><br></pre></td></tr></table></figure>

<h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>把出现线程安全问题的和新方法锁起来，每次只允许一个线程进入访问，其他线程必须在方法外面等待</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>直接给方法加上修饰符synchronized</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>同步方法的原理和同步代码块的底层原理其实是完全一样的，只是同步方法是把整个方法的代码都锁起来的。</p>
<p>同步方法的底层也是有锁对象的：</p>
<ul>
<li>在实例方法中默认使用this作为锁对象</li>
<li>在静态方法中默认使用<strong>类名.class</strong>字节码作为锁对象</li>
</ul>
<h2 id="Lock显式锁"><a href="#Lock显式锁" class="headerlink" title="Lock显式锁"></a>Lock显式锁</h2><p>java.util.current.locks.lock机制提供了比synchronized代码块和synchronized同步方法更广泛的锁定操作</p>
<p>二者具有的功能Lock都有，除此之外功能更加强大</p>
<h3 id="Lock锁也称同步锁"><a href="#Lock锁也称同步锁" class="headerlink" title="Lock锁也称同步锁"></a>Lock锁也称同步锁</h3><p>其将加锁与释放锁的过程方法化了，如下：</p>
<ul>
<li>加锁：public void lock()</li>
<li>释放锁：public void unlock()</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line">    <span class="comment">//在账户中创建锁对象</span></span><br><span class="line">    <span class="comment">//由于账户对象对于某个调用者是唯一的，所以锁对象对于某个调用者也是唯一的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock=<span class="keyword">new</span> ReentrantLock();  <span class="comment">//加上final关键字是防止锁的唯一性被破坏，不加一般也可以正常运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        lock.lock();  <span class="comment">//上锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money -= m;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();   <span class="comment">//解锁    </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 在这里将整个执行代码放到try...catch结构里的原因是避免锁死的现象产生</span></span><br><span class="line"><span class="comment">        * 如果不用try...catch直接将解锁放到顺序执行的代码中，一旦代码报错程序中止运行</span></span><br><span class="line"><span class="comment">        * 就会导致解锁代码无法执行，对象被锁死</span></span><br><span class="line"><span class="comment">        * 所以采用try...catch并将解锁代码放到一定执行的finally中就可以避免这种情况</span></span><br><span class="line"><span class="comment">        * 即使报错，解锁行为也会正常运行</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>线程安全的程序，性能差</li>
<li>线程不安全的程序，性能较好。在开发中假如并不会存在多线程安全问题，一般采用线程不安全的设计</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>3-注解</title>
    <url>/2021/03/03/3-%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><blockquote>
<p>从JDK5开始,Java增加对元数据的支持，也就是注解，注解是一种代码级别的说明。注解与注释是有一定区别的，可以把注解理解为代码里的特殊标记，这些标记可以在编译，类加载，运行时被读取，并执行相应的处理。通过注解开发人员可以在不改变原有代码和逻辑的情况下在源代码中嵌入补充信息。</p>
</blockquote>
<h3 id="作用分类"><a href="#作用分类" class="headerlink" title="作用分类"></a>作用分类</h3><ul>
<li>编写文档：通过代码里标识的注解生成doc文档</li>
<li>代码分析：通过代码里标识的注解进行代码分析（使用反射）</li>
<li>编译检查：通过代码里标识的注解对代码进行基本的编译检查</li>
</ul>
<h2 id="JDK内置注解"><a href="#JDK内置注解" class="headerlink" title="JDK内置注解"></a>JDK内置注解</h2><ul>
<li>@Override： 检测被注解的方法是否继承自父类/父接口，不是则报错</li>
<li>@Deprecated： 将该注解标注的内容标识为已过时的内容</li>
<li>@SuppressWarnings： 压制警告， 指示编译器去忽略注解中声明的警告。（一般传递参数”all”压制所有警告）</li>
<li>@SafeVarargs：  Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>
<li>@FunctionalInterface：   Java 8 开始支持，标识一个匿名函数或函数式接口。</li>
</ul>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解的格式</span></span><br><span class="line"></span><br><span class="line">元注解...</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称()&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="注解的本质"><a href="#注解的本质" class="headerlink" title="注解的本质"></a>注解的本质</h3><p>注解本质就是一个接口，该接口默认继承java.lang.annotation.Annotation接口</p>
<p>下面的内容就是通过将<code>public @interface MyAnnotation &#123; &#125;</code>经过编译与反编译后重新得到的Java文件，可以清楚的看到注解的本质</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyAnnotation</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">annotation</span>.<span class="title">Annotation</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>编译与反编译的过程</strong><br><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%9C%AC%E8%B4%A8.jpg" alt="注解的本质"></p>
<h3 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h3><p>在注解接口中定义的抽象的成员方法</p>
<h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>属性的返回值类型只能是下列取值：</p>
<ul>
<li>基本数据类型</li>
<li>String类</li>
<li>枚举</li>
<li>注解</li>
<li>以上类型的数组</li>
</ul>
<p>定义属性后，在使用时需要给属性赋值（或者在定义时利用default()传入默认值）</p>
<p>如果只有一个属性需要赋值，且属性名为value，则value可以省略，直接传入值即可</p>
<p>数组赋值时，使用大括号{}包裹值，如果数组中只有一个值，大括号可以省略</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>用于描述注解的注解</p>
<ul>
<li>@Target：描述注解能够作用的位置（ElementType常见取值：TYPE表示能够作用于类上，METHOD表示能够作用于方法上，FIELD表示能够作用于成员变量上）</li>
<li>@Retention：描述注解被保留的阶段（Java代码的三个阶段SOURCE：源代码阶段，CLASS：类对象阶段，RUNTIME：运行时阶段）　一般情况下自定义注解都选择运行时阶段</li>
<li>@Documented：描述注解是否被抽取到API文档中</li>
<li>@Inherited：描述注解是否被子类继承</li>
</ul>
<h2 id="在程序中使用（解析）注解"><a href="#在程序中使用（解析）注解" class="headerlink" title="在程序中使用（解析）注解"></a>在程序中使用（解析）注解</h2><h3 id="获取注解中定义的属性值"><a href="#获取注解中定义的属性值" class="headerlink" title="获取注解中定义的属性值"></a>获取注解中定义的属性值</h3><p>首先获取注解定义位置的对象，因为注解可以定义在类，方法或成员变量上，所以需要获取对应变量，例如：注解定义在类上，就需要获取该类对象，然后通过类对象的getAnnotation方法获取到指定的注解，随后只需要调用注解的属性值（抽象方法）即可获取到我们所配置的属性值</p>
<h4 id="定义注解："><a href="#定义注解：" class="headerlink" title="定义注解："></a>定义注解：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述需要执行的类名和方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Pro &#123;</span><br><span class="line">    <span class="function">String <span class="title">className</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">methodName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调用注解并获取属性值"><a href="#调用注解并获取属性值" class="headerlink" title="调用注解并获取属性值"></a>调用注解并获取属性值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pro(className = &quot;cn.ywrby.domain.Person&quot;,methodName = &quot;MessageOfPerson&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析注解</span></span><br><span class="line">        <span class="comment">//获取本类的字节码文件对象</span></span><br><span class="line">        Class&lt;ReflectTest2&gt; MyCls=ReflectTest2.class;</span><br><span class="line">        <span class="comment">//获取本类指定的注解</span></span><br><span class="line">        <span class="comment">//其实就是在内存中生成一个该注解接口的子类实现对象，该子类复写了注解的属性，返回值就是我们定义注解时传入的值</span></span><br><span class="line">        Pro annotation=MyCls.getAnnotation(Pro.class);</span><br><span class="line">        <span class="comment">//调用注解对象中定义的抽象方法（属性）,获取返回值</span></span><br><span class="line">        String className=annotation.className();</span><br><span class="line">        String methodName=annotation.methodName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载该类进内存，并且创建对象</span></span><br><span class="line">        Class cls=Class.forName(className);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Object object=cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//获取方法对象</span></span><br><span class="line">        Method method=cls.getMethod(methodName);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        method.invoke(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="简单案例：完成一个简单的测试框架"><a href="#简单案例：完成一个简单的测试框架" class="headerlink" title="简单案例：完成一个简单的测试框架"></a>简单案例：完成一个简单的测试框架</h2><h4 id="自定义注解-1"><a href="#自定义注解-1" class="headerlink" title="自定义注解"></a>自定义注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+0=&quot;</span>+(<span class="number">1</span>+<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-0=&quot;</span>+(<span class="number">1</span>-<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1*0=&quot;</span>+(<span class="number">1</span>*<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Check</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">div</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1/0=&quot;</span>+(<span class="number">1</span>/<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ignore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;永不报错，不被检查&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的测试框架</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 主方法执行后，自动检测所有加上<span class="doctag">@Check</span>注解的方法，判断方法有无异常，并记录在文件中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> errorNum=<span class="number">0</span>;   <span class="comment">//出现异常的次数</span></span><br><span class="line">        BufferedWriter bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;bug.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Calculator2对象</span></span><br><span class="line">        Calculator2 cal=<span class="keyword">new</span> Calculator2();</span><br><span class="line">        <span class="comment">//获取字节码文件对象</span></span><br><span class="line">        Class&lt;Calculator2&gt; cls=Calculator2.class;</span><br><span class="line">        <span class="comment">//获取所有方法</span></span><br><span class="line">        Method[] methods=cls.getMethods();</span><br><span class="line">        <span class="comment">//判断是否有@Check注解</span></span><br><span class="line">        <span class="keyword">for</span>(Method method:methods)&#123;</span><br><span class="line">            <span class="comment">//isAnnotationPresent方法判断当前方法上是否有指定的注解</span></span><br><span class="line">            <span class="keyword">if</span>(method.isAnnotationPresent(Check.class))&#123;</span><br><span class="line">                <span class="comment">//存在则执行方法，不存在则不执行该方法</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(cal);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">//发现异常，捕获异常并记录在文件中</span></span><br><span class="line">                    errorNum+=<span class="number">1</span>;</span><br><span class="line">                    bw.write(method.getName()+<span class="string">&quot;方法出现异常！&quot;</span>);</span><br><span class="line">                    bw.newLine(); <span class="comment">//换行</span></span><br><span class="line">                    bw.write(<span class="string">&quot;异常的名称：&quot;</span>+e.getCause().getClass().getSimpleName()); <span class="comment">//获取异常的简短名称</span></span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;异常的原因&quot;</span>+e.getCause().getMessage());</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                    bw.write(<span class="string">&quot;--------------------------------------&quot;</span>);</span><br><span class="line">                    bw.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bw.write(<span class="string">&quot;本次一共出现&quot;</span>+errorNum+<span class="string">&quot;个异常&quot;</span>);</span><br><span class="line">        bw.flush();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;窗口显示结果</span><br><span class="line">1+0&#x3D;1</span><br><span class="line">1-0&#x3D;1</span><br><span class="line">1*0&#x3D;0</span><br><span class="line">&#x2F;&#x2F;bug.txt文件中显示内容</span><br><span class="line">div方法出现异常！</span><br><span class="line">异常的名称：ArithmeticException</span><br><span class="line">异常的原因&#x2F; by zero</span><br><span class="line">--------------------------------------</span><br><span class="line">本次一共出现1个异常</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li>以后大部分情境下，我们是注解的使用者而不是自定义</li>
<li>注解的目的是给编译器或解析程序使用</li>
<li>注解不是程序的一部分，注解的存在更类似于标签的作用</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>4-JDBC</title>
    <url>/2021/03/03/4-JDBC/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDBC-Java数据库连接"><a href="#JDBC-Java数据库连接" class="headerlink" title="JDBC Java数据库连接"></a>JDBC Java数据库连接</h1><h3 id="Java-Database-Connectivity"><a href="#Java-Database-Connectivity" class="headerlink" title="(Java Database Connectivity)"></a>(Java Database Connectivity)</h3><h2 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h2><p>本质是sun公司制作的一套操作所有关系型数据库的规则，即接口。各个数据库厂商负责实现这些接口，提供响应的数据库驱动jar包，我们可以使用这套接口（JDBC）编程，最终真正执行的是数据库驱动jar包中的实现类</p>
<h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><ol>
<li>导入驱动jar包<ol>
<li>在项目中新建libs目录(和src同级)</li>
<li>将mysql-connector-java-8.0.20.jar复制到libs目录中</li>
<li>右键libs目录，将该目录添加到library(add as library)</li>
</ol>
</li>
<li>注册驱动</li>
<li>获取数据库连接对象Connection</li>
<li>定义sql</li>
<li>获取执行sql语句的对象statement</li>
<li>执行sql，接收返回结果</li>
<li>处理结果</li>
<li>释放资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        Connection connection= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/weixinNews&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;renboyu&quot;</span>);</span><br><span class="line">        <span class="comment">//定义sql语句</span></span><br><span class="line">        String sql=<span class="string">&quot;SELECT * FROM WEIBO WHERE TITLE LIKE &#x27;%韩国%&#x27;;&quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">        Statement statement=connection.createStatement();</span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        ResultSet set=statement.executeQuery(sql);</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="keyword">while</span> (set.next())&#123;</span><br><span class="line">            String title=set.getString(<span class="string">&quot;TITLE&quot;</span>);</span><br><span class="line">            System.out.println(title);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="更规范的流程"><a href="#更规范的流程" class="headerlink" title="更规范的流程"></a>更规范的流程</h4><p>（尽量避免直接抛出错误）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;insert into stuMess VALUES(null,&#x27;Leslie&#x27;,&#x27;CS&#x27;,&#x27;95&#x27;);&quot;</span>;</span><br><span class="line">            <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            connection= DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;renboyu010214&quot;</span>);</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            <span class="keyword">int</span> result=statement.executeUpdate(sql);</span><br><span class="line">            <span class="comment">//输出结果</span></span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源,由于可能出错导致没有成功获取数据库连接对象和Statement，所以要提前检验是否为空</span></span><br><span class="line">            <span class="keyword">if</span>(statement!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    statement.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    connection.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="各个对象详解"><a href="#各个对象详解" class="headerlink" title="各个对象详解"></a>各个对象详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><p>驱动管理对象 </p>
<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p><strong>注册驱动</strong></p>
<p>DriverManager提供registerDriver方法注册给定的驱动程序，而我们在上面代码中所写的<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>之所以能注册驱动，是因为将com.mysql.cj.jdbc.Driver加载进了内存，而com.mysql.cj.jdbc.Driver包内存在静态代码块，通过阅读源码可以找到该静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>仍然是通过调用DriverManager提供的registerDriver方法注册驱动程序，只是这种写法比调用方法更加简洁</p>
<p>不过，自5版本后，jar包会自动帮我们注册驱动，所以其实注册驱动步骤可以省略</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C%E9%A9%B1%E5%8A%A8.jpg" alt="自动注册驱动"></p>
<p><strong>获取数据库连接</strong></p>
<p>利用DriverManager的getConnection方法可以获取数据库连接，返回数据库连接对象</p>
<p>该方法接收三个参数，分别是</p>
<ul>
<li>url:指定连接路径，以MySQL为例：jdbc:mysql://ip地址(域名):端口号/数据库名称</li>
<li>user:用户名</li>
<li>password:密码</li>
</ul>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>数据库连接对象</p>
<h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><p><strong>获取执行sql语句的对象</strong></p>
<ul>
<li>Statement    createStatement()</li>
<li>PreparedStatement    prepareStatement(String sql)</li>
</ul>
<p><strong>管理事务</strong></p>
<ul>
<li>开启事务：void setAutoCommit​(boolean autoCommit)  调用该方法，设置参数为false，即可开启事务<ul>
<li>在执行sql语句之前开启事务</li>
</ul>
</li>
<li>提交事务：void commit()  <ul>
<li>在所有sql语句执行完后提交事务</li>
</ul>
</li>
<li>回滚事务：void rollback()<ul>
<li>在catch中回滚事务</li>
</ul>
</li>
</ul>
<h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>执行sql语句的对象</p>
<h4 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h4><p><strong>执行sql语句</strong></p>
<ul>
<li>boolean    execute(String sql) 执行任意的sql语句，不常用（返回值为执行的结果）</li>
<li>int executeUpdate​(String sql) 执行DML语句和DDL语句。返回值为影响的行数，可以作为判断执行成功与否的标准</li>
<li>ResultSet    executeQuery​(String sql) 执行DQL语句</li>
</ul>
<h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet"></a>ResultSet</h3><p>数据库结果集对象</p>
<ul>
<li>boolean next() 游标向下移动一行,返回值表示当前行是否是最后一行数据，如果是则返回false，所以可以用while循环遍历ResultSet</li>
<li>getString(),getInt,getDouble…   获取某一行中的数据，可以接收两种参数，整型参数表示数据的列数，字符串型数据表示列的名称</li>
</ul>
<h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><p>执行sql语句的对象</p>
<h4 id="sql注入问题"><a href="#sql注入问题" class="headerlink" title="sql注入问题"></a>sql注入问题</h4><p>在拼接sql时，有一些sql的特殊关键字参与字符串拼接，导致安全性问题。例如，下面代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName, password;</span><br><span class="line">String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =&#x27;&quot;</span>+userName+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>假如password处用户传入<code>a&#39; or &#39;a&#39;=&#39;a&#39;</code>。则整个sql语句变为了<code>SELECT * FROM loginMess where userName =&#39;userName&#39; and password=&#39;a&#39; or &#39;a&#39;=&#39;a&#39;;</code>则整个sql语句变为恒等句，用户始终可以登录成功</p>
<h4 id="可能发生sql诸如的代码"><a href="#可能发生sql诸如的代码" class="headerlink" title="可能发生sql诸如的代码"></a>可能发生sql诸如的代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录案例,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =&#x27;&quot;</span>+userName+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+password+<span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            ResultSet set=statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//遍历数据库表，获得所有用户对象</span></span><br><span class="line">            <span class="keyword">if</span> (set.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the username:&quot;</span>);</span><br><span class="line">        String userName=sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the password:&quot;</span>);</span><br><span class="line">        String password=sc.nextLine();</span><br><span class="line">        login(userName,password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>使用PreparedStatement对象来执行sql语句，PreparedStatement对象执行预编译的sql语句，所有参数使用“?”作为占位符。借此可解决sql诸如问题</p>
<h4 id="使用PreparedStatement后的流程"><a href="#使用PreparedStatement后的流程" class="headerlink" title="使用PreparedStatement后的流程"></a>使用PreparedStatement后的流程</h4><ol>
<li>导入驱动jar包</li>
<li>注册驱动</li>
<li>获取数据库连接对象Connection</li>
<li>定义sql<ul>
<li>注意：定义的sql语句中的所有变量用通配符?代替</li>
</ul>
</li>
<li>获取执行sql语句的对象PreparedStatement（需要传入sql语句）</li>
<li>给?赋值<ul>
<li>setInt,setDouble等等方法，第一个参数为通配符?的位置，第二个参数为传入的值</li>
</ul>
</li>
<li>执行sql，接收返回结果（PreparedStatement对象的执行方法不需要传入sql语句，因为已经在定义时传入了）</li>
<li>处理结果</li>
<li>释放资源（PreparedStatement和Statement一样也需要释放）</li>
</ol>
<h4 id="使用PreparedStatement修改后的登录代码"><a href="#使用PreparedStatement修改后的登录代码" class="headerlink" title="使用PreparedStatement修改后的登录代码"></a>使用PreparedStatement修改后的登录代码</h4><p>可以避免sql诸如问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录案例,使用PreparedStatement实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String userName,String password)</span></span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preSta=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet set=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句，所有变量用通配符?代替</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM loginMess where userName =? and password=?;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象PreparedStatement</span></span><br><span class="line">            preSta=connection.prepareStatement(sql);</span><br><span class="line">            <span class="comment">//给?赋值</span></span><br><span class="line">            preSta.setString(<span class="number">1</span>,userName);</span><br><span class="line">            preSta.setString(<span class="number">2</span>,password);</span><br><span class="line">            <span class="comment">//执行sql语句(不需要传参)</span></span><br><span class="line">            set=preSta.executeQuery();</span><br><span class="line">            <span class="comment">//遍历数据库表，获得所有用户对象</span></span><br><span class="line">            <span class="keyword">if</span> (set.next())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登陆失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(set,connection,preSta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the username:&quot;</span>);</span><br><span class="line">        String userName=sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;please input the password:&quot;</span>);</span><br><span class="line">        String password=sc.nextLine();</span><br><span class="line">        login(userName,password);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="定义JDBC工具类简化代码"><a href="#定义JDBC工具类简化代码" class="headerlink" title="定义JDBC工具类简化代码"></a>定义JDBC工具类简化代码</h2><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个静态遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态代码块，只在创建时调用一次</span></span><br><span class="line"><span class="comment">     * 可以在此处进行配置文件的读取，以及驱动注册等步骤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将url，user，password，driver等变量</span></span><br><span class="line"><span class="comment">     * 存入配置文件并读取可以提高代码复用性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建配置文件数据集</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//创建类加载器classLoader</span></span><br><span class="line">            ClassLoader classLoader=JDBCUtils.class.getClassLoader();</span><br><span class="line">            <span class="comment">//通过类加载器获取在src下的配置文件，这样可以避免绝对路径带来的问题</span></span><br><span class="line">            URL res=classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            String path=res.getPath();</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">            url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs ResultSet数据库结果集对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">(ResultSet rs,Connection connection,Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">(Connection connection,Statement statement)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//cdb-cd3ybvc6.cd.tencentcdb.com:10056/weixinNews</span></span><br><span class="line">user=root</span><br><span class="line">password=rby</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure>

<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        Statement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类获取数据库连接</span></span><br><span class="line">            connection= JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//定义sql语句</span></span><br><span class="line">            String sql=<span class="string">&quot;SELECT * FROM WEIBO WHERE TITLE LIKE &#x27;%韩国%&#x27;;&quot;</span>;</span><br><span class="line">            <span class="comment">//获取执行sql的对象Statement</span></span><br><span class="line">            statement=connection.createStatement();</span><br><span class="line">            <span class="comment">//执行sql语句</span></span><br><span class="line">            ResultSet set=statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//打印结果</span></span><br><span class="line">            <span class="keyword">while</span> (set.next())&#123;</span><br><span class="line">                String title=set.getString(<span class="string">&quot;TITLE&quot;</span>);</span><br><span class="line">                System.out.println(title);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//通过工具类关闭资源</span></span><br><span class="line">            JDBCUtils.closeDB(connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>4-注解开发与Junit集成</title>
    <url>/2021/03/03/4-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E4%B8%8EJunit%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><p>Spring是轻代码而重配置的框架，一般情况下，配置比较繁重，影响开发效率，所以注解开发是一种必然趋势，注解代替XML配置文件可以简化配置，提高开发效率</p>
<h2 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h2><p>Spring的原始注解主要用于代替XML配置中的<Bean>标签</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>使用在类上用于实例化Bean</td>
</tr>
<tr>
<td>@Controller</td>
<td>使用在web层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Service</td>
<td>使用在service层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Repository</td>
<td>使用在dao层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Autowired</td>
<td>使用在字段上用于根据类型进行依赖注入</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>结合@Autowired一起使用用于根据名称进行依赖注入</td>
</tr>
<tr>
<td>@Resource</td>
<td>相当于@Autowired+@Qualifier，按照名称进行注入</td>
</tr>
<tr>
<td>@Value</td>
<td>注入普通属性</td>
</tr>
<tr>
<td>@Scope</td>
<td>标注Bean的作用范围</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td>使用在方法上标注该方法是Bean的初始化方法</td>
</tr>
<tr>
<td>@PreDestory</td>
<td>使用在方法上标注该方法时Bean的销毁方法</td>
</tr>
</tbody></table>
<h4 id="未使用注解的情况下"><a href="#未使用注解的情况下" class="headerlink" title="未使用注解的情况下"></a>未使用注解的情况下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="使用注解简化后"><a href="#使用注解简化后" class="headerlink" title="使用注解简化后"></a>使用注解简化后</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用注解后还需要在配置文件中利用context命名空间进行注解扫描，利用注解扫描，Spring才能识别对应文件夹下所有的注解</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的@Component注解方式可以完整代替之前完全通过XML配置的方式，但是所有的<Bean>标签配置都通过@Component注解容易造成混淆，导致我们并不清楚该对象属于哪一层，这时我们就可以用@Controller，@Service，@Repository这种注解替换原先的@Component注解，它们在作用上是完全一致的，但后三种明显更好区别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Repository作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save runnning...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外在上面的UserServiceImpl类中，采用了注解注入的方式将Spring容器中的UserDao对象注入到类中，此时我们可以省略掉类中的set方法，不用像XML配置过程中必须有专门的setDao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Qualifier结合@Autowired一起使用用于根据名称进行依赖注入</span></span><br><span class="line">    <span class="comment">//@Qualifier后边传入的参数则是要注入的对象的ID</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Autowired注解是按照类型自动注入，例如上面代码中，如果省略@Qualifier，UserDao同样能成功注入，但如果容器中同时有多个UserDao对象则会出现错误。@Qulifier是按照ID注入，它不能单独使用，必须搭配@Autowired注解一起使用</p>
<p>@Resource注解可以简化以上两个标签，它的作用就相当于@Autowired和@Qulifier同时使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDao</span><span class="params">(UserDao dao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dao = dao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他普通注解的使用"><a href="#其他普通注解的使用" class="headerlink" title="其他普通注解的使用"></a>其他普通注解的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Service作用是实例化Bean，作用和&lt;Bean&gt;标签相同，传入的参数就是当前对象的ID</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="comment">//@Scope是用来标明单例或多例</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Value用于进行普通值的注入</span></span><br><span class="line">    <span class="comment">//同时@Value也支持EL表达式，同样可以读取context命名空间中的值</span></span><br><span class="line">    <span class="meta">@Value(&quot;Leslie&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        dao.save();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@PostConstruct用来标记初始化方法</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////@PreDestroy用来标记销毁方法</span></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h2><p>使用Spring原始注解还不能代替XML配置中的全部内容，许多配置还不能被替代</p>
<ul>
<li>非自定义的Bean的配置<Bean></li>
<li>加载properties文件的配置<a href="context:property-placeholder">context:property-placeholder</a></li>
<li>组件扫描的配置<a href="context:component-scan">context:component-scan</a></li>
<li>引入其他文件<import></li>
</ul>
<h3 id="Spring中的新注解"><a href="#Spring中的新注解" class="headerlink" title="Spring中的新注解"></a>Spring中的新注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Configuration</td>
<td>用于指定当前类是一个Spring的配置类，当创建容器时会从该类上加载注解</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>用于指定Spring在初始化容器时要扫描的包，作用与XML配置文件中的&lt;context:component-scan base-package=”cn.ywrby”/&gt;一样</td>
</tr>
<tr>
<td>@Bean</td>
<td>使用在方法上，标注将该方法返回值存储到Spring容器中</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>用于加载.properties文件中的配置</td>
</tr>
<tr>
<td>@Import</td>
<td>用于导入其他配置类</td>
</tr>
</tbody></table>
<h3 id="使用新注解替代XML配置中的全部内容"><a href="#使用新注解替代XML配置中的全部内容" class="headerlink" title="使用新注解替代XML配置中的全部内容"></a>使用新注解替代XML配置中的全部内容</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Configuration注解表示该类是Spring的核心配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//配置注解扫描</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;cn.ywrby&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.ywrby&quot;)</span></span><br><span class="line"><span class="comment">//加载properties配置文件(classpath表示的就是资源目录resources下)</span></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="comment">//引入其他配置类</span></span><br><span class="line"><span class="meta">@Import(SpringConfiguration_data.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driver&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;url&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;user&quot; value=&quot;$&#123;user&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//        &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">    <span class="comment">//    &lt;/bean&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先利用普通值注入获得数据源所需的参数</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//将通过注入获得的值传入数据源中并返回，@Bean注解可以将返回值加入到Spring容器中</span></span><br><span class="line">    <span class="comment">//这样就解决了非自定义的Bean的配置</span></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><p>注意这里在创建Spring容器时需要用AnnotationConfigApplicationContext方法读取配置类，与以前读取配置文件时不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Spring创建C3P0数据源（配置类）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0SpringTest2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring容器(这里需要使用专门读取配置类的方法AnnotationConfigApplicationContext)</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">    <span class="comment">//利用Spring容器获取数据源</span></span><br><span class="line">    ComboPooledDataSource dataSource= (ComboPooledDataSource) context.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    <span class="comment">//从数据源获取连接资源</span></span><br><span class="line">    Connection connection=dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h1><h3 id="原始Junit测试Spring时的问题"><a href="#原始Junit测试Spring时的问题" class="headerlink" title="原始Junit测试Spring时的问题"></a>原始Junit测试Spring时的问题</h3><p>在测试Spring过程中Spring容器的创建和Bean的获取每次都需要写，重复性极高</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ul>
<li>让SpringJunit负责创建容器，每次只需要传入配置文件即可</li>
<li>将需要测试的Bean直接在测试类中注入</li>
</ul>
<h2 id="Spring集成Junit步骤"><a href="#Spring集成Junit步骤" class="headerlink" title="Spring集成Junit步骤"></a>Spring集成Junit步骤</h2><ol>
<li>导入Spring集成Junit的坐标和Junit坐标</li>
<li>使用@Runwith替换原来的运行期</li>
<li>使用@ContextConfiguration指定配置文件或配置类</li>
<li>使用@Autowired注入需要测试的对象</li>
<li>创建测试方法进行测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userServiceTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userDaoTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>4-线程通信，线程状态</title>
    <url>/2021/03/03/4-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%8C%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>多个线程因为在同一个进程中，所以互相通信比较容易</p>
<h3 id="线程通信的经典模型：生产者与消费者问题"><a href="#线程通信的经典模型：生产者与消费者问题" class="headerlink" title="线程通信的经典模型：生产者与消费者问题"></a>线程通信的经典模型：生产者与消费者问题</h3><p>生产者负责生成商品，消费者负责消费商品，生产不能过剩（仍有数据未被消费时不能生产），消费不能没有（不能消费还没有生产的数据）</p>
<h4 id="模拟案例："><a href="#模拟案例：" class="headerlink" title="模拟案例："></a>模拟案例：</h4><p>两名消费者拥有一个共享账户，共享资源，三名生产者负责生产资源。</p>
<p>两名消费者去获取资源，资源存在就取出，不存在就等待，唤醒生产者继续生产资源。</p>
<p>生产者生产资源时，发现仍然存在资源就不继续生产，如果没有资源就生产，然后等待，唤醒消费者来消费</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul>
<li>线程通信一定是多个线程操作同一个资源才需要进行通信</li>
<li>线程通信必须先保证线程安全，否则毫无意义，代码也会报错</li>
</ul>
<h3 id="线程通信的Object提供三种核心方法"><a href="#线程通信的Object提供三种核心方法" class="headerlink" title="线程通信的Object提供三种核心方法"></a>线程通信的Object提供三种核心方法</h3><ul>
<li>wait()方法：让当前线程进入等待状态，此方法必须由锁对象调用</li>
<li>notify()方法：唤醒当前锁对象上等待状态的某个线程，此方法必须由锁对象调用</li>
<li>notifyAll()方法：唤醒当前锁对象上等待状态的全部线程，此方法必须由锁对象调用</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="账户类，定义了存钱和取钱的操作"><a href="#账户类，定义了存钱和取钱的操作" class="headerlink" title="账户类，定义了存钱和取钱的操作"></a>账户类，定义了存钱和取钱的操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义账户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cardID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> Money;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//判断余额是否足够</span></span><br><span class="line">            <span class="keyword">if</span> (Money &gt;= m) &#123;</span><br><span class="line">                <span class="comment">//开始支付</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额充足，支付&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money -= m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//余额不足</span></span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行取钱操作，余额不足，支付失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//取完钱后，唤醒别人，等待自己</span></span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//新定义的存钱类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">SaveMoney</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">        String name =Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//账户没钱的情况下才执行存钱操作</span></span><br><span class="line">            <span class="keyword">if</span> (Money == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行存钱操作，充入&quot;</span> + m + <span class="string">&quot;元成功！&quot;</span>);</span><br><span class="line">                Money += m;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;用户执行存钱操作，余额充足，充值失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;用户结束操作，余额&quot;</span> + Money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//取完钱后，唤醒别人，等待自己</span></span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> cardID, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCardID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardID</span><span class="params">(<span class="keyword">int</span> cardID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardID = cardID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        Money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="线程类：分别规定了存钱线程和取钱线程"><a href="#线程类：分别规定了存钱线程和取钱线程" class="headerlink" title="线程类：分别规定了存钱线程和取钱线程"></a>线程类：分别规定了存钱线程和取钱线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将存钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SaveThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行存钱操作，每个用户不断尝试存1000元</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.SaveMoney(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程类：将取钱行为看作是一条单独的线程创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个成员变量，接收账户对象</span></span><br><span class="line">    <span class="keyword">private</span> Account acc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DrawThread</span><span class="params">(Account acc,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.acc=acc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//执行取钱操作，每个用户不断尝试取1000元</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            acc.DrawMoney(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadSafety;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟经典案例：生产者与消费者模型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建共享账户</span></span><br><span class="line">        Account acc=<span class="keyword">new</span> Account(<span class="number">111</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建两个消费者对象</span></span><br><span class="line">        Thread consumer1=<span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;consumer1&quot;</span>);</span><br><span class="line">        consumer1.start();</span><br><span class="line">        Thread consumer2=<span class="keyword">new</span> DrawThread(acc,<span class="string">&quot;consumer2&quot;</span>);</span><br><span class="line">        consumer2.start();</span><br><span class="line">        <span class="comment">//创建三个生产者</span></span><br><span class="line">        Thread producer1=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer1&quot;</span>);</span><br><span class="line">        producer1.start();</span><br><span class="line">        Thread producer2=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer2&quot;</span>);</span><br><span class="line">        producer2.start();</span><br><span class="line">        Thread producer3=<span class="keyword">new</span> SaveThread(acc,<span class="string">&quot;producer3&quot;</span>);</span><br><span class="line">        producer3.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">producer2用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer2用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer2用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">consumer1用户执行取钱操作，余额不足，支付失败！</span><br><span class="line">consumer1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">producer3用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer3用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">producer1用户执行存钱操作，余额充足，充值失败！</span><br><span class="line">producer1用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer2用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer2用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line">producer2用户执行存钱操作，充入<span class="number">1000</span>元成功！</span><br><span class="line">producer2用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">producer3用户执行存钱操作，余额充足，充值失败！</span><br><span class="line">producer3用户结束操作，余额<span class="number">1000.0</span>元</span><br><span class="line">consumer1用户执行取钱操作，余额充足，支付<span class="number">1000</span>元成功！</span><br><span class="line">consumer1用户结束操作，余额<span class="number">0.0</span>元</span><br><span class="line"></span><br><span class="line">······</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><table>
<thead>
<tr>
<th>线程状态</th>
<th>导致状态发生条件</th>
</tr>
</thead>
<tbody><tr>
<td>NEW(新建)</td>
<td>线程刚刚被创建，但是尚未启动（没有调用start()方法）。只有线程对象，没有线程特征</td>
</tr>
<tr>
<td>Runnable(可运行的)</td>
<td>线程可以在Java虚拟机中运行的状态，可能正在运行自己的代码，也可能没有，取决于操作系统处理器。调用了start()方法。</td>
</tr>
<tr>
<td>Blocked(锁阻塞)</td>
<td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程锁持有，则该线程进入Blocked状态，当该线程持有锁时，状态将改变为Runnable</td>
</tr>
<tr>
<td>Waiting(无限等待)</td>
<td>一个线程在等待另一个线程执行一个(唤醒)动作时，该线程进入Waiting状态，进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify()方法或notifyAll()方法才能将线程唤醒</td>
</tr>
<tr>
<td>Timed Waiting(计时等待)</td>
<td>同Waiting()状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态，这一状态将一致保持到超时期满或者接收到唤醒通知，带有超时参数的常用方法有：Thread.sleep,Object.wait</td>
</tr>
<tr>
<td>Terminated(被终止)</td>
<td>因为run()方法正常退出而死亡，或者因为没有捕获的异常终止了run()方法而死亡</td>
</tr>
</tbody></table>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt="线程状态"></p>
<h2 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h2><p>可运行状态还可以被细分为两个状态：就绪状态和运行状态，就绪状态只是成功开启线程还没有真正运行，运行状态表示开始正常执行</p>
<p>sleep()和wait()区别在于sleep()休眠后不释放当前锁对象，所以在当前线程苏醒后可以直接继续当前锁对象内容，但是wait()表示释放当前锁对象，所以即便在苏醒后，也需要与其他线程争抢当前锁对象，成功抢到则可以执行，否则又变为锁阻塞状态</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>3-相应API与配置数据源</title>
    <url>/2021/03/03/3-%E7%9B%B8%E5%BA%94API%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring相应API"><a href="#Spring相应API" class="headerlink" title="Spring相应API"></a>Spring相应API</h1><h3 id="ApplicationContext的实现类"><a href="#ApplicationContext的实现类" class="headerlink" title="ApplicationContext的实现类"></a>ApplicationContext的实现类</h3><ul>
<li>ClassPathXmlApplicationContext:从类的根路径下加载配置文件（即resources文件夹中）一般情况下都使用这种</li>
<li>FileSystemXmlApplicationContext:从磁盘路径下加载配置文件，配置文件可以在磁盘任意位置</li>
<li>AnnotationConfigApplicationContext:当使用注解来配置容器对象时，需要使用这种方式来创建Spring容器，它用来读取注解</li>
</ul>
<h3 id="getBean-方法"><a href="#getBean-方法" class="headerlink" title="getBean()方法"></a>getBean()方法</h3><p>getBean方法可以接收两种参数，可以分别传入容器中的ID，或者是对象的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">context.getBean(UserService.class);</span><br></pre></td></tr></table></figure>
<p>第一种方式的好处在于指向性更强，因为ID只允许出现一次，所以可以通过定义不同的ID指向相同的类，从而创建多个相同的类对象。但第二种方式如果Spring容器中有相同类对象就不能够正常识别要创建哪个对象</p>
<h1 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h1><h3 id="数据源（连接池）的作用"><a href="#数据源（连接池）的作用" class="headerlink" title="数据源（连接池）的作用"></a>数据源（连接池）的作用</h3><ul>
<li>数据源（连接池）是为提高程序性能而出现的</li>
<li>事先实例化数据源，初始化部分连接资源</li>
<li>使用连接资源时从数据源中获取</li>
<li>使用后将连接资源归还数据源</li>
</ul>
<p>常见数据源（连接池）：DBCP,C3P0,BoneCP,Druid等等</p>
<h4 id="在没有利用Spring时正常流程获取数据源"><a href="#在没有利用Spring时正常流程获取数据源" class="headerlink" title="在没有利用Spring时正常流程获取数据源"></a>在没有利用Spring时正常流程获取数据源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建C3P0数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0Test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//dataSource.setDriverClass(&quot;com.mysql.jdbc.driver&quot;);</span></span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建Druid数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">druidTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        DruidDataSource dataSource=<span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="comment">//dataSource.setDriverClassName(&quot;com.mysql.jdbc.driver&quot;);</span></span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        DruidPooledConnection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试手动创建C3P0数据源(加载配置文件)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0Test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件(这里getBundle方法会从资源目录resources下搜索所有properties文件</span></span><br><span class="line">        <span class="comment">// 所以只需要输入基类名称，例如abc.properties只需要输入abc)</span></span><br><span class="line">        ResourceBundle rb=ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据源</span></span><br><span class="line">        ComboPooledDataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        dataSource.setDriverClass(rb.getString(<span class="string">&quot;driver&quot;</span>));</span><br><span class="line">        dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">        dataSource.setUser(rb.getString(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">        dataSource.setPassword(rb.getString(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        <span class="comment">//获取连接资源</span></span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接资源</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用Spring配置数据源"><a href="#利用Spring配置数据源" class="headerlink" title="利用Spring配置数据源"></a>利用Spring配置数据源</h2><p>利用Spring配置数据源主要有如下几步</p>
<ul>
<li>在Spring核心配置文件中引入context命名空间：context命名空间的作用是为了读取properties类型的配置文件，jdbc.properties内存放了创建数据源所需要的参数，利用配置文件来读取参数的主要目的还是保证代码的可读性，各部分功能明确</li>
<li>加载properties配置文件</li>
<li>利用Spring向数据源注入参数</li>
<li>创建数据源对象（此时创建的数据源对象就不需要额外传入参数，参数在创建时就通过Spring注入了）</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="用于存放配置参数的jdbc-properties配置文件"><a href="#用于存放配置参数的jdbc-properties配置文件" class="headerlink" title="用于存放配置参数的jdbc.properties配置文件"></a>用于存放配置参数的jdbc.properties配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:78/LereBookMarket</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用Spring创建C3P0数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c3p0SpringTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//创建Spring容器</span></span><br><span class="line">    ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//利用Spring容器获取数据源</span></span><br><span class="line">    ComboPooledDataSource dataSource= (ComboPooledDataSource) context.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    <span class="comment">//从数据源获取连接资源</span></span><br><span class="line">    Connection connection=dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    <span class="comment">//释放连接资源</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>5-线程池</title>
    <url>/2021/03/03/5-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程池的概念"><a href="#线程池的概念" class="headerlink" title="线程池的概念"></a>线程池的概念</h1><p>本质就是一个能够容纳多个线程的容器，其中的线程可以反复利用，省去了频繁创建线程对象的操作，无需因为反复创建线程对象而消耗过多资源</p>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E7%BA%BF%E7%A8%8B%E6%B1%A0.jpg" alt="线程池"></p>
<h3 id="工作线程（PoolWorker）"><a href="#工作线程（PoolWorker）" class="headerlink" title="工作线程（PoolWorker）"></a>工作线程（PoolWorker）</h3><p>表示线程池中的线程，在没有任务时处于等待状态，可以循环的执行任务</p>
<h3 id="任务队列（TaskQueue）"><a href="#任务队列（TaskQueue）" class="headerlink" title="任务队列（TaskQueue）"></a>任务队列（TaskQueue）</h3><p>用于存放没有处理的任务，提供一种缓冲机制</p>
<h3 id="任务接口（Task）"><a href="#任务接口（Task）" class="headerlink" title="任务接口（Task）"></a>任务接口（Task）</h3><p>每个任务必须实现的接口，一共工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等等</p>
<h3 id="线程池管理器（ThreadPool）"><a href="#线程池管理器（ThreadPool）" class="headerlink" title="线程池管理器（ThreadPool）"></a>线程池管理器（ThreadPool）</h3><p>用于创建并管理线程。包括：创建线程池，销毁线程池，添加线程或任务等等</p>
<p>线程池创建线程来执行，而Worker执行完之后，就去队列中取未分配的task，调用task的run方法。通俗的讲就是任务来后就分配一个线程使用，线程处于占用状态，如果任务执行完毕，线程归还于线程池，并且暂处于空闲状态</p>
<h2 id="合理利用线程池的好处"><a href="#合理利用线程池的好处" class="headerlink" title="合理利用线程池的好处"></a>合理利用线程池的好处</h2><h3 id="降低资源消耗"><a href="#降低资源消耗" class="headerlink" title="降低资源消耗"></a>降低资源消耗</h3><p>减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可以执行多个任务</p>
<h3 id="提高响应速度"><a href="#提高响应速度" class="headerlink" title="提高响应速度"></a>提高响应速度</h3><p>不需要频繁的创建线程，如果有线程可以直接用，不会出现系统僵死</p>
<h3 id="提高线程的可管理性"><a href="#提高线程的可管理性" class="headerlink" title="提高线程的可管理性"></a>提高线程的可管理性</h3><p>线程池可以约束系统最多只能由多少个线程，不会因为线程过多而死机</p>
<h2 id="线程池的核心思想"><a href="#线程池的核心思想" class="headerlink" title="线程池的核心思想"></a>线程池的核心思想</h2><p>线程复用，同一个线程可以重复多次被使用，来处理多个任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程池</span></span><br><span class="line"><span class="comment">* 线程池在Java中的代表类：ExcutorService(接口)</span></span><br><span class="line"><span class="comment">* Java在Executors类下提供一个静态方法得到一个线程池的对象</span></span><br><span class="line"><span class="comment">* public static ExecutorService newFixedThreadPool(int nThreads);</span></span><br><span class="line"><span class="comment">* （创建一个可重用固定线程数的线程池并返回，以共享的无界队列方式来运行这些线程）</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个线程池，指定线程的固定数量是3</span></span><br><span class="line">        ExecutorService pool= Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//添加线程任务给线程池处理</span></span><br><span class="line">        Runnable task=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="comment">//可以向线程池提交Runnable接口或Callable接口 ，Callable做线程池的任务可以得到线程执行的结果（返回值类型Future&lt;?&gt;）</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第一次向线程池提交任务，此时线程池创建新线程，自动触发执行，不需要再start()</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第二次向线程池提交任务，此时线程池创建新线程</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第三次向线程池提交任务，此时线程池创建新线程</span></span><br><span class="line">        pool.submit(task);  <span class="comment">//第四次向线程池提交任务，超出线程池固定数量，此时线程池复用之前的线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// pool.shutdown();  在等待任务执行完毕之后关闭线程池</span></span><br><span class="line">        <span class="comment">// pool.shutdownNow();  立即关闭线程池代码，无论任务是否执行完毕</span></span><br><span class="line">        <span class="comment">// 线程池开发中一般情况下不关闭</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;==&gt;&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>4-Bootstrap前端框架</title>
    <url>/2021/03/03/4-Bootstrap%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Bootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。</p>
</blockquote>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>定义了很多CSS样式和JS插件，使得开发人员不需要经过太多设置便可以得到一个丰富的页面效果</li>
<li>采用响应式布局，可以自动适配不同分辨率大小的设备</li>
</ul>
<h2 id="标准Bootstrap页面模板"><a href="#标准Bootstrap页面模板" class="headerlink" title="标准Bootstrap页面模板"></a>标准Bootstrap页面模板</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="响应式布局-栅格系统"><a href="#响应式布局-栅格系统" class="headerlink" title="响应式布局-栅格系统"></a>响应式布局-栅格系统</h2><p>同一套页面可以兼容不同分辨率的设备，Bootstrap的响应式布局依赖于栅格系统实现，将一行分为12各格子，通过指定控件在不同分辨率设备上所占各自的数目实现兼容</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>定义容器（类似于table的概念）<ul>
<li>容器分为：1. container （固定宽度，两边有留白）2. container-fluid （100% 宽度）</li>
</ul>
</li>
<li>定义行（类似于table中的tr）样式：row</li>
<li>定义元素 指定元素在不同设备上所占格子的数量。样式：col-设备代号-各自数目</li>
</ol>
<h4 id="设备代号"><a href="#设备代号" class="headerlink" title="设备代号"></a>设备代号</h4><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E8%AE%BE%E5%A4%87%E4%BB%A3%E5%8F%B7.jpg" alt="设备代号"></p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>一行中格子数目超出12个格子后多余部分自动换行</li>
<li>栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。（例如，如果设定了col-xs-4则在小屏幕手机上占四个栅格，同时在大屏幕设备上也能保证占据四个格子）</li>
<li>栅格类属性不可以向下兼容，如果真实设备分辨率小于预设值则一个元素会占满整行（例如，设定col-lg-4则设备在大屏幕上一个元素占四个栅格，但在小于临界值的所有设备上都单独占据一行）</li>
</ul>
<h3 id="栅格系统示例"><a href="#栅格系统示例" class="headerlink" title="栅格系统示例"></a>栅格系统示例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .inner&#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义元素--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-1 col-sm-2 inner&quot;</span>&gt;</span>栅格<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Bootstrap中定义的CSS样式和JS插件"><a href="#Bootstrap中定义的CSS样式和JS插件" class="headerlink" title="Bootstrap中定义的CSS样式和JS插件"></a>Bootstrap中定义的CSS样式和JS插件</h2><h3 id="全局CSS样式"><a href="#全局CSS样式" class="headerlink" title="全局CSS样式"></a>全局CSS样式</h3><ul>
<li>按钮样式：class=”btn btn-default” ，还有诸多其他预设类型<a href="https://v3.bootcss.com/css/#buttons">详见此页</a></li>
<li>图片样式：class=”img-responsive”，响应式图片布局，图片会随着设备分辨率变化自动调整大小以适应当前设备。<a href="https://v3.bootcss.com/css/#images">更多详见，方形，圆形，相框型等</a></li>
<li>表格：class=”table”，还有许多预设如条纹状表格，悬停变色等等。<a href="https://v3.bootcss.com/css/#tables">详见</a></li>
<li>表单：class=”form-control”。<a href="https://v3.bootcss.com/css/#forms">更多表单</a></li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li><a href="https://v3.bootcss.com/components/#navbar">导航条</a></li>
<li><a href="https://v3.bootcss.com/components/#pagination">分页条</a></li>
</ul>
<h3 id="JS插件"><a href="#JS插件" class="headerlink" title="JS插件"></a>JS插件</h3><ul>
<li><a href="https://v3.bootcss.com/javascript/#carousel">轮播图</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>6-基于XML与注解的AOP开发</title>
    <url>/2021/03/03/6-%E5%9F%BA%E4%BA%8EXML%E4%B8%8E%E6%B3%A8%E8%A7%A3%E7%9A%84AOP%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XML方式实现AOP"><a href="#XML方式实现AOP" class="headerlink" title="XML方式实现AOP"></a>XML方式实现AOP</h1><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li>导入AOP相关坐标（Spring中AOP主要通过aspectj实现，所以要导入aspectjweaver）</li>
<li>创建目标接口和目标类（内部有切点）</li>
<li>创建切面类（内部实现增强方法）</li>
<li>将目标类和切面类的创建权交给Spring（将目标类和切面类放入Spring容器中）</li>
<li>在applicationContext配置文件中配置织入关系</li>
<li>测试代码</li>
</ol>
<h4 id="目标类与目标接口"><a href="#目标类与目标接口" class="headerlink" title="目标类与目标接口"></a>目标类与目标接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObjectImpl</span> <span class="keyword">implements</span> <span class="title">TargetObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;return value...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建切面类，实现增强方法"><a href="#创建切面类，实现增强方法" class="headerlink" title="创建切面类，实现增强方法"></a>创建切面类，实现增强方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="将目标类与切面类控制权交给Spring-织入关系"><a href="#将目标类与切面类控制权交给Spring-织入关系" class="headerlink" title="将目标类与切面类控制权交给Spring,织入关系"></a>将目标类与切面类控制权交给Spring,织入关系</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入AOP命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;targetObject&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.aop.TargetObjectImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ywrby.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--声明切面：表明myAspect是一个切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--before表示前置增强，after表示后置增强......--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置通知和切入点：method为通知（增强方法），pointcut为切入点,通过切点表达式进行配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;preEnhence&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public String cn.ywrby.aop.TargetObjectImpl.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;postEnhence&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public String cn.ywrby.aop.TargetObjectImpl.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AOPTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注入对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetObject object;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试利用XML实现AOP</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proxyTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String val=object.save();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切点表达式的写法"><a href="#切点表达式的写法" class="headerlink" title="切点表达式的写法"></a>切点表达式的写法</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数列表))</span><br></pre></td></tr></table></figure>

<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul>
<li>修饰符可以省略</li>
<li>返回值类型，包名，类名，方法名都可以使用*表示任意</li>
<li>包名与类名之间有一个点.表示当前包下的类，两个点..表示当前包及其所有子包下的类</li>
<li>参数列表可以使用两个点..表示任意数量，任意类型的参数列表</li>
</ul>
<p><strong>示例</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution(public String cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(String cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(* cn.ywrby.aop.TargetObjectImpl.save())</span><br><span class="line">execution(* cn.ywrby.aop.*.*(..))</span><br><span class="line">execution(* cn.ywrby.aop..TargetObjectImpl.*(..))</span><br></pre></td></tr></table></figure>

<h4 id="切点表达式的抽取"><a href="#切点表达式的抽取" class="headerlink" title="切点表达式的抽取"></a>切点表达式的抽取</h4><p>一般情况下，对于前置后置等等增强方法，其使用的切点表达式很可能相同，此时，就可以利用抽取切点表达式的方法，简化代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置织入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明切面：表明myAspect是一个切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--抽取切点表达式--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;maPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * cn.ywrby.*.*.save(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--直接使用抽取的切点表达式ID即可--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;preEnhence&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;maPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;postEnhence&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;maPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h3><table>
<thead>
<tr>
<th>名称</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td><a href="aop:before">aop:before</a></td>
<td>用于配置前置通知。指定增强的方法在切入点方法之前执行</td>
</tr>
<tr>
<td>后置通知</td>
<td><a href="aop:after-returning">aop:after-returning</a></td>
<td>用于配置后置通知。指定增强的方法在切入点方法之后执行</td>
</tr>
<tr>
<td>环绕通知</td>
<td><a href="aop:around">aop:around</a></td>
<td>用于配置环绕通知。指定增强的方法在切入点方法之前和之后都执行</td>
</tr>
<tr>
<td>异常抛出通知</td>
<td><a href="aop:throwing">aop:throwing</a></td>
<td>用于配置异常抛出通知。指定增强的方法在出现异常时执行</td>
</tr>
<tr>
<td>最终通知</td>
<td><a href="aop:after">aop:after</a></td>
<td>用于配置最终通知。无论增强方式执行是否有异常都会执行</td>
</tr>
</tbody></table>
<h1 id="注解实现AOP"><a href="#注解实现AOP" class="headerlink" title="注解实现AOP"></a>注解实现AOP</h1><h3 id="实现步骤-1"><a href="#实现步骤-1" class="headerlink" title="实现步骤"></a>实现步骤</h3><ol>
<li>创建目标接口与目标类（内部有切点）</li>
<li>创建切面类，内部实现增强方法</li>
<li>将目标类和切面类的创建权交给Spring，利用注解将目标类和切面类放入Spring容器中</li>
<li>在切面类中配置织入关系</li>
<li>在applicationContext配置文件中开启组件扫描和AOP自动代理</li>
<li>测试代码</li>
</ol>
<h4 id="目标类-目标接口与切面类"><a href="#目标类-目标接口与切面类" class="headerlink" title="目标类,目标接口与切面类"></a>目标类,目标接口与切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;targetObject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObjectImpl</span> <span class="keyword">implements</span> <span class="title">TargetObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;return value...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="comment">//声明切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="comment">//配置前置增强</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置增强方法</span></span><br><span class="line">    <span class="comment">//配置后置增强</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件中开启自动扫描和AOP自动代理"><a href="#配置文件中开启自动扫描和AOP自动代理" class="headerlink" title="配置文件中开启自动扫描和AOP自动代理"></a>配置文件中开启自动扫描和AOP自动代理</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入AOP命名空间和Context命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启组件扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启AOP自动代理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="注解中抽取切点表达式"><a href="#注解中抽取切点表达式" class="headerlink" title="注解中抽取切点表达式"></a>注解中抽取切点表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：负责实现增前方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="comment">//声明切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//利用一个空方法进行切点表达式的抽取</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.ywrby.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//使用抽取的切点表达式</span></span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二种使用方法</span></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postEnhence</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>5-AOP基础</title>
    <url>/2021/03/03/5-AOP%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="AOP-面向切面编程"><a href="#AOP-面向切面编程" class="headerlink" title="AOP-面向切面编程"></a>AOP-面向切面编程</h1><p>AOP是Aspect Oriented Programing(面向切面编程)的缩写，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p>
<p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p>
<p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<strong>耦合度降低</strong>，提高程序的<strong>可重用性</strong>，同时提高了<strong>开发的效率</strong>。</p>
<p>简言之，在OOP（面向对象编程）中，最大的特点就是继承，多态与封装，而在封装过程中我们需要把功能不同的方法封装到不同对象中，这就导致了我们在使用这些对象时重复度很高，例如有多个方法都需要在执行前调用日志控制方法，我们当前的解决办法只有在每个类中重写日志控制方法或者将日志控制方法写入新的控制类，在需要的类中调用该方法</p>
<p>第一种方法不仅耦合度高，而且不便于重写或修改，代码重复度也很高，第二种方法，虽然解决了代码重写修改的问题，但日志控制方法会与所有调用它的类耦合死，我们调用某一方法时必然会调用与之耦合的日志控制类</p>
<p>基于以上问题，便形成了与之对应的解决方案：面向切面编程AOP，一般来讲，我们把重复度极高，被抽取出来的类或代码片段叫做切面，而被切入的类或方法就叫做切入点，通过AOP我们可以将这些重复度高的代码片段抽取到一个切片中，等到需要使用时，再将其切入到指定的切入点中，从而改变其原有的行为</p>
<p><strong>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程</strong></p>
<h4 id="AOP的作用与优势"><a href="#AOP的作用与优势" class="headerlink" title="AOP的作用与优势"></a>AOP的作用与优势</h4><ul>
<li>作用：在程序运行期间，不改变源码的情况下，对方法进行功能增强</li>
<li>优势：减少重复代码，提高开发效率，便于后期维护</li>
</ul>
<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>AOP底层的实现，是依赖于Spring提供的动态代理技术，Spring通过动态代理技术动态的生成代理对象，代理对象在执行方法时会进行功能增强的介入，再去调用目标对象的方法，从而实现功能的增强</p>
<h3 id="AOP中利用的动态代理技术"><a href="#AOP中利用的动态代理技术" class="headerlink" title="AOP中利用的动态代理技术"></a>AOP中利用的动态代理技术</h3><ul>
<li>JDK代理：基于接口的动态代理技术</li>
<li>cglib代理：基于父类的动态代理技术</li>
</ul>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/spring_aop.jpg" alt="spring_aop"></p>
<h4 id="JDK代理实现增强的基本实现"><a href="#JDK代理实现增强的基本实现" class="headerlink" title="JDK代理实现增强的基本实现"></a>JDK代理实现增强的基本实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建真实对象（目标对象）</span></span><br><span class="line">        TargetObjectImpl object=<span class="keyword">new</span> TargetObjectImpl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强对象（负责执行增强方法）</span></span><br><span class="line">        Advice advice=<span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Proxy.newProxyInstance创建动态代理增强对象</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 传入的三个参数分别是</span></span><br><span class="line"><span class="comment">         * 目标对象类加载器：目标对象.getClass().getClassLoader()</span></span><br><span class="line"><span class="comment">         * 接口数组：目标对象.getClass().getInterfaces()  保证了代理对象和目标对象方法一致，接口一致</span></span><br><span class="line"><span class="comment">         * 处理器：new InvocationHandler() 负责核心业务逻辑的处理（进行增强）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TargetObject proxy_object= (TargetObject) Proxy.newProxyInstance(object.getClass().getClassLoader(), object.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 负责代理逻辑的编写，代理对象调用的所有方法都会触发invoke方法执行</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 方法对象，触发invoke执行的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args 参数对象，触发invoke执行的方法中的参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//前置增强方法</span></span><br><span class="line">                advice.preFunc();</span><br><span class="line">                <span class="comment">//使用真实的目标对象调用该方法（这里的两个invoke方法并不相同，下面的invoke方法是反射中用来执行方法的函数）</span></span><br><span class="line">                Object val=method.invoke(object,args);</span><br><span class="line">                <span class="comment">//后置增强方法</span></span><br><span class="line">                advice.postFunc();</span><br><span class="line">                <span class="comment">//返回值</span></span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        String str=proxy_object.targetFunction();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="cglib代理实现增强的基本实现"><a href="#cglib代理实现增强的基本实现" class="headerlink" title="cglib代理实现增强的基本实现"></a>cglib代理实现增强的基本实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建真实对象（目标对象）</span></span><br><span class="line">        TargetObject object=<span class="keyword">new</span> TargetObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建增强对象（负责执行增强方法）</span></span><br><span class="line">        Advice advice=<span class="keyword">new</span> Advice();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基于cglib生成动态代理增强对象</span></span><br><span class="line">        <span class="comment">//1. 创建增强器</span></span><br><span class="line">        Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2. 设置父类（将目标对象设置为其父类，以实现相关方法）</span></span><br><span class="line">        enhancer.setSuperclass(TargetObject.class);</span><br><span class="line">        <span class="comment">//3. 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * intercept作用和invoke方法相同，都是负责核心业务逻辑的处理（进行增强）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> o 目标对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method 触发intercept执行的方法对象</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> objects 触发intercept执行的方法中所有真实参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> methodProxy 方法代理</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//执行前置方法</span></span><br><span class="line">                advice.preFunc();</span><br><span class="line">                <span class="comment">//执行目标方法</span></span><br><span class="line">                Object val=method.invoke(object,objects);</span><br><span class="line">                <span class="comment">//执行后置方法</span></span><br><span class="line">                advice.postFunc();</span><br><span class="line">                <span class="keyword">return</span> val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TargetObject proxy_object= (TargetObject) enhancer.create();</span><br><span class="line">        <span class="comment">//利用代理对象执行方法</span></span><br><span class="line">        String val=proxy_object.targetFunction();</span><br><span class="line">        System.out.println(val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP中的基本概念"><a href="#AOP中的基本概念" class="headerlink" title="AOP中的基本概念"></a>AOP中的基本概念</h2><ul>
<li>Target（目标对象）：代理的目标对象</li>
<li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li>
<li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点（可以简单理解为可以被增强的方法）</li>
<li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义（可以简单理解为实际增强的方法）</li>
<li>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知（实现增强的方法）</li>
<li>Aspect（切面）：是切入点和通知（引介）的结合</li>
<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li>
</ul>
<h2 id="AOP开发明确事项"><a href="#AOP开发明确事项" class="headerlink" title="AOP开发明确事项"></a>AOP开发明确事项</h2><h4 id="需要编写的内容"><a href="#需要编写的内容" class="headerlink" title="需要编写的内容"></a>需要编写的内容</h4><ul>
<li>核心业务代码（目标类与目标方法）</li>
<li>编写切面类，切面类中包含通知的实现（实现功能增强的方法）</li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点相结合</li>
</ul>
<h4 id="Spring中AOP技术实现的内容"><a href="#Spring中AOP技术实现的内容" class="headerlink" title="Spring中AOP技术实现的内容"></a>Spring中AOP技术实现的内容</h4><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>5-数据库连接池</title>
    <url>/2021/03/03/5-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><blockquote>
<p>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。(用户访问更加高效，消耗资源减少)</p>
</blockquote>
<h2 id="数据库连接池的实现"><a href="#数据库连接池的实现" class="headerlink" title="数据库连接池的实现"></a>数据库连接池的实现</h2><h3 id="标准接口：DataSource"><a href="#标准接口：DataSource" class="headerlink" title="标准接口：DataSource"></a>标准接口：DataSource</h3><p>位于javax.sql包下，通过方法getConnection获取连接</p>
<p>如果Connection对象是从连接池中直接获取的，则调用Connection的close方法不再关闭连接，而是将该连接归还给连接池</p>
<p>数据库连接池一般由数据库厂商直接实现，我们不需要另行实现</p>
<ul>
<li>C3P0：数据库连接池实现技术</li>
<li>Druid：数据库连接池实现技术，由阿里巴巴提供</li>
</ul>
<h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>导入jar包：c3p0-0.9.5.5.jar和mchange-commons-java-0.2.19.jar（依赖jar包）另外因为要使用数据库连接对象，所以不要忘记导入mysql-connector-java-8.0.20.jar包</li>
<li>定义配置文件<ul>
<li>名称需为：c3p0.properties或c3p0-config.xml</li>
<li>配置文件路径直接放在src文件夹下即可</li>
</ul>
</li>
<li>创建核心对象：数据库连接池对象：ComboPooledDataSource</li>
<li>获取连接：getConnection</li>
</ol>
<h4 id="C3P0演示类"><a href="#C3P0演示类" class="headerlink" title="C3P0演示类"></a>C3P0演示类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * C3P0演示类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据库连接池对象</span></span><br><span class="line">        <span class="comment">//在不向ComboPooledDataSource()中传入参数的情况下使用默认配置</span></span><br><span class="line">        <span class="comment">//传入指定名称参数，可以使用配置文件中其他的指定配置（使用指定名称的配置）</span></span><br><span class="line">        <span class="comment">//这样就只需要一个配置文件即可完成所有数据库连接池的配置</span></span><br><span class="line">        DataSource dataSource=<span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">//获取数据库连接对象</span></span><br><span class="line">        Connection connection=dataSource.getConnection();</span><br><span class="line">        <span class="comment">//查看获取情况</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件c3p0-config-xml"><a href="#配置文件c3p0-config-xml" class="headerlink" title="配置文件c3p0-config.xml"></a>配置文件c3p0-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的配置读取连接池对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>rby<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--初始化申请的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大的连接数量--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  指定名称的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;otherc3p0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>rby<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h2><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>导入jar包：druid-1.1.23.jar和mysql-connector-java-8.0.20.jar</li>
<li>定义配置文件<ul>
<li>Druid的配置文件是properties类型的</li>
<li>名称和位置都是任意的</li>
</ul>
</li>
<li>加载配置文件</li>
<li>获取数据库连接池对象：通过工厂获取DruidDataSourceFactory</li>
<li>获取连接：getConnection</li>
</ol>
<h4 id="Druid演示类"><a href="#Druid演示类" class="headerlink" title="Druid演示类"></a>Druid演示类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        Properties properties=<span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is =Demo1.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">        properties.load(is);</span><br><span class="line">        <span class="comment">//获取连接池对象</span></span><br><span class="line">        DataSource ds= DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection connection=ds.getConnection();</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://cdb-cd3ybvc6.cd.tencentcdb.com:10056/jdbcTest</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">rby</span></span><br><span class="line"><span class="comment"># 初始化连接数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 最大等待数</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure>


<h3 id="利用Druid实现工具类"><a href="#利用Druid实现工具类" class="headerlink" title="利用Druid实现工具类"></a>利用Druid实现工具类</h3><h4 id="Druid工具类"><a href="#Druid工具类" class="headerlink" title="Druid工具类"></a>Druid工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Druid工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在静态代码块中加载配置文件，并且获取连接池对象，这些都是只需要进行一次的操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            InputStream is = DruidUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">//获取连接池对象</span></span><br><span class="line">            dataSource=DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接池对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放数据库连接资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rs 数据库结果集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs, Connection connection, Statement statement)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放数据库连接资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement sql语句执行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection connection, Statement statement)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement statement = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//利用工具来获取连接对象</span></span><br><span class="line">            connection = DruidUtils.getConnection();</span><br><span class="line">            String sql=<span class="string">&quot;select * from loginMess;&quot;</span>;</span><br><span class="line">            statement=connection.prepareStatement(sql);</span><br><span class="line">            rs=statement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                String user=rs.getString(<span class="number">2</span>);</span><br><span class="line">                String pass=rs.getString(<span class="number">3</span>);</span><br><span class="line">                System.out.println(user+<span class="string">&quot; : &quot;</span>+pass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            DruidUtils.close(rs,connection,statement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>6-JDBCTemplate</title>
    <url>/2021/03/03/6-JDBCTemplate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><p>Spring JDBC是Spring框架对JDBC的简单封装，其中提供了JDBCTemplate对象简化JDBC开发</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>导入jar包：commons-logging-1.2.jar，spring-beans-5.1.10.RELEASE.jar，spring-core-5.1.10.RELEASE.jar，spring-jdbc-5.1.10.RELEASE.jar，spring-tx-5.1.10.RELEASE.jar</li>
<li>创建JdbcTemplate对象，依赖于数据源DataSource</li>
<li>调用JdbdTemplate的方法进行CRUD增删改查<ul>
<li>update():执行DML语句</li>
<li>queryForMap():查询结果并将结果封装为map对象（查询结果长度只能是1，也就是只能查询一条结果，查询到的结果将被封装为Map，其中列名为Key，值为Value）</li>
<li>queryForList():查询结果并将结果封装为list对象（将每一条记录封装为一个Map集合，再将多个Map集合封装为一个List集合）</li>
<li>query():查询结果并将结果封装为JavaBean对象。query中一般需要接收RowMapper类型的参数，该参数的获取，一般使用<code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code>这种实现类，该类可以实现数据到JavaBean的自动封装</li>
<li>queryForObject:查询结果并将结果封装为对象(一般是系统已经定义过的对象，例如Long，int等等，通过这个方法可以计算数据库总记录数等信息)一般用于聚合函数的查询</li>
</ul>
</li>
</ol>
<h4 id="JdbcTemplate对象的简单使用"><a href="#JdbcTemplate对象的简单使用" class="headerlink" title="JdbcTemplate对象的简单使用"></a>JdbcTemplate对象的简单使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBCTemplate入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建JDBCTemplate对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(DruidUtils.getDataSource());</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String sql=<span class="string">&quot;update stuMess set score=100 where id=?&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> result=jdbcTemplate.update(sql,<span class="number">3</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="query-方法的一般使用方式"><a href="#query-方法的一般使用方式" class="headerlink" title="query()方法的一般使用方式"></a>query()方法的一般使用方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate(DruidUtils.getDataSource());</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from FINALEXAM_PERSON where ELEC &gt;?&quot;</span>;</span><br><span class="line">        List&lt;Person&gt; personList=jdbcTemplate.query(sql,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Person&gt;(Person.class),<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">for</span>(Person p: personList)&#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 运行结果：</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;A路人&#x27;, fan=2634110, all_like=4060804, all_play=130307845, elec=3717, submissions=246&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;hanser&#x27;, fan=1940049, all_like=5015728, all_play=93791313, elec=14054, submissions=263&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;信誓蛋蛋&#x27;, fan=4822994, all_like=12635046, all_play=285482138, elec=22156, submissions=181&#125;</span></span><br><span class="line"><span class="comment">Person&#123;up=&#x27;ilem&#x27;, fan=1379899, all_like=2696860, all_play=83757635, elec=5289, submissions=117&#125;</span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>6-死锁</title>
    <url>/2021/03/03/6-%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p><strong>死锁代表的是一种情形：多个线程同时被阻塞，它们中的一个或者全部都在等待某个资源被释放。由于线程被无限期阻塞，因此程序不可能正常终止</strong>（例如：客户一方占用资金等待货物资源，经销商一方占用货物资源等待资金，双方都占用一种资源，并且都在等待一种资源，这就导致交易流程无法正常进行，也就形成了所谓的“死锁”）</p>
<h3 id="死锁产生的四个必要条件："><a href="#死锁产生的四个必要条件：" class="headerlink" title="死锁产生的四个必要条件："></a>死锁产生的四个必要条件：</h3><ol>
<li><strong>互斥使用</strong>：即当一个资源被一个一个线程使用（占有）时，别的线程不能使用</li>
<li><strong>不可抢占</strong>：资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放</li>
<li><strong>请求和保持</strong>：即当资源请求者在请求其他的资源的同时保持对原有资源的占有</li>
<li><strong>循环等待</strong>：即存在一个等待循环队列，P1要P2的资源，P2要P1的资源，这样就形成了一个等待循环</li>
</ol>
<p>当上述的四个条件<strong>都满足</strong>时，便形成死锁，当然，死锁的情况下如果打破上述任何一个条件，便可以让死锁消失。开发中应该尽量避免死锁</p>
<p>死锁在代码形式上通常需要锁的嵌套，也就是在锁的内部还有锁</p>
<h3 id="代码实现：必然死锁的案例"><a href="#代码实现：必然死锁的案例" class="headerlink" title="代码实现：必然死锁的案例"></a>代码实现：必然死锁的案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ThreadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//必然死锁案例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDead</span>  </span>&#123;</span><br><span class="line">    <span class="comment">// 定义两个资源对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource1=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object resource2=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个线程</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//上锁，第一次线程1锁住资源1</span></span><br><span class="line">                <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程1占用资源1，请求资源2&quot;</span>);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    休眠1s，这是为了保证死锁必然发生</span></span><br><span class="line"><span class="comment">                    以计算机的运行速度，保证了休眠1s的情况下，必然会执行线程2</span></span><br><span class="line"><span class="comment">                    此时资源1已经被上锁，待线程2开始运行，第一步就会讲资源2上锁</span></span><br><span class="line"><span class="comment">                    此时两个资源已经都被上锁</span></span><br><span class="line"><span class="comment">                    待两个线程休眠结束，开始运行</span></span><br><span class="line"><span class="comment">                    线程1进入锁阻塞状态，因为资源2已经被锁</span></span><br><span class="line"><span class="comment">                    线程2也进入锁阻塞状态，因为资源1已经被锁</span></span><br><span class="line"><span class="comment">                    两个线程都进入锁阻塞状态，无法正常结束，形成死锁</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//上锁，第二次线程1锁住资源2</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程1成功占用资源2&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//上锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (resource2)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程2占用资源2，请求资源1&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//上锁</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (resource1)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程2成功占用资源1&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">线程<span class="number">1</span>占用资源<span class="number">1</span>，请求资源<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>占用资源<span class="number">2</span>，请求资源<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>程序仍在运行，且永远不会自行停止，这就形成了死锁</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>7-JDBCTemplate</title>
    <url>/2021/03/03/7-JDBCTemplate/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h1><p>是Spring框架中的一个对象，是对原始繁琐JDBC API的封装</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol>
<li>导入spring-jdbc和spring-tx坐标</li>
<li>创建数据库表和实体</li>
<li>创建JDBCTemplate对象</li>
<li>执行数据库操作</li>
</ol>
<h3 id="数据库表和实体对象"><a href="#数据库表和实体对象" class="headerlink" title="数据库表和实体对象"></a>数据库表和实体对象</h3><p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/databasesheet.jpg" alt="databasesheet"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入context命名空间，用于读取properties配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件已经成功加载，可以利用配置文件注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建JDBCTemplate对象并执行数据库操作"><a href="#创建JDBCTemplate对象并执行数据库操作" class="headerlink" title="创建JDBCTemplate对象并执行数据库操作"></a>创建JDBCTemplate对象并执行数据库操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建数据源并注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdbcTemplateTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//创建JdbcTemplate对象</span></span><br><span class="line">        JdbcTemplate jdbcTemplate=<span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//传入数据源对象</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//执行数据库操作</span></span><br><span class="line">        <span class="keyword">int</span> row=jdbcTemplate.update(<span class="string">&quot;insert into user values(?,?)&quot;</span>,<span class="string">&quot;Leslie&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>还可以直接将JdbcTemplate放入Spring容器中，再将数据源注入以简化代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jdbcTemplateTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//执行数据库操作</span></span><br><span class="line">        <span class="keyword">int</span> row=jdbcTemplate.update(<span class="string">&quot;insert into user values(?,?)&quot;</span>,<span class="string">&quot;Jessice&quot;</span>,<span class="string">&quot;654321&quot;</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>7-volatile关键字</title>
    <url>/2021/03/03/7-volatile%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="并发编程下，多线程访问变量的不可见性问题"><a href="#并发编程下，多线程访问变量的不可见性问题" class="headerlink" title="并发编程下，多线程访问变量的不可见性问题"></a>并发编程下，多线程访问变量的不可见性问题</h3><p>指多个线程访问共享变量，会出现一个线程修改变量的值后，其他线程看不到最新值的情况</p>
<h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo t=<span class="keyword">new</span> VolatileDemo();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.isFlag())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">flag修改成功！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到程序始终没有成功输出主线程中的判断条件内的内容，说明主线程存储的flag变量的值仍然始终是false,但是子线程中已经成功修改了flag的值为false，这就是并发编程下多线程访问变量的不可见性问题。</p>
<h1 id="变量不可见性的内存语义"><a href="#变量不可见性的内存语义" class="headerlink" title="变量不可见性的内存语义"></a>变量不可见性的内存语义</h1><h2 id="JMM概述"><a href="#JMM概述" class="headerlink" title="JMM概述"></a>JMM概述</h2><p>JMM（Java Memory Model）是Java的一种内存模型，与<strong>Java并发编程有关</strong>的一种模型。</p>
<p>JMM是Java虚拟机规范中所定义的一种内存模型，JMM是<strong>标准化的</strong>，屏蔽掉了底层不同计算机的区别</p>
<p>JMM描述了Java程序中各种变量（<strong>线程共享变量</strong>）的<strong>访问规则</strong>，以及在JVM中将<strong>变量存储</strong>到内存中和从内存中<strong>读取变量</strong>这样的底层细节</p>
<h3 id="JMM规定："><a href="#JMM规定：" class="headerlink" title="JMM规定："></a>JMM规定：</h3><ul>
<li>所有的共享变量都存储于主内存中。（这里所说的变量指的是实例变量和类变量，不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题）</li>
<li>每一个线程还存在自己的工作内存，线程的工作内存，保留了被线程使用的变量的工作副本</li>
<li>线程对变量的所有的操作（读，取）都必须在工作内存中完成，而不能直接读写主内存中的变量</li>
<li>不同线程之间也不能直接访问对方的工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成</li>
</ul>
<p><img src="https://ywrbyimg.oss-cn-chengdu.aliyuncs.com/img/%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98.jpg" alt="主内存与工作内存"></p>
<p>上边的例子中，最后循环没有正常执行的原因也就可以解释了，子线程和主线程最开始时都直接从主内存中读取了flag的值并放入工作内存中，此时两个工作内存中的flag值都是false，随后子线程修改了工作内存中的flag的值，并将结果返回到主内存中，即修改了主内存的flag值，但主线程并没有重新读取主内存，也就导致了主线程中的工作内存中flag的值始终为false无法正常进行循环</p>
<h4 id="以上这些也就解释了前面所说的不可见性产生的原因："><a href="#以上这些也就解释了前面所说的不可见性产生的原因：" class="headerlink" title="以上这些也就解释了前面所说的不可见性产生的原因："></a>以上这些也就解释了前面所说的不可见性产生的原因：</h4><p>每个线程都有自己的工作内存，线程都是从主内存拷贝共享变量的副本值，每个线程都是在工作内存中操作共享变量的</p>
<h1 id="变量不可见性的解决"><a href="#变量不可见性的解决" class="headerlink" title="变量不可见性的解决"></a>变量不可见性的解决</h1><h2 id="解决方案一：加锁"><a href="#解决方案一：加锁" class="headerlink" title="解决方案一：加锁"></a>解决方案一：加锁</h2><p>在要使用共享变量前，先将代码上锁（synchronized），就可以解决变量不可见性，要了解这种方式解决问题的原理，就要理解某一个线程在进入synchronized代码块前后，会执行哪些操作。</p>
<p><strong>当某一个线程进入synchronized代码块时，会执行如下操作：</strong></p>
<ol>
<li>线程获得锁</li>
<li><strong>清空工作空间</strong></li>
<li>从主内存拷贝共享变量<strong>最新的值</strong>到工作内存为副本</li>
<li>执行代码</li>
<li>将修改后的副本的值<strong>刷新</strong>回主内存中</li>
<li>线程释放锁</li>
</ol>
<p>了解了上述执行流程就不难发现，只要在使用了共享变量的代码前加锁，就可以在执行当前语句前获取主内存中最新的共享变量的值，自然也就解决了变量不可见性的问题。并且，由于我们只是出于更新变量值的目的加锁，所以上锁的对象是什么就无关紧要了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决并发编程下变量不可见性的方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 方法一：加锁</span></span><br><span class="line"><span class="comment">* 在访问共享变量的过程中对它上锁（上锁的对象是任意的）</span></span><br><span class="line"><span class="comment">* 方法二：对共享的变量进行volatile关键字修饰</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo2 t=<span class="keyword">new</span> VolatileDemo2();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//在访问共享变量前，先对其加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (test2.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t.isFlag()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决方案二：volatile关键字修饰"><a href="#解决方案二：volatile关键字修饰" class="headerlink" title="解决方案二：volatile关键字修饰"></a>解决方案二：volatile关键字修饰</h2><p>直接在共享变量前加volatile关键字修饰</p>
<h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol>
<li>所有线程从主内存读取到数据放入其对应的工作内存中</li>
<li>某个线程操作有volatile修饰的变量并更改了它的值</li>
<li>当该线程返回这个变量的新值给主内存后，所有其他线程原先的此变量副本失效</li>
<li>当某个线程需要再次操作该变量时，需要从新从主内存中读取最新的变量的值，放入到工作内存中</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>volatile保证不同线程对共享变量操作的可见性</strong>，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileTest;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决并发编程下变量不可见性的方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 方法一：加锁</span></span><br><span class="line"><span class="comment">* 在访问共享变量的过程中对它上锁（上锁的对象是任意的）</span></span><br><span class="line"><span class="comment">* 方法二：对共享的变量进行volatile关键字修饰</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;  <span class="comment">//直接对共享的变量进行volatile关键字修饰</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        flag=<span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;flag修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VolatileDemo2 t=<span class="keyword">new</span> VolatileDemo2();</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (t.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;判断条件成立，程序正常执行！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="volatile与synchronized比较"><a href="#volatile与synchronized比较" class="headerlink" title="volatile与synchronized比较"></a>volatile与synchronized比较</h2><ul>
<li>volatile只能修饰实例变量或类变量，而synchronized可以修饰方法，或者代码块</li>
<li>volatile保证数据的可见性，但是不保证原子性（多线程进行写操作，不保证线程安全），而synchronized是一种排他（互斥）的机制</li>
</ul>
<h1 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>原子性指的是在一次操作或者多次操作中，要么所有的操作全部得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileAtomic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//探究volatile的原子性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run=<span class="keyword">new</span> MyRunnable();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//启动100条线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次任务是一个整体，会进行100次的自增和输出操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;count====&gt;&quot;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，上述程序执行过程中，最后变量的值在有volatile修饰的情况下和没有volatile修饰的情况下，最终结果都不一定是10000，发生这种情况的原因在于可能同时有多个线程（并行）对变量进行赋值操作，由于volatile的限制它们同时获取到的变量值是一样的，它们最终会返回相同的值回主内存中，这样本来多次的赋值操作就变成了一次，总的赋值操作少了，最终结果自然也无法达到10000，究其根本，<strong>就是volatile并不具备原子性造成的，它只能解决线程的可见性问题</strong></p>
<h2 id="保证原子性的方案"><a href="#保证原子性的方案" class="headerlink" title="保证原子性的方案"></a>保证原子性的方案</h2><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>最简单的保证原子性的方案就是对需要同时执行（保证原子性）的代码进行加锁，加锁后这段代码同时只能由持有锁的唯一线程执行，并且加锁的同时也就保证了变量的可见性，不需要再利用volatile修饰变量了</p>
<h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>Java从JDK1.5开始提供Atomic包，这个包定义了一种<strong>原子操作类</strong>，原子操作类提供了一种简单高效，线程安全的更新一个变量的方式（<strong>因为加锁这种机制的性能比较差</strong>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">()</span></span>;  <span class="comment">//初始化一个默认值为0的原子型Integer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> initialValue)</span></span>;   <span class="comment">//初始化一个指定值的原子型Integer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>;   <span class="comment">//获取值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>;  <span class="comment">//以原子方式将当前值加1，注意：这里返回的是自增前的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span></span>;  <span class="comment">//以原子方式将当前值加1，注意：这里返回的是自增后的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> data)</span></span>;  <span class="comment">//以原子方式将输入的数值与实例中的值（AtomicInteger中的value）相加，并返回结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> value)</span></span>;  <span class="comment">//以原子方式设置为newValue的值，并返回旧值</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> VolatileAtomic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用原子类保证原子性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable run=<span class="keyword">new</span> My_Runnable();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//启动100条线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(run).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My_Runnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Integer更新的原子类,初始值为0</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger count=<span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次任务是一个整体，会进行100次的自增和输出操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;count====&gt;&quot;</span>+count.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可以看到，上述程序通过原子类保证了原子性，保证了程序正常执行</strong></p>
<h2 id="原子类CAS机制"><a href="#原子类CAS机制" class="headerlink" title="原子类CAS机制"></a>原子类CAS机制</h2><h3 id="CAS机制"><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h3><h4 id="（Compare-And-Swap）"><a href="#（Compare-And-Swap）" class="headerlink" title="（Compare And Swap）"></a>（Compare And Swap）</h4><p>比较再交换机制，是现代CPU广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。</p>
<p>CAS可以将read-modify-check-write转换为原子操作，这个原子操作直接由处理器保证。</p>
<p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B</p>
<p>CAS机制的核心就是比较再交换，它的实现流程是在一个进程中，同时有多个线程获取到同一个共享变量的值，此时由于没有锁的限制它们各自开始对变量进行操作，当某个线程结束对变量的操作并把新值返回到主内存中去之前，它会先行比较此时主内存中共享变量的值和自己刚开始获取到的变量值是否相同，假设相同，就将新值赋给主内存中的共享变量，加入不同，就将当前变量值作废，重新获取最新的变量值并重新开始操作</p>
<h2 id="个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题"><a href="#个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题" class="headerlink" title="个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题"></a>个人理解：为什么单纯依靠volatile关键字无法解决原子性的问题</h2><p>volatile关键字执行的操作是在某个线程将该变量的刷新值返回到主内存后，处理使得其他所有该变量的副本值失效，也就是再次操作这个值必须重新去主内存中获取最新结果。但这样其实并不能彻底实现原子性，会出现一种情况，例如线程A，B获取到相同的共享变量x的值。随后A，B分别对变量x进行操作（虽然不是同时，但他们可以先后操作，此时二者都没有将更新过的变量值返回主内存），随后A线程首先将更新的x值返回主内存，此举使得所有获得x值的线程手中原来的值失效，当然也包括B，但这对B并没有实际影响，B已经完成了对变量x的操作，只剩将变量返回主内存中的过程，所以B线程本质上不会收到影响，而是执行最后一步，将刷新的值返回主内存。这就导致原本应当A，B两个线程对变量进行两次操作，最后实际上只有后刷新的B线程对变量做出了改变。最终导致了原子性的问题产生</p>
<p>但是CAS机制就最终解决了这个问题，它保证了B线程在尝试刷新主内存的值之前会先进行检验，假如主内存中的变量值已经改变，则B线程之前的操作失效，需要重新进行。</p>
<h2 id="CAS与Synchronized：乐观锁，悲观锁"><a href="#CAS与Synchronized：乐观锁，悲观锁" class="headerlink" title="CAS与Synchronized：乐观锁，悲观锁"></a>CAS与Synchronized：乐观锁，悲观锁</h2><h3 id="Synchronized总是从悲观的角度出发，被称为悲观锁。"><a href="#Synchronized总是从悲观的角度出发，被称为悲观锁。" class="headerlink" title="Synchronized总是从悲观的角度出发，被称为悲观锁。"></a>Synchronized总是从悲观的角度出发，被称为悲观锁。</h3><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，防止别人在他使用期间拿到锁（共享资源每次只给一个线程使用，其他线程阻塞，用完后子再把资源转让给其他线程）JDK中的ReentrantLock也是一种悲观锁，整体来说这种方式性能较差</p>
<h3 id="CAS总是从乐观角度出发，被称为乐观锁"><a href="#CAS总是从乐观角度出发，被称为乐观锁" class="headerlink" title="CAS总是从乐观角度出发，被称为乐观锁"></a>CAS总是从乐观角度出发，被称为乐观锁</h3><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不上锁，但是在更新的时候会判断在使用期间别人有没有更新这个数据，综合性能较好</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>7-软件架构，资源分类</title>
    <url>/2021/03/03/7-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%EF%BC%8C%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h3 id="C-S-Client-Server"><a href="#C-S-Client-Server" class="headerlink" title="C/S(Client/Server)"></a>C/S(Client/Server)</h3><p>客户端/服务器端</p>
<p>在用户本地有客户端程序，在远程由服务器端程序（例如QQ，迅雷）</p>
<ul>
<li>优点：用户体验好</li>
<li>缺点：开发，安装，部署，维护等十分麻烦</li>
</ul>
<h3 id="B-S-Browser-Server"><a href="#B-S-Browser-Server" class="headerlink" title="B/S(Browser/Server)"></a>B/S(Browser/Server)</h3><p>浏览器/服务器端</p>
<p>只需要一个浏览器，用户就可以通过URL访问不同服务器端程序</p>
<ul>
<li>优点：开发，安装，部署，维护等十分更简单</li>
<li>缺点：<ul>
<li>如果应用过大，用户体验可能受到影响</li>
<li>对硬件要求高</li>
</ul>
</li>
</ul>
<h1 id="B-S架构-资源分类"><a href="#B-S架构-资源分类" class="headerlink" title="B/S架构 资源分类"></a>B/S架构 资源分类</h1><h2 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h2><p>使用静态网页开发技术发布的资源</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul>
<li>所有用户访问，得到的页面完全一致</li>
<li>如：文本，图片，音视频，HTML，CSS，JavaScript</li>
<li>如果用户请求的是静态资源，服务器会直接将静态资源发送给浏览器，浏览器中内置静态资源的解析引擎，可以展示静态资源</li>
</ul>
<h2 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h2><p>使用动态网页技术发布的资源</p>
<h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h3><ul>
<li>所有用户访问。得到的结果可能是不一样的</li>
<li>如：Jsp/Servlet,php,asp</li>
<li>如果用户请求的是动态资源，服务器会执行动态资源，将其转换为静态资源，再发送给浏览器</li>
</ul>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>8-XML概述</title>
    <url>/2021/03/03/8-XML%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="XML概述"><a href="#XML概述" class="headerlink" title="XML概述"></a>XML概述</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Extensible Markup Language可扩展标记语言（可扩展指XML中的所有标签都是自定义的）</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>存储数据<ul>
<li>做配置文件</li>
<li>在网络中传输</li>
</ul>
</li>
</ul>
<h3 id="XML与HTML区别"><a href="#XML与HTML区别" class="headerlink" title="XML与HTML区别"></a>XML与HTML区别</h3><ul>
<li>XML标签都是自定义的，HTML标签都是预定义的</li>
<li>XML语法严格，HTML语法松散</li>
<li>XML是用来存储数据的，HTML是用来展示数据的</li>
</ul>
<h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><ol>
<li>xml文档的后缀名.xml</li>
<li>xml第一行必须定义为文档声明。例如：<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</code></li>
<li>xml文档中有且仅有一个根标签</li>
<li>属性值必须使用引号(单双都可)引起来</li>
<li>标签必须正确关闭</li>
<li>xml标签名称区分大小写</li>
</ol>
<h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><h3 id="1-文档声明"><a href="#1-文档声明" class="headerlink" title="1. 文档声明"></a>1. 文档声明</h3><ul>
<li>格式：<?xml 属性列表 ?></li>
<li>属性列表组成<ul>
<li>version：版本号，必须的属性</li>
<li>encoding：编码方式，告知解析引擎当前文档使用的字符集</li>
<li>standalone：是否独立（yes：不依赖其他文件，no：依赖其他文件）</li>
</ul>
</li>
</ul>
<h3 id="2-标签："><a href="#2-标签：" class="headerlink" title="2. 标签："></a>2. 标签：</h3><p>自定义名称</p>
<h3 id="3-属性："><a href="#3-属性：" class="headerlink" title="3. 属性："></a>3. 属性：</h3><p>（注意id属性值唯一）</p>
<h3 id="4-文本："><a href="#4-文本：" class="headerlink" title="4. 文本："></a>4. 文本：</h3><p>由于我们保存的文本数据可能包含一些有特殊意义的字符，例如&gt;,&lt;,&amp;等等，一种解决方式是用转义字符替换所有这些特殊文本。但这样使得文本的可读性变差，另一种方式就是使用XML中的CDATA区</p>
<ul>
<li>CDATA区：在该区域中的数据会被原样展示（格式：<![CDATA[ 文本数据 ]]>）</li>
</ul>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>规定XML文档的书写规则</p>
<h3 id="dtd约束"><a href="#dtd约束" class="headerlink" title="dtd约束"></a>dtd约束</h3><p>一种相对简单的约束技术</p>
<h4 id="1-内部dtd"><a href="#1-内部dtd" class="headerlink" title="1. 内部dtd"></a>1. 内部dtd</h4><p>将约束规则定义在xml文档中</p>
<h4 id="2-外部dtd"><a href="#2-外部dtd" class="headerlink" title="2. 外部dtd"></a>2. 外部dtd</h4><p>将约束规则定义在外部的dtd文件中</p>
<ul>
<li>本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件地址"></li>
<li>网络：<!DOCTYPE 根标签名 SYSTEM "dtd文件名字" "dtd文件的位置URL"></li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>该示例中跟标签名是students，其内部允许放置student标签，student标签内部又允许放置name,age,sex三个标签，这三个标签内部允许存放字符串。最后一行对number属性进行限定，规定其为ID属性，也就是必须是唯一的值，#REQUIRED表示这个属性必须出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT students (student+)&gt;</span><br><span class="line">        &lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">        &lt;!ELEMENT name ( #PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">        &lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">        &lt;!ATTLIST student number ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure>

<h4 id="引入当前示例"><a href="#引入当前示例" class="headerlink" title="引入当前示例"></a>引入当前示例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;student.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;id2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Leslie<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ol>
<li>填写xml文档的根元素</li>
<li>引入xsi前缀。<code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</code></li>
<li>引入xsd文件命名空间，<code>xsi:schemaLocation=&quot;http://www.ywrby.cn/xml student.xsd&quot;</code></li>
<li>为每一个xsd约束声明一个前缀,作为标识<code>xmlns=&quot;http://www.ywrby.cn/xml&quot;</code></li>
</ol>
<p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=666">深入</a></p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>操作XML文档，将文档中的数据读取到内存中</p>
<h3 id="操作XML文档"><a href="#操作XML文档" class="headerlink" title="操作XML文档"></a>操作XML文档</h3><ul>
<li>解析(读取)：将文档中的数据读取到内存中</li>
<li>写入：将内存中的数据保存到XML文档中，持久化存储</li>
</ul>
<h3 id="解析XML的方式"><a href="#解析XML的方式" class="headerlink" title="解析XML的方式"></a>解析XML的方式</h3><ol>
<li>DOM：将标记语言文档一次性加载进内存，在内存中形成一棵DOM树<ul>
<li>优点：操作方便，可以对文档进行CRUD的所有操作</li>
<li>缺点：由于是一次性加载所有数据进内存，所以对内存占用较大</li>
</ul>
</li>
<li>SAX：逐行读取，读取完一行后立即释放并读取下一行。基于事件驱动<ul>
<li>优点：不占用内存</li>
<li>缺点：由于逐行释放，所以无法进行增删改操作，只能读取</li>
</ul>
</li>
</ol>
<h3 id="XML常见的解析器"><a href="#XML常见的解析器" class="headerlink" title="XML常见的解析器"></a>XML常见的解析器</h3><ul>
<li>JAXP：sun公司提供的官方解析器，支持DOM和SAX两种思想。性能较差</li>
<li>DOM4J：一款非常优秀的解析器</li>
<li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li>
<li>PULL：Android操作系统内置的解析器，支持SAX思想</li>
</ul>
<h3 id="Jsoup解析"><a href="#Jsoup解析" class="headerlink" title="Jsoup解析"></a>Jsoup解析</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>导入jar包：jsoup-1.13.1.jar</li>
<li>获取Document对象</li>
<li>获取Element对象</li>
<li>获取数据</li>
</ol>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Document对象</span></span><br><span class="line">        <span class="comment">//获取要解析的xml文件路径</span></span><br><span class="line">        String path =JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;cn/ywrby/xml/stu.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="comment">//解析XML文档，加载文档进内存，获取DOM树--&gt;Document（注意这里的Doccument对象是org.jsoup.nodes.Document，不是其他类）</span></span><br><span class="line">        Document doc=Jsoup.parse(<span class="keyword">new</span> File(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取元素对象 --&gt;Element</span></span><br><span class="line">        Elements elements=doc.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(Element element:elements)&#123;</span><br><span class="line">            <span class="comment">//获取数据</span></span><br><span class="line">            String name=element.text();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Jsoup中的常见对象"><a href="#Jsoup中的常见对象" class="headerlink" title="Jsoup中的常见对象"></a>Jsoup中的常见对象</h4><ul>
<li>Jsoup：工具类，可以解析html或xml文档，返回Document<ul>
<li>parse()方法。解析html或xml文档，返回Document，有多种重载形式<ul>
<li>(File in,String charsetName)：解析本地的xml或html文件</li>
<li>(String html)：解析html字符串</li>
<li>(URL url,int timeoutMills)：通过网络路径获取指定html或xml文档对象</li>
</ul>
</li>
</ul>
</li>
<li>Document：文档对象，代表内存中的DOM树<ul>
<li>主要用于获取Element对象<ul>
<li>getElementsByTag</li>
<li>getElementsByAttribute</li>
<li>getElementById</li>
</ul>
</li>
</ul>
</li>
<li>Elements：元素Element的集合，可以当作ArrayList<Element>使用</li>
<li>Element：元素对象<ul>
<li>获取其子元素对象<ul>
<li>getElementsByTag</li>
<li>getElementsByAttribute</li>
<li>getElementById</li>
</ul>
</li>
<li>获取属性值：  attr(String key)根据属性名称，获取属性值</li>
<li>获取文本内容：text()获取文本内容（包括子标签的文本内容）,html()获取包括子标签的标签体的所有内容</li>
</ul>
</li>
<li>Node：节点对象，是Document与Element对象的父类</li>
</ul>
<h2 id="快捷查询XML文档的方法"><a href="#快捷查询XML文档的方法" class="headerlink" title="快捷查询XML文档的方法"></a>快捷查询XML文档的方法</h2><h3 id="1-selector：选择器"><a href="#1-selector：选择器" class="headerlink" title="1. selector：选择器"></a>1. selector：选择器</h3><p>使用的方法：<code>Elements select(String cssQuery)</code></p>
<p><a href="https://jsoup.org/apidocs/org/jsoup/select/Selector.html">语法参考</a></p>
<p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=673">视频讲解</a></p>
<h3 id="2-XPath"><a href="#2-XPath" class="headerlink" title="2. XPath"></a>2. XPath</h3><p>XPath 是一门在 XML 文档中查找信息的语言。XPath 可用来在 XML 文档中对元素和属性进行遍历。</p>
<p><a href="https://www.w3school.com.cn/xpath/index.asp">教程</a></p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>8-Spring事务控制</title>
    <url>/2021/03/03/8-Spring%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring事务控制"><a href="#Spring事务控制" class="headerlink" title="Spring事务控制"></a>Spring事务控制</h1><h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><blockquote>
<p>概括来讲，事务是一个由有限操作集合组成的逻辑单元。事务操作包含两个目的，数据一致以及操作隔离。数据一致是指事务提交时保证事务内的所有操作都成功完成，并且更改永久生效；事务回滚时，保证能够恢复到事务执行之前的状态。操作隔离则是指多个同时执行的事务之间应该相互独立，互不影响。</p>
</blockquote>
<p>事务是一个比较广泛的概念，事务管理资源除了我们熟知的数据库外，还可以包含消息队列、文件系统等。当然，一般来说，我们说的事务单指“数据库事务”。</p>
<h3 id="事务的ACID属性"><a href="#事务的ACID属性" class="headerlink" title="事务的ACID属性"></a>事务的ACID属性</h3><ul>
<li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li>
<li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li>
<li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li>
<li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。</li>
</ul>
<h2 id="编程式事务控制"><a href="#编程式事务控制" class="headerlink" title="编程式事务控制"></a>编程式事务控制</h2><p>Spring编程式事务控制就是指利用Spring提供的API进行事务控制，通过编写Java代码的方式完成，这种事务控制方法相对较灵活，但不便于管理，即耦合度较高</p>
<h3 id="PlatformTransactionManager-平台事务管理器"><a href="#PlatformTransactionManager-平台事务管理器" class="headerlink" title="PlatformTransactionManager 平台事务管理器"></a>PlatformTransactionManager 平台事务管理器</h3><p>PlatformTransactionManager接口是Spring的事务管理器类，内部提供了我们常用的操作事务的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>TransactionStatus getTransaction(TransactionDefination defination)</td>
<td>获取事务状态信息</td>
</tr>
<tr>
<td>void commit(TransactionStatus status)</td>
<td>获取事务状态信息</td>
</tr>
<tr>
<td>void rollback(TransactionStatus status)</td>
<td>回滚事务</td>
</tr>
</tbody></table>
<p>根据dao层的不同技术实现（例如JDBC或mybatis…），PlatformTransactionManager接口实现了不同的实现类</p>
<h3 id="TransactionDefination"><a href="#TransactionDefination" class="headerlink" title="TransactionDefination"></a>TransactionDefination</h3><p>TransactionDefination是事务的定义信息对象，实现了如下方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int getIsolationLevel()</td>
<td>获得事务的隔离级别</td>
</tr>
<tr>
<td>int getPropogationBehavior()</td>
<td>获得事务的传播行为</td>
</tr>
<tr>
<td>int getTimeout()</td>
<td>获得超时时间</td>
</tr>
<tr>
<td>boolean isReadyOnly()</td>
<td>是否只读</td>
</tr>
</tbody></table>
<h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>设置事务级别，用于解决事务并发产生的问题。如脏读，不可重复度，虚读…</p>
<ul>
<li>ISOLATION_DEFAULT：默认隔离级别</li>
<li>ISOLATION_READ_UNCOMMITTED：读未提交</li>
<li>ISOLATION_READ_COMMITTED：读已提交（可以解决脏读）</li>
<li>ISOLATION_REPEATABLE_READ：可重复读（可以解决不可重复读问题）</li>
<li>ISOLATION_SERIALIZABLE：串行化（都可以解决 但效率低下）</li>
</ul>
<h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><p>事务传播行为用于描述当<strong>一个事务传播行为的修饰方法</strong>被<strong>其他方法</strong>调用时，事务是如何传播的</p>
<p>Spring中提供了其中事务传播的行为</p>
<table>
<thead>
<tr>
<th>事务传播行为</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>REQUIRED</td>
<td>如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</td>
</tr>
<tr>
<td>SUPPORTS</td>
<td>支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</td>
</tr>
<tr>
<td>MANDATORY</td>
<td>使用当前的事务，如果当前没有事务，就抛出异常</td>
</tr>
<tr>
<td>REQUERS_NEW</td>
<td>新建事务，如果当前在事务中，把当前事务挂起。</td>
</tr>
<tr>
<td>NOT_SUPPORTED</td>
<td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</td>
</tr>
<tr>
<td>NEVER</td>
<td>以非事务方式运行，如果当前存在事务，抛出异常</td>
</tr>
<tr>
<td>NESTED</td>
<td>如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</li>
<li>是否只读：建议查询时设置为只读</li>
</ul>
<h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>TransactionStatus接口提供了事务具体的运行状态</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean hasSavepoint()</td>
<td>是否存储回滚点</td>
</tr>
<tr>
<td>boolean isCompleted()</td>
<td>事务是否完成</td>
</tr>
<tr>
<td>boolean isNewTransaction()</td>
<td>是否是新事务</td>
</tr>
<tr>
<td>boolean isRollBackOnly()</td>
<td>事务是否回滚</td>
</tr>
</tbody></table>
<h2 id="Spring声明式事务控制"><a href="#Spring声明式事务控制" class="headerlink" title="Spring声明式事务控制"></a>Spring声明式事务控制</h2><p>Spring的声明式事务控制就是指利用声明的方式进行事务控制，这里所指的声明就是利用Spring配置文件或注解的方式进行配置</p>
<h3 id="声明式事务控制的作用"><a href="#声明式事务控制的作用" class="headerlink" title="声明式事务控制的作用"></a>声明式事务控制的作用</h3><p>事务管理是属于系统层面的服务，而我们所编写的业务逻辑对象是属于业务逻辑层面的，如果使用编程式事务控制，就需要将事务管理和业务逻辑对象一起进行编写，二者将被耦合死。二通过声明式事务控制，则可以通过配置的方式，在配置文件中编写如何利用业务逻辑对象进行事务管理，此时业务逻辑对象并不会意识到自己正在执行相关事务，即实现了解耦合（业务逻辑与事务管理之间）</p>
<p>这个过程实际上还是遵循了Spring中的AOP，整个过程是为了实现对方法的增强，而增强的方式就是通过使用事务，即业务逻辑对象是切点，事务是通知（增强）</p>
<p>Spring声明式事务控制的底层就是AOP</p>
<h3 id="基于XML方式的声明式事务控制"><a href="#基于XML方式的声明式事务控制" class="headerlink" title="基于XML方式的声明式事务控制"></a>基于XML方式的声明式事务控制</h3><p>以银行转账事务为例进行基于XML方式的声明式事务控制</p>
<h4 id="dao层：定义数据库操作方法"><a href="#dao层：定义数据库操作方法" class="headerlink" title="dao层：定义数据库操作方法"></a>dao层：定义数据库操作方法</h4><p>in方法为修改入帐方的余额</p>
<p>out方法为修改出账方发余额</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name =?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name =?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h3><p>transfer方法就是转账方法，接收出账方，入帐方和金额三个参数</p>
<p>transfer方法调用了in方法和out方法，这两个方法各自为一个事务，此时如果不进行事务控制，可以看到由于二者之间故意设置的除数错误，会导致入账事务执行并完成，但出账事务未进行。</p>
<p>因此必须通过事务控制增强这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan,String inMan,<span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDaoImpl accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDaoImpl accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>首先要引入AOP命名空间用于进行事务的织入，其次还需要引入tx命名空间进行事务通知的定义</p>
<p>然后就是需要配置平台事务管理器并为其配置数据源以进行事务管理，并且要定义通知（在tx命名空间中）</p>
<p>最后进行织入，将通知织入指定方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入tx命名空间，用于进行事务的管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置平台事务管理器TransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通知 用于进行事务的增强--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置事务的属性信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--name设置增强的方法 *表示所有方法均进行增强--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--isolation表示隔离级别--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--propagation表示事务的传播行为--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--timeout表示超过时间--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--read-only表示是否只读--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;DEFAULT&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置AOP事务的织入：将事务织入到业务逻辑对象的方法中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* cn.ywrby.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="基于注解的Spring事务控制"><a href="#基于注解的Spring事务控制" class="headerlink" title="基于注解的Spring事务控制"></a>基于注解的Spring事务控制</h3><p>基于注解的Spring事务控制需要修改两处，首先在需要进行事务控制的方法或类上利用@Transactional注解表示对该方法进行事务控制，（其内可以传入参数进行属性的配置）</p>
<p>可以看到，类上和方法上都可以使用该注解，当在类上使用该注解时表示该类内所有方法均按此配置进行事务控制，同时若方法上另有配置，则遵循方法上的配置（就近原则）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.MANDATORY,readOnly = false,timeout = -1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDaoImpl accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDaoImpl accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.DEFAULT,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其次还需要修改配置文件，以进行事务的注解驱动声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入tx命名空间，用于进行事务的管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.ywrby&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载properties配置文件(classpath表示的就是资源目录resources下)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置JdbcTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置平台事务管理器TransactionManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明事务的注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>8-并发包</title>
    <url>/2021/03/03/8-%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="并发包"><a href="#并发包" class="headerlink" title="并发包"></a>并发包</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在实际开发中不考虑线程安全的情况下，一般不需要做线程安全处理，防止过多的处理导致性能变差</p>
<p>但是开发中有很多业务需要考虑线程安全的相关问题，此时就必须考虑线程安全的处理</p>
<p>Java为很多业务场景提供了性能优异，且线程安全的并发包</p>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CHMDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps=new HashMap&lt;&gt;();</span></span><br><span class="line">    <span class="comment">//public static Map&lt;String,String&gt; maps=new Hashtable&lt;&gt;();</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; maps=<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable target = <span class="keyword">new</span> CHMRunnable();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(target);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 注意：首先这里不可以直接简化用new Thread(target).start();开启线程</span></span><br><span class="line"><span class="comment">        * 两个线程必须实例化对象，这是由于后续要用到join()方法</span></span><br><span class="line"><span class="comment">        * join方法的作用在于避免主线程和t1,t2两个线程争抢CPU</span></span><br><span class="line"><span class="comment">        * 使用join方法后，在t1,t2执行完之前，后续主线程都不会执行</span></span><br><span class="line"><span class="comment">        * 这就避免了提前打出maps长度导致结果并不是最终运行的结果</span></span><br><span class="line"><span class="comment">        * 同时t1,t2都用到了join方法，所以二者之间仍然是并发执行</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;maps长度=&quot;</span>+maps.size());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 可以看到，当使用hashmap类型时，最终的执行结果并不是1000000</span></span><br><span class="line"><span class="comment">        * 这是由于单纯通过hashmap算法可能出现两个线程同时插入到同一线程的情况</span></span><br><span class="line"><span class="comment">        * HashMap时线程不安全的，性能好</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 可以看到，当使用hashtable类型时，最终执行结果始终都是1000000</span></span><br><span class="line"><span class="comment">        * 可见hashtable保证了线程的安全性，但是这种方式效率极低，在项目中基本被舍弃</span></span><br><span class="line"><span class="comment">        * 因为它的实现方式在每个方法中都加上了锁</span></span><br><span class="line"><span class="comment">        * HashTable时线程安全的，性能较差</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * ConcurrentHashMap的实现与hashtable不同，它只锁住对应变量的桶（分段式锁）</span></span><br><span class="line"><span class="comment">        * 所以其他变量的增删改不会相互影响，效率得到了极大的保证</span></span><br><span class="line"><span class="comment">        * 保证了线程安全，综合性能较好</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CHMRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">500000</span>;i++)&#123;</span><br><span class="line">            CHMDemo1.maps.put(Thread.currentThread().getName()+i,Thread.currentThread().getName()+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>CountDownLatch允许一个或多个线程等待其他线程完成操作，再执行自己</p>
<p>e.g. 线程1执行A任务和C任务，线程2执行B任务，且根据规定必须按照A，B，C的顺序执行任务：</p>
<p>所以就可以利用CountDownLatch保证在线程1执行完任务A后等待线程2执行完毕再执行剩余任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CountDownLatch</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CDLDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建CountDownLatch对象，用于监督1，2线程的执行情况</span></span><br><span class="line">        <span class="comment">//这里传入的参数是步数，表示唤醒线程需要的步数，部署为0时，等待的线程开始执行</span></span><br><span class="line">        <span class="comment">//这种方法比线程通信更加灵活</span></span><br><span class="line">        CountDownLatch c=<span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread_first(c).start();</span><br><span class="line">        <span class="keyword">new</span> Thread_second(c).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread_first</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread_first</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//等待状态,让当前线程让出CPU等待</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread_second</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread_second</span><span class="params">(CountDownLatch c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        c.countDown();  <span class="comment">//让计数器减一,当计数器为0时唤醒等待的线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在使用countdownlatch之前，最终结果是ACB，使用countdownlatch之后，最终结果是ABC</p>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p>某个线程任务必须等待其他线程执行完毕以后才能最终触发自己执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CyclicBarrier</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CBDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建任务循环屏障对象,等到5个线程全部执行完毕之后触发一次任务</span></span><br><span class="line">        <span class="comment">// 第一个参数表示等待线程执行的个数，第二个参数表示执行的任务</span></span><br><span class="line">        CyclicBarrier c=<span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>,<span class="keyword">new</span> CBRunnable());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> CBThread(<span class="string">&quot;用户&quot;</span>+i,c).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;五个任务全部执行完毕，&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;开始执行！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier c;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CBThread</span><span class="params">(String s,CyclicBarrier c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s);</span><br><span class="line">        <span class="keyword">this</span>.c=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行！&quot;</span>);</span><br><span class="line">            c.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用户<span class="number">3</span>正在执行！</span><br><span class="line">用户<span class="number">1</span>正在执行！</span><br><span class="line">用户<span class="number">2</span>正在执行！</span><br><span class="line">用户<span class="number">0</span>正在执行！</span><br><span class="line">用户<span class="number">4</span>正在执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">3</span>开始执行！</span><br></pre></td></tr></table></figure>


<p>当修改代码中的for循环为10次时，可以看到最终运行结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">用户<span class="number">4</span>正在执行！</span><br><span class="line">用户<span class="number">6</span>正在执行！</span><br><span class="line">用户<span class="number">1</span>正在执行！</span><br><span class="line">用户<span class="number">5</span>正在执行！</span><br><span class="line">用户<span class="number">3</span>正在执行！</span><br><span class="line">用户<span class="number">2</span>正在执行！</span><br><span class="line">用户<span class="number">8</span>正在执行！</span><br><span class="line">用户<span class="number">7</span>正在执行！</span><br><span class="line">用户<span class="number">0</span>正在执行！</span><br><span class="line">用户<span class="number">9</span>正在执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">7</span>开始执行！</span><br><span class="line">五个任务全部执行完毕，用户<span class="number">9</span>开始执行！</span><br></pre></td></tr></table></figure>

<p>可以看到每个线程调用await()方法告诉c自己已经运行完成，然后当前线程被回收（注意，不是被销毁，如果是销毁则后续c执行传入的任务时获取当前线程得到的必然不是这些已经完成命名的线程），并且循环屏障是达到一组屏障就触发一次任务的执行，而不一定只执行一次</p>
<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>主要作用是控制线程的并发数量，synchronized可以起到“锁”的作用，保证在某个时间段内，只允许一个线程访问，而Seamaphore则可以设置同时允许几个线程进行。</p>
<p>Semaphore字面意思是信号量的意思，作用就是控制某段时间内访问特定资源的线程数目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SemaTask task=<span class="keyword">new</span> SemaTask();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> SemaThread(task).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//任务代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemaTask</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建Semaphore对象，第一个参数表示允许执行acquire和release之间内容的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> Semaphore sema=<span class="keyword">new</span> Semaphore(<span class="number">2</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sema.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;进入时间：&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;离开时间：&quot;</span>+System.currentTimeMillis());</span><br><span class="line">            sema.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SemaThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SemaTask task;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SemaThread</span><span class="params">(SemaTask task)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.task=task;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        task.task();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h2><p>一个用于线程间协作的工具类，Exchanger用于线程间的数据交换。</p>
<p>两个线程通过exchanger方法交换数据，如果第一个线程先执行exchanger方法，它会一直等待第二个线程也执行exchanger方法，当两个线程都达到同步点时（程序执行完毕），这两个线程就可以进行数据交换，将本线程生产出来的数据传递给对方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Exchanger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Exchanger交换数据</span></span><br><span class="line">        Exchanger&lt;String&gt; exch=<span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line">        Thread t1=<span class="keyword">new</span> task(<span class="string">&quot;task1&quot;</span>,exch,<span class="string">&quot;你好，我是task1&quot;</span>);</span><br><span class="line">        Thread t2=<span class="keyword">new</span> task(<span class="string">&quot;task2&quot;</span>,exch,<span class="string">&quot;你好，我是task2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">task</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exch;</span><br><span class="line">    <span class="keyword">private</span> String result;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">task</span><span class="params">(String name,Exchanger exch,String result)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.exch=exch;</span><br><span class="line">        <span class="keyword">this</span>.result=result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;正在执行工作流程&quot;</span>);</span><br><span class="line">        <span class="comment">//交换结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s=exch.exchange(result);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;收到交换信息“&quot;</span>+s+<span class="string">&quot;”&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">task2正在执行工作流程</span><br><span class="line">task1正在执行工作流程</span><br><span class="line">task2收到交换信息“你好，我是task1”</span><br><span class="line">task1收到交换信息“你好，我是task2”</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>9-Lambda表达式</title>
    <url>/2021/03/03/9-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>没有名字的局部内部类，匿名内部类的目的是为了简化代码。</p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名|抽象类|接口(形参)&#123;</span><br><span class="line">    方法重写......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Anonymity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是父类的func方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Task t=<span class="keyword">new</span> Task() &#123;</span><br><span class="line">        <span class="comment">//重写抽象方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是匿名内部类重写的抽象方法func2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        t.func();  <span class="comment">//调用父类的方法</span></span><br><span class="line">        t.func2();  <span class="comment">//调用子类重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>匿名内部类是一个没有名字的类</li>
<li>匿名内部类一旦写出来，就会立即创建一个匿名内部类对象返回（用父类接收）</li>
<li>匿名内部类的对象的类型相当于是当前new的那个类（父类）的子类类型</li>
</ul>
<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p> Lambda表达式是JDK1.8开始之后的新技术，是一种代码的新语法，是一种特殊写法</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>核心目的是为了简化匿名内部类的代码写法</p>
<h2 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(匿名内部类被重写方法的形参列表)-&gt;&#123;</span><br><span class="line">    被重写方法的方法体代码......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><ol>
<li>Lambda表达式并不能简化所有匿名内部类的写法</li>
<li>Lambda表达式只能简化函数式接口的匿名内部类写法</li>
</ol>
<h3 id="函数式接口的匿名内部类"><a href="#函数式接口的匿名内部类" class="headerlink" title="函数式接口的匿名内部类"></a>函数式接口的匿名内部类</h3><ul>
<li>首先必须是接口</li>
<li>接口中只能有一个抽象方法</li>
<li>Java源码中类名前有@FunctionalInterface标记的都是函数式接口，其他符合上述两条规则的也属于函数式接口</li>
</ul>
<h2 id="实例1：简化Runnable接口的匿名内部类写法"><a href="#实例1：简化Runnable接口的匿名内部类写法" class="headerlink" title="实例1：简化Runnable接口的匿名内部类写法"></a>实例1：简化Runnable接口的匿名内部类写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LambdaDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//利用匿名内部类重写Runnable中的抽象方法并执行该线程任务对象</span></span><br><span class="line">        Runnable target =<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过匿名内部类重写&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t=<span class="keyword">new</span> Thread(target);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Lambda表达式重写抽象方法</span></span><br><span class="line">        Runnable target2 =() -&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过Lambda表达式重写&quot;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(target2);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="上述代码还可以继续简化，省略单独创建对象的过程"><a href="#上述代码还可以继续简化，省略单独创建对象的过程" class="headerlink" title="上述代码还可以继续简化，省略单独创建对象的过程"></a>上述代码还可以继续简化，省略单独创建对象的过程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> LambdaDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//利用匿名内部类重写Runnable中的抽象方法并执行该线程任务对象</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过匿名内部类重写&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//使用Lambda表达式重写抽象方法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;通过Lambda表达式重写&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="实例2：简化Comparator接口的匿名内部类"><a href="#实例2：简化Comparator接口的匿名内部类" class="headerlink" title="实例2：简化Comparator接口的匿名内部类"></a>实例2：简化Comparator接口的匿名内部类</h2><h4 id="以下为匿名内部类的写法"><a href="#以下为匿名内部类的写法" class="headerlink" title="以下为匿名内部类的写法"></a>以下为匿名内部类的写法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.getAge()&lt;s2.getAge()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s1.getAge()&gt;s2.getAge()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//或者上述可以简化携程return s1.getAge()-s2.getAge();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="利用Lambda表达式简化"><a href="#利用Lambda表达式简化" class="headerlink" title="利用Lambda表达式简化"></a>利用Lambda表达式简化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        Collections.sort(lists, (Student t1, Student t2)-&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(t1.getAge()&lt;t2.getAge()) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(t1.getAge()&gt;t2.getAge()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//或者上述可以简化写成return s1.getAge()-s2.getAge();</span></span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式省略写法"><a href="#Lambda表达式省略写法" class="headerlink" title="Lambda表达式省略写法"></a>Lambda表达式省略写法</h2><ul>
<li>如果Lambda表达式的方法体代码只有一行，可以省略<strong>大括号</strong>，（如果这行代码是return语句，则<strong>return必须省略不写</strong>）同时要省略<strong>分号</strong></li>
<li><strong>参数类型</strong>可以省略不写</li>
<li>如果只有一个参数，除了参数类型，<strong>括号</strong>()也可以省略</li>
</ul>
<h4 id="前文代码经过省略后"><a href="#前文代码经过省略后" class="headerlink" title="前文代码经过省略后"></a>前文代码经过省略后</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ComparatorDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Student&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Student s1=<span class="keyword">new</span> Student(<span class="string">&quot;Leslie&quot;</span>,<span class="number">18</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s2=<span class="keyword">new</span> Student(<span class="string">&quot;John&quot;</span>,<span class="number">14</span>,<span class="string">&quot;Man&quot;</span>);</span><br><span class="line">        Student s3=<span class="keyword">new</span> Student(<span class="string">&quot;Gym&quot;</span>,<span class="number">20</span>,<span class="string">&quot;Woman&quot;</span>);</span><br><span class="line">        <span class="comment">//批量向数组插入数据</span></span><br><span class="line">        Collections.addAll(lists,s1,s2,s3);</span><br><span class="line">        <span class="comment">//按照年龄进行排序(匿名内部类做法)</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        省略了大括号和最后的分号</span></span><br><span class="line"><span class="comment">        并且由于唯一的一行代码是return语句，所以省略return</span></span><br><span class="line"><span class="comment">        最后将参数类型也省略</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Collections.sort(lists, (t1,  t2)-&gt; t1.getAge()-t2.getAge());</span><br><span class="line">        <span class="keyword">for</span>(Student stu:lists) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;name=%s age=%d sex=%s\n&quot;</span>,stu.getName(),stu.getAge(),stu.getSex());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/01/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>9-web服务器软件概述+Tomcat</title>
    <url>/2021/03/03/9-web%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6%E6%A6%82%E8%BF%B0+Tomcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Web服务器软件"><a href="#Web服务器软件" class="headerlink" title="Web服务器软件"></a>Web服务器软件</h1><h3 id="服务器概念"><a href="#服务器概念" class="headerlink" title="服务器概念"></a>服务器概念</h3><p>安装了服务器软件的计算机</p>
<h3 id="服务器软件概念"><a href="#服务器软件概念" class="headerlink" title="服务器软件概念"></a>服务器软件概念</h3><p>接收用户请求，处理请求并做出响应</p>
<h3 id="Web服务器软件概念"><a href="#Web服务器软件概念" class="headerlink" title="Web服务器软件概念"></a>Web服务器软件概念</h3><p>服务器软件的一种，在web服务器软件中，可以部署web项目，让用户通过浏览器访问项目，又被称为web容器</p>
<h3 id="常见的Java相关的web服务器软件"><a href="#常见的Java相关的web服务器软件" class="headerlink" title="常见的Java相关的web服务器软件"></a>常见的Java相关的web服务器软件</h3><ul>
<li>webLogic:oracle公司的，大型JavaEE服务器，支持所有JavaEE规范，收费。</li>
<li>webSphere:IBM公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li>
<li>JBOSS:JBOSS公司，大型JavaEE服务器，支持所有JavaEE规范，收费。</li>
<li>Tomcat:Apache基金组织的，中小型JavaEE服务器，仅支持少量的JavaEE规范（如：servlet/jsp）开源免费的</li>
</ul>
<h1 id="Tomacat"><a href="#Tomacat" class="headerlink" title="Tomacat"></a>Tomacat</h1><ol>
<li>下载：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></li>
<li>安装：解压缩文件到本地即可</li>
<li>卸载：删除解压文件夹</li>
<li>启动：bin/startup.bat双击运行</li>
<li>访问：浏览器输入<a href="http://localhost:8080/">http://localhost:8080</a> (本地访问方式，非本地将localhost替换为本机IP地址即可)</li>
<li>关闭<ul>
<li>正常关闭：1. bin/shutdown.bat双击执行即可关闭2. ctrl+c也可正常关闭</li>
<li>强制关闭：点击启动窗口的关闭键</li>
</ul>
</li>
<li>配置<ul>
<li>项目部署的三种方式：<ol>
<li>直接将项目放在webapps目录下即可访问（通过/+相对路径），可以简化部署：将项目打包成一个war包，把war包放到webapps下，会自动解压缩，并且删除war文件，则项目也被自动删除</li>
<li>配置conf/server.xml文件（在<Host>标签体中添加<code>&lt;Context docBase=&quot;项目路径&quot; path=&quot;/虚拟目录&quot;/&gt;</code>例如<code>&lt;Context docBase=&quot;D:\CodingProgram\Web_YWRBY\webProject1&quot; path=&quot;/webPro1&quot;/&gt;</code>）</li>
<li>在conf/Catalina/localhost中创建任意名称的xml文件，载文件中编写<code>&lt;Context docBase=&quot;项目路径&quot; /&gt;</code>不需要填虚拟目录，虚拟目录就是这个xml文件的文件名（推荐使用这种方式，这种方式支持热部署，不需要来回重启Tomcat）</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="Java动态项目目录结构"><a href="#Java动态项目目录结构" class="headerlink" title="Java动态项目目录结构"></a>Java动态项目目录结构</h2><h3 id="项目根目录"><a href="#项目根目录" class="headerlink" title="项目根目录"></a>项目根目录</h3><ul>
<li>WEB-INF目录<ul>
<li>web.xml：web项目核心配置文件</li>
<li>classes目录：放置字节码文件的目录</li>
<li>lib目录：放置依赖jar包的目录</li>
</ul>
</li>
<li>其他</li>
</ul>
<h3 id="IDEA集成创建web项目"><a href="#IDEA集成创建web项目" class="headerlink" title="IDEA集成创建web项目"></a>IDEA集成创建web项目</h3><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=683">视频讲解</a></p>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol>
<li>使用Idea部署项目后，访问路径为url:8080/项目名_war_exploded的解决方案<ul>
<li>在tomcat配置页的Deployment下，修改Application context为/，即可直接使用url:8080访问项目主页。</li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>9-Spring集成web环境</title>
    <url>/2021/03/03/9-Spring%E9%9B%86%E6%88%90web%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ApplicationContext应用上下问的获取方式"><a href="#ApplicationContext应用上下问的获取方式" class="headerlink" title="ApplicationContext应用上下问的获取方式"></a>ApplicationContext应用上下问的获取方式</h2><p>下面是之前一直采用的应用上下问的获取方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过new ClassPathXmlApplicationContext(“applicationContext.xml”)来获取应用上下文，不过这种方式获取的弊端就是所有web层的服务使用前都需要利用new ClassPathXmlApplicationContext(“applicationContext.xml”);加载配置文件，导致配置文件需要重复被加载多次，应用上下文的对象也需要创建多次</p>
<p>在Web项目中，要解决这个问题，可以利用ServletContextListener监听web应用的启动，一旦web应用启动，就加载Spring配置文件，并创建ApplicationContext应用上下文对象，然后将其存储入最大的域servletContext中，其他web层方法就可以在需要时直接从域中获取应用上下文对象</p>
<h4 id="配置文件web-xml-配置监听器和Servlet"><a href="#配置文件web-xml-配置监听器和Servlet" class="headerlink" title="配置文件web.xml 配置监听器和Servlet"></a>配置文件web.xml 配置监听器和Servlet</h4><p>这里将Spring配置文件的文件名作为全局参数进行配置，避免了文件名加载配置文件导致的耦合</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--全局初始化参数 将Spring配置文件作为参数存储以解耦合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>applicationContext<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.ywrby.listener.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置Servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.ywrby.web.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>UserServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/userServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建监听器"><a href="#创建监听器" class="headerlink" title="创建监听器"></a>创建监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建监听器，监听服务器启动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在服务器启动时加载配置文件创建应用上下文对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取ServletContext域</span></span><br><span class="line">        ServletContext servletContext=sce.getServletContext();</span><br><span class="line">        <span class="comment">//从ServletContext域中获取全局初始化参数(获得Spring配置文件名)</span></span><br><span class="line">        String context_name=servletContext.getInitParameter(<span class="string">&quot;applicationContext&quot;</span>);</span><br><span class="line">        <span class="comment">//加载Spring配置文件并创建Spring应用上下文</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(context_name);</span><br><span class="line">        <span class="comment">//将Spring应用上下文存储到最大的域servletContext中</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;app&quot;</span>,context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h4 id="修改Servlet，从ServletContext域中获取Spring应用上下文"><a href="#修改Servlet，从ServletContext域中获取Spring应用上下文" class="headerlink" title="修改Servlet，从ServletContext域中获取Spring应用上下文"></a>修改Servlet，从ServletContext域中获取Spring应用上下文</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//利用req从ServletContext域中获取存储的应用上下文对象</span></span><br><span class="line">        ApplicationContext context= (ApplicationContext) req.getServletContext().getAttribute(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">        <span class="comment">//利用应用上下文获取Spring容器中的service层对象</span></span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Spring提供的获取应用上下文的工具"><a href="#Spring提供的获取应用上下文的工具" class="headerlink" title="Spring提供的获取应用上下文的工具"></a>Spring提供的获取应用上下文的工具</h2><p>上文提到的获取应用上下文的方式较为繁琐，并且每个web项目几乎都需要进行配置上下文的获取，所以Spring已经对应用上下文的获取进行了封装，我们只需要使用其提供的工具即可</p>
<p>Spring提供了一个监听器ContextLoaderListener就是对上述监听器的封装，该监听器实现了内部加载配置文件，创建应用上下文对象，并将对象存储在ServletContext域中，，同时提供了一个工具类WebApplicationContextUtils用来进行应用上下文的获取</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="0-在pom-xml中导入spring-web坐标"><a href="#0-在pom-xml中导入spring-web坐标" class="headerlink" title="0. 在pom.xml中导入spring-web坐标"></a>0. 在pom.xml中导入spring-web坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-在web-xml中配置ContextLoaderListener监听器"><a href="#1-在web-xml中配置ContextLoaderListener监听器" class="headerlink" title="1. 在web.xml中配置ContextLoaderListener监听器"></a>1. 在web.xml中配置ContextLoaderListener监听器</h4><p>注意，这里的初始化参数名称必须是contextConfigLocation不能进行修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局初始化参数 将Spring配置文件作为参数存储以解耦合--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="2-使用WebApplicationContextUtils获取应用上下文对象ApplicationContext"><a href="#2-使用WebApplicationContextUtils获取应用上下文对象ApplicationContext" class="headerlink" title="2. 使用WebApplicationContextUtils获取应用上下文对象ApplicationContext"></a>2. 使用WebApplicationContextUtils获取应用上下文对象ApplicationContext</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//（利用req获取ServletContext域）</span></span><br><span class="line">        ServletContext servletContext=req.getServletContext();</span><br><span class="line">        <span class="comment">//利用WebApplicationContextUtils获取应用上下文</span></span><br><span class="line">        WebApplicationContext context=WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">        <span class="comment">//利用应用上下文获取Spring容器中的service层对象</span></span><br><span class="line">        UserService service= (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        service.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>14-IO流</title>
    <url>/2021/03/03/14-IO%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p><strong>各个国家为自己国家的字符取的一套编号规则</strong>，计算机底层只能存储二进制，二进制可以转成十进制，十进制可以进行整数编号，所以计算机底层可以存储编号规则</p>
<h1 id="I-O流的分类与概述"><a href="#I-O流的分类与概述" class="headerlink" title="I/O流的分类与概述"></a>I/O流的分类与概述</h1><h4 id="（IO输入输出流-Input-Output）"><a href="#（IO输入输出流-Input-Output）" class="headerlink" title="（IO输入输出流-Input/Output）"></a>（IO输入输出流-Input/Output）</h4><blockquote>
<p>File类只能操作文件对象本身，并不能操作文件的内容（对文件内容进行读/写）。如果需要读写数据的操作，就需要使用I/O流</p>
</blockquote>
<h2 id="I-O流的分类"><a href="#I-O流的分类" class="headerlink" title="I/O流的分类"></a>I/O流的分类</h2><h3 id="按照流的方向来分"><a href="#按照流的方向来分" class="headerlink" title="按照流的方向来分"></a>按照流的方向来分</h3><ul>
<li>输入流：已内存为基准，把内存中的数据写出到磁盘文件或者网络介质中去的流称为输入流。例如：将数据写入文件</li>
<li>输出流：以内存为基准，把磁盘文件中的数据或者网络中的数据读入到内存中去的流称为输入流。输入流的作用就是读取数据到内存</li>
</ul>
<h3 id="按照流的内容来分"><a href="#按照流的内容来分" class="headerlink" title="按照流的内容来分"></a>按照流的内容来分</h3><ul>
<li>字节流：流中的数据最小单位是一个一个的字节，这个流就是字节流</li>
<li>字符流：流中的数据最小单位是一个一个的字符，这个流就是字符流</li>
</ul>
<h1 id="FileInputStream-文件字节输入流"><a href="#FileInputStream-文件字节输入流" class="headerlink" title="FileInputStream-文件字节输入流"></a>FileInputStream-文件字节输入流</h1><h4 id="以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存"><a href="#以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存" class="headerlink" title="以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存"></a>以内存为基准，将磁盘文件中的数据按照字节的形式读入到内存中的流，简单来说，就是按照字节读取文件数据到内存</h4><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public FileInputStream(File path):创建一个字节输入流管道与源文件对象接通</li>
<li>public FileInputStream(String pathName):创建一个字节输入流管道与文件路径对接</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>;  <span class="comment">//每次读取一个字节返回，读取完毕会返回-1</span></span><br></pre></td></tr></table></figure>

<h2 id="实例-读取一个字节"><a href="#实例-读取一个字节" class="headerlink" title="实例-读取一个字节"></a>实例-读取一个字节</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建File对象</span></span><br><span class="line">        File f1=<span class="keyword">new</span> File(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建文件输入流对象</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(f1);</span><br><span class="line">        <span class="comment">//读取一个字节</span></span><br><span class="line">        <span class="keyword">int</span> code=in.read();</span><br><span class="line">        <span class="comment">//不断循环输出，直到数据末尾返回-1</span></span><br><span class="line">        <span class="keyword">while</span>(code!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> c=(<span class="keyword">char</span>)code;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">            code = in.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但这种读取方式并不有效，在中文出现后无法避免出现乱码（因为会截断中文字节），并且这种方式效率较差，不建议采用</p>
<h2 id="实例-读取一个字节数组"><a href="#实例-读取一个字节数组" class="headerlink" title="实例-读取一个字节数组"></a>实例-读取一个字节数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//按照字节数组读取</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//返回值是读取的字节数</span></span><br><span class="line">        <span class="keyword">int</span> len=in.read(buffer);</span><br><span class="line">        System.out.println(<span class="string">&quot;读取了&quot;</span>+len+<span class="string">&quot;个字节&quot;</span>);</span><br><span class="line">        String rs=<span class="keyword">new</span> String(buffer);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这种方式仍然无法避免中文输出乱码的情况</strong></p>
<h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><p>在定义一个字节数组用于缓存数据后，不断从文件中读取数据到字节数组中，假如下一次读取仍然利用这个字节数组，但读取的字节数小于第一次字节数组被占用长度，则后续部分的字节不被覆盖</p>
<p>例如第一次读取5字节abcde,第二次读取2字节fg。则读取完后字节数组的组成是fgcde，只有前两位被覆盖，后三位并没有改变</p>
<h4 id="处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出"><a href="#处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出" class="headerlink" title="处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出"></a>处理方法，可以在输出时使用相应方法，限制输出内容长度，只要保证输出内容的长度和本次读取字符长度相同，就能保证旧数据（未被覆盖数据）不被输出</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String rs=<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);  <span class="comment">//限制输出范围</span></span><br></pre></td></tr></table></figure>


<h3 id="解决字符乱码的方式"><a href="#解决字符乱码的方式" class="headerlink" title="解决字符乱码的方式"></a>解决字符乱码的方式</h3><ul>
<li><strong>使用字符流</strong></li>
<li><strong>使用一个大小与文件字符大小刚好一致的字节数组</strong>（可以先通过文件对象，获取文件大小再获取文件对象的字节输出流并输出）缺陷是文件过大时占用内存严重，可能导致程序崩溃</li>
<li>使用readAllbytes()方法定义字符数组大小，例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer=in.readAllBytes();</span><br><span class="line">        String rs=<span class="keyword">new</span> String(buffer);</span><br><span class="line">        System.out.println(rs);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可"><a href="#综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可" class="headerlink" title="综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可"></a>综上，字节流在处理文件读写的表现上处理并不良好，一般读写文件建议采用字符流，但这并不影响字节流处理文件的赋值等操作，因为复制操作不涉及字符的编码，只需要把全部字节原封不动转移到其他文件即可</h4><h1 id="FileOutputStream-文件字节输出流"><a href="#FileOutputStream-文件字节输出流" class="headerlink" title="FileOutputStream-文件字节输出流"></a>FileOutputStream-文件字节输出流</h1><h4 id="以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去"><a href="#以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去" class="headerlink" title="以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去"></a>以内存为基准，把内存中的数据，按照字节的形式写出到磁盘中去，简言之，就是把内存数据按照字节写出到磁盘中去</h4><h2 id="构造器-1"><a href="#构造器-1" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public FileOutputStream(File file):创建一个字节输出流管道通向目标文件对象</li>
<li>public FileOutputStream(String file):创建一个字节输出流管道通向目标文件路径</li>
<li>public FileOutputStream(File file,boolean append):创建一个追加数据的字节输出流管道通向目标文件对象</li>
<li>public FileOutputStream(String file,boolean append):创建一个追加数据的字节输出流管道通向目标文件路径</li>
</ul>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul>
<li>public void write(int a):写一个字节</li>
<li>public void write(byte[] buffer):写一个字节数组出去</li>
<li>public void write(byte[] buffer,int pos,int len):写一个字节数组的一部分出去，第二个参数表示起始字节索引位置，第三个参数表示长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件对象连通</span></span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//写一个字节出去，这种方式不能写入中文字符，因为一个中文字符3个字节，超出限制</span></span><br><span class="line">        out.write(<span class="number">97</span>);  <span class="comment">//注意这里写的是写入字符的字符编码，不是要写入的字符</span></span><br><span class="line">        out.write(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写一个字节数组出去</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes=<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="number">100</span>,<span class="number">101</span>,<span class="number">102</span>&#125;;</span><br><span class="line">        out.write(bytes);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes1=<span class="string">&quot;Less is more!--工程学名言&quot;</span>.getBytes(<span class="string">&quot;GBK&quot;</span>);   <span class="comment">//可以指定编码格式，也可以直接默认采用系统当前编码格式</span></span><br><span class="line">        out.write(bytes1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写字节数组的一部分出去</span></span><br><span class="line">        out.write(bytes1,<span class="number">0</span>,<span class="number">13</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());  <span class="comment">//这里利用\r\n来换行的原因是为了保证兼容性更好，Windows可以直接用\n换行</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        out.flush();  <span class="comment">//立即刷新数据到文件中去，刷新后管道out还是可以正常调用</span></span><br><span class="line">        <span class="comment">//以下的关闭操作在每一次进行读写操作后都必须运行</span></span><br><span class="line">        out.close();  <span class="comment">//结束运行。结束后管道out不能继续使用，关闭操作包含刷新操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IO流管道默认是覆盖管道，每次<strong>启动新的Stream管道</strong>之前，都会清空文件对象之前的内容，注意，这里是启动新管道之前，不是调用管道执行方法时</p>
<p>如果想要追加数据，而不是覆盖，只需要在创建管道时，设置管道第二个参数为true即可（第二个参数表示是否为追加数据管道）</p>
<h1 id="字节流做文件的复制"><a href="#字节流做文件的复制" class="headerlink" title="字节流做文件的复制"></a>字节流做文件的复制</h1><p>字节是计算机中文件存储的最基本单位，所以字节流适合做一切文件的复制。</p>
<p>复制是把源文件的全部字节一个不漏的全部转移到目标文件，只要保证前后的格式一样，绝对不会出现错误</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>创建一个字节输入流管道与源文件接通</li>
<li>创建一个字节输出流管道与目标文件接通</li>
<li>创建一个字节数组作为中间传递媒介</li>
<li>从字节输入流管道读取数据，写出到字节输出流管道即可</li>
<li>关闭打开的管道资源</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流管道与源文件接通</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节输出流管道与目标文件连通</span></span><br><span class="line">        FileOutputStream out=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/output.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建字节数组用来作为中间传播媒介，并从字节输入流中读取数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] medium=in.readAllBytes();</span><br><span class="line">        <span class="comment">//向字节输出流中写入数据</span></span><br><span class="line">        out.write(medium);</span><br><span class="line">        <span class="comment">//关闭所有管道资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="FileReader-字符输入流"><a href="#FileReader-字符输入流" class="headerlink" title="FileReader-字符输入流"></a>FileReader-字符输入流</h1><p><strong>以内存为基准，把磁盘文件的数据以字符的形式读入到内存</strong></p>
<h2 id="构造器-2"><a href="#构造器-2" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public FileReader(File file):创建一个字符输入流与源文件对象接通</li>
<li>public FileReader(String filePath):创建一个字符输入流与源文件路径接通</li>
</ul>
<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h2><ul>
<li>public int read():读取一个字符的编号并返回，读取完毕返回-1</li>
<li>public int read(char[] buffer):读取一个字符数组，读取多少个字符就返回对应整数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fd = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//按照字符逐个读取</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c=fd.read();</span><br><span class="line">        <span class="keyword">while</span>(c!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%c&quot;</span>,(<span class="keyword">char</span>)c);</span><br><span class="line">            c=fd.read();</span><br><span class="line">        &#125;</span><br><span class="line">        FileReader fd2 = <span class="keyword">new</span> FileReader(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//读取字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len=fd2.read(chars);</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n\n共读取%d个字符！\n\n&quot;</span>,len);</span><br><span class="line">        String str=<span class="keyword">new</span> String(chars);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可见字符流按照字符数组循环读取数组。可以解决中文读取乱码的问题，并且性能较好</strong></p>
<h1 id="FileWriter-文件字符输出流"><a href="#FileWriter-文件字符输出流" class="headerlink" title="FileWriter-文件字符输出流"></a>FileWriter-文件字符输出流</h1><h4 id="以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去"><a href="#以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去" class="headerlink" title="以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去"></a>以内存为基准，把内存中的数据按照字符形式写出到磁盘文件中去，简单来说，就是把内存的数据以字符形式写出到文件中去</h4><h2 id="构造器-3"><a href="#构造器-3" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public FileWriter(File file):创建一个字符输出流管道通向目标文件对象</li>
<li>public FileWriter(String file):创建一个字符输出流管道通向目标文件路径</li>
<li>public FileWriter(File file,boolean append):创建一个追加数据的字符输出流管道通向目标文件对象</li>
<li>public FileWriter(String file,boolean append):创建一个追加数据的字符输出流管道通向目标文件路径</li>
</ul>
<h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h2><ul>
<li>public void write(int c):写1个字符出去</li>
<li>public void write(String c):写一个字符串出去</li>
<li>public void write(char[] buffer):写一个字符数组出去</li>
<li>public void write(String c,int pos,boolean append):写字符串的一部分出去</li>
</ul>
<h4 id="用法基本与文件字节输出流一致"><a href="#用法基本与文件字节输出流一致" class="headerlink" title="用法基本与文件字节输出流一致"></a>用法基本与文件字节输出流一致</h4><hr>
<h1 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h1><p><strong>缓冲流可以提高字节流和字符流的读写数据的性能</strong></p>
<h2 id="BufferedInputStream-字节缓冲输入流"><a href="#BufferedInputStream-字节缓冲输入流" class="headerlink" title="BufferedInputStream-字节缓冲输入流"></a>BufferedInputStream-字节缓冲输入流</h2><p>用于提高相对应的文件字节输入流读写数据的性能</p>
<p>可以把<strong>低级的字节输入流</strong>（FileInputStream）包装成一个<strong>高级的缓冲字节输入流</strong>(BufferedInputStream)管道，从而提高字节输入流读数据的性能</p>
<h3 id="构造器-4"><a href="#构造器-4" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span></span>;</span><br></pre></td></tr></table></figure>


<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>缓冲字节输入流管道自带一个8KB的<strong>缓冲池</strong>，每次可以直接借用操作系统的功能最多提取8KB的数据到缓冲池中去，以后我们直接从缓冲池读取数据，所以性能较好</p>
<h2 id="BufferedOutputStream-缓冲字节输出流"><a href="#BufferedOutputStream-缓冲字节输出流" class="headerlink" title="BufferedOutputStream-缓冲字节输出流"></a>BufferedOutputStream-缓冲字节输出流</h2><p>用于提高相对应的文件字节输出流读写数据的性能</p>
<p>可以把<strong>低级的字节输出流</strong>（FileInputStream）包装成一个<strong>高级的缓冲字节输出流</strong>(BufferedInputStream)管道，从而提高字节输入流读数据的性能</p>
<h3 id="构造器-5"><a href="#构造器-5" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream in)</span></span>;</span><br></pre></td></tr></table></figure>


<h2 id="BufferedReader-缓冲字符输入流"><a href="#BufferedReader-缓冲字符输入流" class="headerlink" title="BufferedReader-缓冲字符输入流"></a>BufferedReader-缓冲字符输入流</h2><p>与之同理</p>
<h2 id="BufferedWriter-缓冲字符输出流"><a href="#BufferedWriter-缓冲字符输出流" class="headerlink" title="BufferedWriter-缓冲字符输出流"></a>BufferedWriter-缓冲字符输出流</h2><p>与之同理</p>
<h1 id="对象的序列化与反序列化"><a href="#对象的序列化与反序列化" class="headerlink" title="对象的序列化与反序列化"></a>对象的序列化与反序列化</h1><p>我们在日常操作中经常需要把对象作为一种数据保存在文件中，典型的如涉及登录的cookies等。</p>
<p>这个过程中将对象作为数据保存到文件中的过程称为序列化，将文件中的数据重写读取出来并转换为对象的过程称为反序列化</p>
<p>序列化与反序列化使用到了相较于Reader，Writer更高级的对象输入输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> FileInputStreamDemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerizalizeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//对象序列化</span></span><br><span class="line">        <span class="comment">//创建准备序列化的对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;Leslie&quot;</span>, <span class="number">18</span>, <span class="number">95</span>);</span><br><span class="line">        <span class="comment">//创建文件输出字节流，指向用于储存对象的文件</span></span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//将文件输出字节流包装成高级的对象字节输出流</span></span><br><span class="line">        ObjectOutputStream out_object=<span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        <span class="comment">//将对象写入文件</span></span><br><span class="line">        out_object.writeObject(user);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        out_object.close();</span><br><span class="line">        out.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;对象序列化成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对象反序列化</span></span><br><span class="line">        <span class="comment">//创建空对象用于接收输入的对象</span></span><br><span class="line">        User user_new=<span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">//创建文件输入字节流指向要读取的文件</span></span><br><span class="line">        FileInputStream in=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/text.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//将文件输入字节流包装成高级的能够用于对象反序列化的对象字节输入流</span></span><br><span class="line">        ObjectInputStream in_object=<span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">        <span class="comment">//读入对象并强转为指定类型</span></span><br><span class="line">        user_new= (User) in_object.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化成功！&quot;</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;姓名：%s  年龄：%d  分数：%d\n&quot;</span>,user_new.getName(),user_new.getAge(),user_new.getScore());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>在实际存储过程中还涉及到密码这种危险变量的存储问题，一般情况下，如果我们并不想将这种可能存在隐患的数据一并存储到文件中，我们可以在定义对象类时，在不想存储的成员变量前<strong>用transient变量修饰</strong>，由此修饰符修饰的变量，在对象被存储进文件中时，不会一并被存储（不参与序列化）</p>
<h3 id="加入版本序列号"><a href="#加入版本序列号" class="headerlink" title="加入版本序列号"></a>加入版本序列号</h3><p>加入一个对象数据可能经过多次迭代更新，这时我们就可以在定义时为这个类添加版本序列号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID=<span class="number">1L</span>;</span><br></pre></td></tr></table></figure>

<p>版本序列号用长整型定义，结尾的L可加可省略，在定义了版本序列号后，序列化与反序列化要求前后的序列号必须一致，即版本1定义的变量存储在文件中，只能用版本同样为1的变量来接收，如果前后的版本号不一致，在反序列化时就会报错</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.io.InvalidClassException: FileInputStreamDemo.User; local class incompatible: stream classdesc serialVersionUID = 1, local class serialVersionUID = 2</span><br></pre></td></tr></table></figure>

<h1 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol>
<li>方便，快速的将数据写出</li>
<li>可以保证打印内容前后一致（打印的是什么，结果就是什么）</li>
</ol>
<h2 id="构造器-6"><a href="#构造器-6" class="headerlink" title="构造器"></a>构造器</h2><ul>
<li>public PrintStream(OutpputStream os);</li>
<li>public PrintStream(String filePath);</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//打印流可以接低级流管道，或者直接接文件路径等等</span></span><br><span class="line">        PrintStream ps=<span class="keyword">new</span> PrintStream(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        ps.println(<span class="number">955</span>);  <span class="comment">//注意这里写入的就是数字97，不是字符集的编码，因为打印流写什么就打印什么</span></span><br><span class="line">        ps.println(<span class="string">&quot;Leslie&quot;</span>);  <span class="comment">//这里直接打印字符串</span></span><br><span class="line">        ps.println(<span class="number">99.90</span>);  <span class="comment">//打印浮点数</span></span><br><span class="line">        ps.println(<span class="keyword">false</span>);  <span class="comment">//打印布尔值</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//写字节出去</span></span><br><span class="line">        ps.write(<span class="number">97</span>);  <span class="comment">//这里的97表示字符集的编码，也就是a</span></span><br><span class="line">        ps.write(<span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>注意，在向缓冲流中传入低级流时不能传入打印流，因为打印流本身功能相较于缓冲流更强大，打印流本身以及包含了缓冲流的内容，是比缓冲流更高级的流</p>
<h2 id="改变输出流向-重定向"><a href="#改变输出流向-重定向" class="headerlink" title="改变输出流向-重定向"></a>改变输出流向-重定向</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        PrintStream ps=<span class="keyword">new</span> PrintStream(<span class="string">&quot;src/FileInputStreamDemo/input.txt&quot;</span>);</span><br><span class="line">        System.setOut(ps);  <span class="comment">//重定向功能，让系统的输出流流向打印流，所以以下输出均不会在控制台显示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Properties-属性集文件"><a href="#Properties-属性集文件" class="headerlink" title="Properties-属性集文件"></a>Properties-属性集文件</h1><p>本质是一个Map集合，即键值对集合。核心用途在于当作属性文件（后缀是.properties结尾的文件，里面的内容都说是键值对，在大型框架中十分常见）。<strong>可以把键值对的数据存入到一个属性文件中去</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将数据写入属性集文件</span></span><br><span class="line">        <span class="comment">//创建属性集对象</span></span><br><span class="line">        Properties p=<span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//存入键值对数据</span></span><br><span class="line">        p.setProperty(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        p.setProperty(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">//将数据存入属性文件中</span></span><br><span class="line">        OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src/FileInputStreamDemo/new.properties&quot;</span>);</span><br><span class="line">        p.store(os,<span class="string">&quot;&quot;</span>);  <span class="comment">//参数二表示--保存心得，对保存数据进行解释说明</span></span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从属性集文件中读出属性集对象</span></span><br><span class="line">        <span class="comment">//利用字节输入流加载属性文件中的数据到属性集对象p1中去</span></span><br><span class="line">        Properties p1=<span class="keyword">new</span> Properties();</span><br><span class="line">        InputStream is=<span class="keyword">new</span> FileInputStream(<span class="string">&quot;src/FileInputStreamDemo/new.properties&quot;</span>);</span><br><span class="line">        p1.load(is);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>27-登录注册页面基本实现</title>
    <url>/2021/03/03/27-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E9%A1%B5%E9%9D%A2%E5%9F%BA%E6%9C%AC%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="登录注册页面基本实现"><a href="#登录注册页面基本实现" class="headerlink" title="登录注册页面基本实现"></a>登录注册页面基本实现</h1><h2 id="前端注册页面"><a href="#前端注册页面" class="headerlink" title="前端注册页面"></a>前端注册页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: 2021/2/1</span><br><span class="line">  Time: 19:54</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书城注册页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: ridge;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkUsername</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取用户名</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> username=$(<span class="string">&quot;#username&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_name=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断用户名是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_name.test(username);</span></span><br><span class="line">            if(result)&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//用户名合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#username&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//用户名非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#username&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password=$(<span class="string">&quot;#password&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_pwd=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断密码是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_pwd.test(password);</span></span><br><span class="line">            if(result)&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//密码合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#password&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//密码非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#password&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkConfirmPWD</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> password=$(<span class="string">&quot;#password&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取确认密码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> confirm_pwd=$(<span class="string">&quot;#confirm_pwd&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_pwd=<span class="regexp">/^\w&#123;8,20&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断重新输入的密码是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_pwd.test(confirm_pwd);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//判断两次输入的密码是否一致</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result2=<span class="literal">false</span>;</span></span><br><span class="line">            if(password===confirm_pwd)&#123;</span><br><span class="line"><span class="javascript">                result2=<span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                result2=<span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            if(result&amp;&amp;result2)&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//重新输入密码通过</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#confirm_pwd&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//未通过</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#confirm_pwd&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkTel</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取电话号码</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> tel=$(<span class="string">&quot;#tel&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_tel=<span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断电话是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_tel.test(tel);</span></span><br><span class="line">            if(result)&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//电话合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#tel&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//电话非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#tel&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//获取邮箱</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> email=$(<span class="string">&quot;#email&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="comment">//定义正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> reg_email=<span class="regexp">/^[A-Za-z0-9-._]+@[A-Za-z0-9-]+(.[A-Za-z0-9]+)*(.[A-Za-z]&#123;2,6&#125;)$/</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//判断邮箱是否满足正则表达式</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=reg_email.test(email);</span></span><br><span class="line">            if(result)&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//邮箱合法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#email&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//邮箱非法</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#email&quot;</span>).css(<span class="string">&quot;border&quot;</span>,<span class="string">&quot;2px solid red&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> result;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#registerForm&quot;</span>).submit(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//采用ajax异步提交表单（以便于利用后端返回的数据进行操作，同时保证了信息的安全性）</span></span></span><br><span class="line">                if(checkPassword() &amp;&amp; checkUsername()</span><br><span class="line">                    &amp;&amp; checkEmail() &amp;&amp; checkConfirmPWD() &amp;&amp; checkTel())&#123;</span><br><span class="line"><span class="javascript">                    <span class="comment">//表单验证通过，数据符合要求，执行异步提交操作</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//$(this).serialize表示通过serialize方法获取表单数据（这里的this表示的就是registerForm）</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//第三个参数就是利用后端返回的data数据进行操作</span></span></span><br><span class="line"><span class="javascript">                    $.post(<span class="string">&quot;RegisterServlet&quot;</span>,$(<span class="built_in">this</span>).serialize(),<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line">                        if(data.flag)&#123;</span><br><span class="line"><span class="javascript">                            <span class="comment">//注册成功，跳转到登录页面</span></span></span><br><span class="line"><span class="javascript">                            alert(<span class="string">&quot;注册成功！单击跳转到登录页面&quot;</span>);</span></span><br><span class="line"><span class="javascript">                            location.href=<span class="string">&quot;login.jsp&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//注册失败，向页面添加提示信息（errorMsg内添加文本）</span></span></span><br><span class="line"><span class="javascript">                            $(<span class="string">&quot;#errorMsg&quot;</span>).html(data.errMsg);</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;提交失败！请检查信息是否填写准确&quot;</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="comment">//返回值若为true，则表单会被同步提交，所以这里始终将返回值设为false</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//绑定所有离焦事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#username&quot;</span>).blur(checkUsername);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#password&quot;</span>).blur(checkPassword);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#confirm_pwd&quot;</span>).blur(checkConfirmPWD);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#email&quot;</span>).blur(checkEmail);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#tel&quot;</span>).blur(checkTel);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">cellpadding</span>=<span class="string">0</span> <span class="attr">cellspacing</span>=<span class="string">0</span> <span class="attr">style</span>=<span class="string">&quot;width:100% ;height:100%&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/icon.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>会员注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;truename&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;truename&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入真实姓名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;truename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;confirm_pwd&quot;</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;confirm_pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请再次输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;confirm_pwd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tel&quot;</span>&gt;</span>联系电话<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入手机号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入Email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span> 已有账号！<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login.jsp&quot;</span>&gt;</span>点击登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="前端登录页面"><a href="#前端登录页面" class="headerlink" title="前端登录页面"></a>前端登录页面</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: renboyu010214</span><br><span class="line">  Date: 2021/2/3</span><br><span class="line">  Time: 9:00</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>书城登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        #div1 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-style</span>: ridge;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #div2 &#123;</span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">z-index</span>: <span class="number">10</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//为登录按钮绑定单机事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#login&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//采用ajax异步提交表单（以便于利用后端返回的数据进行操作，同时保证了信息的安全性）</span></span></span><br><span class="line"><span class="javascript">                $.post(<span class="string">&quot;LoginServlet&quot;</span>,$(<span class="string">&quot;#loginForm&quot;</span>).serialize(),<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//data为返回的结果日志</span></span></span><br><span class="line">                    if(data.flag)&#123;</span><br><span class="line"><span class="javascript">                        <span class="comment">//登录成功</span></span></span><br><span class="line"><span class="javascript">                        location.href=<span class="string">&quot;index.jsp&quot;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//登录失败，显示错误信息，提示重新登录</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">&quot;#errorMsg&quot;</span>).html(data.errMsg);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">cellpadding</span>=<span class="string">0</span> <span class="attr">cellspacing</span>=<span class="string">0</span> <span class="attr">style</span>=<span class="string">&quot;width:100% ;height:100%&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">valign</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/icon.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>会员登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;errorMsg&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red;text-align: center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密 码<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录账号&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span> 没有账户？<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/register.jsp&quot;</span>&gt;</span>点击注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后端部分实现"><a href="#后端部分实现" class="headerlink" title="后端部分实现"></a>后端部分实现</h2><h4 id="成员信息JavaBean"><a href="#成员信息JavaBean" class="headerlink" title="成员信息JavaBean"></a>成员信息JavaBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer ID;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String truename;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String postcode;</span><br><span class="line">    <span class="keyword">private</span> String cardno;</span><br><span class="line">    <span class="keyword">private</span> String cardtype;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(Integer ID, String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String truename, String password,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String city, String address, String postcode,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String cardno, String cardtype,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String tel, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.truename = truename;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.postcode = postcode;</span><br><span class="line">        <span class="keyword">this</span>.cardno = cardno;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = cardtype;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = Integer.valueOf(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.truename = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.city = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.address = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.postcode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.cardno = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.tel = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.email = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setID</span><span class="params">(Integer ID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTruename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> truename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTruename</span><span class="params">(String truename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.truename = truename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostcode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> postcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostcode</span><span class="params">(String postcode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postcode = postcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardno</span><span class="params">(String cardno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardno = cardno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCardtype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cardtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCardtype</span><span class="params">(String cardtype)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cardtype = cardtype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Member&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ID=&quot;</span> + ID +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, truename=&#x27;&quot;</span> + truename + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, postcode=&#x27;&quot;</span> + postcode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cardno=&#x27;&quot;</span> + cardno + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, cardtype=&#x27;&quot;</span> + cardtype + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="封装后端返回数据JavaBean"><a href="#封装后端返回数据JavaBean" class="headerlink" title="封装后端返回数据JavaBean"></a>封装后端返回数据JavaBean</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.model;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于封装后端返回前端的数据对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;  <span class="comment">//后端正常返回true，后端异常返回false</span></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//后端 返回结果数据对象</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;  <span class="comment">//发生异常的错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag, Object data, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultInfo</span><span class="params">(<span class="keyword">boolean</span> flag, String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> errMsg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErrMsg</span><span class="params">(String errMsg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errMsg = errMsg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数据库工具类"><a href="#数据库工具类" class="headerlink" title="数据库工具类"></a>数据库工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConnDB工具类</span></span><br><span class="line"><span class="comment"> * 用于进行数据库连接与数据库操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnDB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Connection connection=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Statement statement=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> ResultSet resultSet=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 静态代码块，只在创建时调用一次</span></span><br><span class="line"><span class="comment">     * 可以在此处进行配置文件的读取，以及驱动注册等步骤</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 将url，user，password，driver等变量</span></span><br><span class="line"><span class="comment">     * 存入配置文件并读取可以提高代码复用性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建配置文件数据集</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//创建类加载器classLoader</span></span><br><span class="line">            ClassLoader classLoader=ConnDB.class.getClassLoader();</span><br><span class="line">            <span class="comment">//通过类加载器获取在src下的配置文件，这样可以避免绝对路径带来的问题</span></span><br><span class="line">            URL res=classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="keyword">assert</span> res != <span class="keyword">null</span>;  <span class="comment">//确保res不为空</span></span><br><span class="line">            String path=res.getPath();</span><br><span class="line">            <span class="comment">//加载配置文件</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取配置文件中的数据</span></span><br><span class="line">            url=pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user=pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password=pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver=pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据库连接对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回新创建的数据库连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;  <span class="comment">//创建数据库连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=DriverManager.getConnection(url,user,password); <span class="comment">//进行数据库连接</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(connection == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果未获取到连接，输出连接信息，方便调试</span></span><br><span class="line">            System.err.println(<span class="string">&quot;DbConnectionManager.getConnection():&quot;</span></span><br><span class="line">            +url+<span class="string">&quot;\r\n&quot;</span>+user+<span class="string">&quot;\r\n&quot;</span>+password+<span class="string">&quot;\r\n&quot;</span>+driver);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回连接对象</span></span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行数据库查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 查询结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">executeQuery</span><span class="params">(String sql)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            resultSet=statement.executeQuery(sql);  <span class="comment">//执行sql语句并获得结果集对象</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultSet; <span class="comment">//返回结果集</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行更新数据库语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回更新语句执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;  <span class="comment">//sql更新语句执行结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            result=statement.executeUpdate(sql);  <span class="comment">//执行更新语句</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">//返回更新操作执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现更新数据后获取自动生成的编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动生成的编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeUpdate_id</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;  <span class="comment">//sql更新语句执行结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection=getConnection();  <span class="comment">//获取数据库连接对象</span></span><br><span class="line">            <span class="comment">//获取statement以操作数据库</span></span><br><span class="line">            statement=connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">            result=statement.executeUpdate(sql);  <span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line">            String ID=<span class="string">&quot;select @@IDENTITY as id&quot;</span>; <span class="comment">//定义用于获取刚刚生成的自动编号的SQL语句</span></span><br><span class="line">            resultSet=statement.executeQuery(sql);  <span class="comment">//获取自动生成的编号</span></span><br><span class="line">            <span class="keyword">if</span>(resultSet.next())&#123;  <span class="comment">//如果存在该数据</span></span><br><span class="line">                <span class="keyword">int</span> autoID=resultSet.getInt(<span class="string">&quot;id&quot;</span>); <span class="comment">//将获取到的ID数据保存并返回</span></span><br><span class="line">                result=autoID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;  <span class="comment">//返回更新操作执行结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭数据库相关资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeDB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(statement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeQueryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where username=&#x27;Leslie123&#x27;&quot;</span>;</span><br><span class="line">        ResultSet rs=executeQuery(sql);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                String password = rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="父类Dao"><a href="#父类Dao" class="headerlink" title="父类Dao"></a>父类Dao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Member member)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册-登录Dao"><a href="#注册-登录Dao" class="headerlink" title="注册/登录Dao"></a>注册/登录Dao</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ChStr;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberDaoImpl</span> <span class="keyword">implements</span> <span class="title">MemberDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConnDB connDB=<span class="keyword">new</span> ConnDB();</span><br><span class="line">    <span class="keyword">private</span> ChStr ch=<span class="keyword">new</span> ChStr();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建会员</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 会员对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回记录更改的条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;insert方法正常执行...&quot;);</span></span><br><span class="line">        <span class="keyword">int</span> ret=-<span class="number">1</span>;  <span class="comment">//用于记录更新记录的条数</span></span><br><span class="line">        <span class="comment">//获取传入用户的数据信息</span></span><br><span class="line">        String username=member.getUsername();</span><br><span class="line">        String truename=member.getTruename();</span><br><span class="line">        String password=member.getPassword();</span><br><span class="line">        String city=member.getCity();</span><br><span class="line">        String address=member.getAddress();</span><br><span class="line">        String postcode=member.getPostcode();</span><br><span class="line">        String cardno=member.getCardno();</span><br><span class="line">        String cardtype=member.getCardtype();</span><br><span class="line">        String tel=member.getTel();</span><br><span class="line">        String email=member.getEmail();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//插入语句</span></span><br><span class="line">            String sql=<span class="string">&quot;INSERT INTO tb_member(userName,trueName,passWord,city,&quot;</span></span><br><span class="line">                    + <span class="string">&quot;address,postcode,cardNo,cardType,tel,email) VALUES(&#x27;&quot;</span></span><br><span class="line">                    + username+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+truename+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + password+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+city+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + address+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+postcode+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + cardno+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+cardtype+<span class="string">&quot;&#x27;,&#x27;&quot;</span></span><br><span class="line">                    + tel+<span class="string">&quot;&#x27;,&#x27;&quot;</span>+email+<span class="string">&quot;&#x27;)&quot;</span>;</span><br><span class="line">            ret=connDB.executeUpdate(sql);  <span class="comment">//执行插入语句</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            ret=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭数据库连接</span></span><br><span class="line">        connDB.closeDB();</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有会员数据信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 以列表形式返回所有会员数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明会员对象</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//创建List集合，用于保存会员信息</span></span><br><span class="line">        List&lt;Member&gt; memberList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member&quot;</span>;  <span class="comment">//定义sql语句</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql); <span class="comment">//获取所有会员数据信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将会员数据信息插入列表</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                        resultSet.getString(<span class="number">2</span>),resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">4</span>),resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">6</span>),resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">8</span>),resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                        resultSet.getString(<span class="number">12</span>),resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                memberList.add(member);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        connDB.closeDB();  <span class="comment">//关闭数据库连接</span></span><br><span class="line">        <span class="keyword">return</span> memberList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询是否存在该用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在同名用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;findByUsername方法正常执行...&quot;);</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where userName = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(sql);</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                    member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                            resultSet.getString(<span class="number">2</span>), resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">4</span>), resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">6</span>), resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">8</span>), resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">12</span>), resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名和密码查询用户是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;findByUsername方法正常执行...&quot;);</span></span><br><span class="line">        Member member=<span class="keyword">null</span>;</span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_member where userName = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">        <span class="comment">//System.out.println(sql);</span></span><br><span class="line">        ResultSet resultSet=connDB.executeQuery(sql);</span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">                    member = <span class="keyword">new</span> Member(Integer.valueOf(resultSet.getString(<span class="number">1</span>)),</span><br><span class="line">                            resultSet.getString(<span class="number">2</span>), resultSet.getString(<span class="number">3</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">4</span>), resultSet.getString(<span class="number">5</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">6</span>), resultSet.getString(<span class="number">7</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">8</span>), resultSet.getString(<span class="number">9</span>),</span><br><span class="line">                            resultSet.getString(<span class="number">12</span>), resultSet.getString(<span class="number">13</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> member;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Member member=<span class="keyword">new</span> Member();</span><br><span class="line">        member.setUsername(<span class="string">&quot;Leslie&quot;</span>);</span><br><span class="line">        member.setTruename(<span class="string">&quot;BoyuRen&quot;</span>);</span><br><span class="line">        member.setPassword(<span class="string">&quot;010214&quot;</span>);</span><br><span class="line">        member.setCity(<span class="string">&quot;ChongQing&quot;</span>);</span><br><span class="line">        member.setAddress(<span class="string">&quot;BayiRoadBeibeiDistrict&quot;</span>);</span><br><span class="line">        member.setPostcode(<span class="string">&quot;761007&quot;</span>);</span><br><span class="line">        member.setCardno(<span class="string">&quot;1301021999&quot;</span>);</span><br><span class="line">        member.setCardtype(<span class="string">&quot;IDcard&quot;</span>);</span><br><span class="line">        member.setTel(<span class="string">&quot;0311-89160328&quot;</span>);</span><br><span class="line">        member.setEmail(<span class="string">&quot;ywrby@foxmail.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num=insert(member);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Member&gt; memberList=select();</span><br><span class="line">        <span class="keyword">for</span>(Member m:memberList)&#123;</span><br><span class="line">            System.out.println(m+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findTest</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Member member=findByUsername(<span class="string">&quot;Leslie123&quot;</span>);</span><br><span class="line">        System.out.println(member);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册Service"><a href="#注册Service" class="headerlink" title="注册Service"></a>注册Service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">regist</span><span class="params">(Member member)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;RegisterService正常执行...&quot;);</span></span><br><span class="line">        <span class="comment">//创建数据库连接</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl dao=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        <span class="comment">//查询用户名是否存在</span></span><br><span class="line">        String username=member.getUsername();</span><br><span class="line">        Member memberResult=dao.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(memberResult!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户名存在，注册失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用户名不存在 保存信息</span></span><br><span class="line">        dao.insert(member);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册Servlet"><a href="#注册Servlet" class="headerlink" title="注册Servlet"></a>注册Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.ResultInfo;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.service.RegisterService;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RegisterServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;RegisterServlet正常执行...&quot;);</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl insertMember=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        RegisterService service=<span class="keyword">new</span> RegisterService();</span><br><span class="line">        Member member=<span class="keyword">new</span> Member();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String,String[]&gt; memberData=request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        member.setUsername(memberData.get(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setTruename(memberData.get(<span class="string">&quot;truename&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setPassword(memberData.get(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setTel(memberData.get(<span class="string">&quot;tel&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setEmail(memberData.get(<span class="string">&quot;email&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//调用service完成注册</span></span><br><span class="line">        <span class="keyword">boolean</span> result= <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = service.regist(member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//封装对象返回前端</span></span><br><span class="line">        ResultInfo info=<span class="keyword">new</span> ResultInfo();</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="comment">//用户创建成功，数据成功保存</span></span><br><span class="line">            info.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//用户创建失败，数据未保存</span></span><br><span class="line">            info.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            info.setErrMsg(<span class="string">&quot;注册失败！请尝试重新注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将info对象序列化为json</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json=mapper.writeValueAsString(info);</span><br><span class="line">        <span class="comment">//将json数据写回客户端</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="登录Service"><a href="#登录Service" class="headerlink" title="登录Service"></a>登录Service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.dao.MemberDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.utils.ConnDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">login</span><span class="params">(Member member)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据库连接</span></span><br><span class="line">        ConnDB conn=<span class="keyword">new</span> ConnDB();</span><br><span class="line">        MemberDaoImpl dao=<span class="keyword">new</span> MemberDaoImpl();</span><br><span class="line">        <span class="keyword">return</span> dao.findByUsernameAndPassword(member.getUsername(),member.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="登录Servlet"><a href="#登录Servlet" class="headerlink" title="登录Servlet"></a>登录Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ywrby.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.Member;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.model.ResultInfo;</span><br><span class="line"><span class="keyword">import</span> cn.ywrby.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取用户输入数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        Member member = <span class="keyword">new</span> Member();</span><br><span class="line">        member.setUsername(map.get(<span class="string">&quot;username&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        member.setPassword(map.get(<span class="string">&quot;password&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//调用service进行查询与匹配</span></span><br><span class="line">        LoginService service = <span class="keyword">new</span> LoginService();</span><br><span class="line">        Member member1 = service.login(member);</span><br><span class="line"></span><br><span class="line">        ResultInfo info = <span class="keyword">new</span> ResultInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户能否正常登录</span></span><br><span class="line">        <span class="keyword">if</span>(member1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户不存在，提示用户检查用户名以及密码输入</span></span><br><span class="line">            info.setFlag(<span class="keyword">false</span>);</span><br><span class="line">            info.setErrMsg(<span class="string">&quot;用户名或密码输入错误！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户存在，提示用户成功登陆</span></span><br><span class="line">            info.setFlag(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//响应数据</span></span><br><span class="line">        ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        mapper.writeValue(response.getOutputStream(),info);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
</search>
